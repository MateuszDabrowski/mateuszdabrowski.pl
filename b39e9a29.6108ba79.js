(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{108:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),b=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=b(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=b(n),p=a,u=d["".concat(i,".").concat(p)]||d[p]||m[p]||r;return n?o.a.createElement(u,s(s({ref:t},c),{},{components:n})):o.a.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},109:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var a=n(0),o=n(54),r=n.n(o);const i=({content:e})=>a.createElement(a.Fragment,null,a.createElement("p",{id:r.a.leadText},e))},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(3),o=n(7),r=(n(0),n(108)),i=n(109),s={id:"sfmc-sql-select",title:"SFMC SQL Select",sidebar_label:"Select",description:"Selected information on the SELECT statement in SFMC SQL"},l={unversionedId:"sql/sfmc-sql-select",id:"sql/sfmc-sql-select",isDocsHomePage:!1,title:"SFMC SQL Select",description:"Selected information on the SELECT statement in SFMC SQL",source:"@site/docs/sql/sfmc-sql-select.mdx",slug:"/sql/sfmc-sql-select",permalink:"/docs/sql/sfmc-sql-select",editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/sql/sfmc-sql-select.mdx",version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1606072531,sidebar_label:"Select",sidebar:"snippets",previous:{title:"SFMC SQL Basics",permalink:"/docs/sql/sfmc-sql-basics"},next:{title:"SFMC SQL From",permalink:"/docs/sql/sfmc-sql-from"}},c=[{value:"Labelling with AS",id:"labelling-with-as",children:[{value:"Custom values",id:"custom-values",children:[]}]},{value:"Conditional values with CASE",id:"conditional-values-with-case",children:[{value:"Search version of CASE",id:"search-version-of-case",children:[]},{value:"LIKE in CASE",id:"like-in-case",children:[]}]},{value:"Table Prefixes",id:"table-prefixes",children:[]},{value:"Flow control",id:"flow-control",children:[]},{value:"Variables &amp; Functions",id:"variables--functions",children:[]}],b={rightToc:c};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)(i.a,{content:"Selected information on the SELECT statement in SFMC SQL",mdxType:"LeadText"}),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"SELECT")," statement opens each query. It both defines the columns of data extensions and system data views that will be needed, as well as allows you to create entirely new data points."),Object(r.b)("p",null,"The simplest version of this statement is ",Object(r.b)("inlineCode",{parentName:"p"},"SELECT *"),", which targets all available columns from the source. I do not recommend this approach, as it is terrible for both readability and performance of your query. As Salesforce Marketing Cloud caches the source Data Extension column names when you save SQL Query Activity, you won't have added value of flexible selection. You will still have to edit and save the activity. Also, ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sql/sfmc-sql-basics#query-studio"}),"Query Studio")," does not support this shortcut. Don't use ",Object(r.b)("inlineCode",{parentName:"p"},"*"),"."),Object(r.b)("p",null,"The prefered method is targeting columns explicitly by their names:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'title="Select ContactKey and EmailAddress columns"',title:'"Select',ContactKey:!0,and:!0,EmailAddress:!0,'columns"':!0}),"SELECT\n    ContactKey,\n    EmailAddres\n")),Object(r.b)("p",null,"If a column name contains a space, you need to capture it with squared brackets:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'{4} title="Let\'s add another column with whitespace in its name"',"{4}":!0,title:"\"Let's",add:!0,another:!0,column:!0,with:!0,whitespace:!0,in:!0,its:!0,'name"':!0}),"SELECT\n    ContactKey,\n    EmailAddres,\n    [External Contact Id]\n")),Object(r.b)("p",null,"There are also some exceptional cases related to selected ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/config/sfmc-config-system-data-views"}),"System Data Views")," in Salesforce Marketing Cloud, where you need to use an underscore prefix before a name (for example when taking Subscriber ID from Enterprise Attributes):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'{2} title="There are some special column names with an underscore prefix"',"{2}":!0,title:'"There',are:!0,some:!0,special:!0,column:!0,names:!0,with:!0,an:!0,underscore:!0,'prefix"':!0}),"SELECT\n    _SubscriberId\n")),Object(r.b)("h2",{id:"labelling-with-as"},"Labelling with AS"),Object(r.b)("p",null,"You can also utilize ",Object(r.b)("inlineCode",{parentName:"p"},"SELECT")," as a tool to rename the source columns to match your needs in an outcome data extension. It is especially useful when you are pulling the data from Synchronized Data Extension with names coming from Salesforce custom fields."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'{4-5} title="Improve readability and consistency with labelling"',"{4-5}":!0,title:'"Improve',readability:!0,and:!0,consistency:!0,with:!0,'labelling"':!0}),"SELECT\n    ContactKey,\n    EmailAddress,\n    [External Contact Id] AS ExternalContactId,\n    Gender__c AS Gender\n")),Object(r.b)("h3",{id:"custom-values"},"Custom values"),Object(r.b)("p",null,"Use labels also for passing new values directly from your query. Need to add a custom string to outcome data extension? Or maybe synchronization timestamp for debugging purposes? You can leverage SQL for it."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:"{6} title=\"Add custom column labelled 'ImportDate' with a value equal to the UTC of the script execution for each record\"","{6}":!0,title:'"Add',custom:!0,column:!0,labelled:!0,"'ImportDate'":!0,with:!0,a:!0,value:!0,equal:!0,to:!0,the:!0,UTC:!0,of:!0,script:!0,execution:!0,for:!0,each:!0,'record"':!0}),"SELECT\n    ContactKey,\n    EmailAddress,\n    [External Contact Id] AS ExternalContactId,\n    Gender__c AS Gender,\n    'Lead' AS RecordType,\n    GETUTCDATE() AS ImportDate\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"You Should Know")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"You can even go further by creating new values by leveraging existing data! For example, if you have a first name and last name, you can use SQL to create a FullName column from scratch:"),Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'{4} title="Let\'s create a concatenated column for easier personalization"',"{4}":!0,title:"\"Let's",create:!0,a:!0,concatenated:!0,column:!0,for:!0,easier:!0,'personalization"':!0}),"SELECT\n    SubscriberKey,\n    EmailAddress,\n    FirstName + ' ' + LastName AS FullName\n")),Object(r.b)("p",{parentName:"div"},"It becomes mighty with the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sql/sfmc-sql-string-functions"}),"SQL String functions"),"."))),Object(r.b)("h2",{id:"conditional-values-with-case"},"Conditional values with CASE"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement evaluates a list of conditions and returns one of the multiple possible result expressions. For Marketing Cloud purposes, it is especially useful when you not only want to select a column but also modify the values within it. Perfect for translating numeric codes to descriptive ones for personalization purposes. Excellent for standardizing data (change those ",Object(r.b)("inlineCode",{parentName:"p"},"1"),", ",Object(r.b)("inlineCode",{parentName:"p"},"true")," and ",Object(r.b)("inlineCode",{parentName:"p"},"on")," values of opt-in to a single format)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:"{7-14}","{7-14}":!0}),"SELECT\n    ContactKey,\n    EmailAddress,\n    [External Contact Id] AS ExternalContactId,\n    Gender__c AS Gender,\n    'Lead' AS RecordType,\n    GETUTCDATE() AS ImportDate,\n    CASE MemberType__c\n        WHEN 1 THEN 'Bronze'\n        WHEN 2 THEN 'Silver'\n        WHEN 3 THEN 'Gold'\n        WHEN 4 THEN 'Platinum'\n        ELSE 'Unregistered'\n    END\n")),Object(r.b)("p",null,"You can have as many ",Object(r.b)("inlineCode",{parentName:"p"},"WHEN"),"/",Object(r.b)("inlineCode",{parentName:"p"},"THEN")," conditions as you want. Also, the ",Object(r.b)("inlineCode",{parentName:"p"},"ELSE")," statement is optional, but a good idea to catch unexpected values."),Object(r.b)("p",null,"Feel free also to leverage ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"#labels"}),"labels")," to manipulate the column name at the same time:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:"{14}","{14}":!0}),"SELECT\n    ContactKey,\n    EmailAddress,\n    [External Contact Id] AS ExternalContactId,\n    Gender__c AS Gender,\n    'Lead' AS RecordType,\n    GETUTCDATE() AS ImportDate,\n    CASE MemberType__c\n        WHEN 1 THEN 'Bronze'\n        WHEN 2 THEN 'Silver'\n        WHEN 3 THEN 'Gold'\n        WHEN 4 THEN 'Platinum'\n        ELSE 'Unregistered'\n    END AS MemberType\n")),Object(r.b)("h3",{id:"search-version-of-case"},"Search version of CASE"),Object(r.b)("p",null,"Above examples are already useful in segmentation, but there is also one more way to write and use ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement that gives even more power. The search ",Object(r.b)("inlineCode",{parentName:"p"},"CASE"),"."),Object(r.b)("p",null,"The difference is that you are not passing the column name on which you will be building conditions. Instead, you create a boolean expression from scratch for each scenario."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'{7-14} title="The same query as the previous one, but written with Search Case"',"{7-14}":!0,title:'"The',same:!0,query:!0,as:!0,the:!0,previous:!0,"one,":!0,but:!0,written:!0,with:!0,Search:!0,'Case"':!0}),"SELECT\n    ContactKey,\n    EmailAddress,\n    [External Contact Id] AS ExternalContactId,\n    Gender__c AS Gender,\n    'Lead' AS RecordType,\n    GETUTCDATE() AS ImportDate,\n    CASE\n        WHEN MemberType__c = 1 THEN 'Bronze'\n        WHEN MemberType__c = 2 THEN 'Silver'\n        WHEN MemberType__c = 3 THEN 'Gold'\n        WHEN MemberType__c = 4 THEN 'Platinum'\n        ELSE 'Unregistered'\n    END AS MemberType\n")),Object(r.b)("p",null,"The example above doesn't show why it is worth to use the search ",Object(r.b)("inlineCode",{parentName:"p"},"CASE"),". It is a bit longer than the standard approach! But there is a reason to use this form of ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement that is visible once you want to create more elaborate conditions that are possible only with this version:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'{3-7} title="Let\'s calculate what channel we should use in our campaign for a given user"',"{3-7}":!0,title:"\"Let's",calculate:!0,what:!0,channel:!0,we:!0,should:!0,use:!0,in:!0,our:!0,campaign:!0,for:!0,a:!0,given:!0,'user"':!0}),"SELECT\n    ContactKey,\n    CASE\n        WHEN IsAppInstalled = 1 THEN 'Push'\n        WHEN EmailOptIn = 1 AND EmailAddress IS NOT NULL THEN 'Email'\n        WHEN PhoneOptIn = 1 AND Mobile IS NOT NULL THEN 'Phone'\n    END AS PreferredChannel\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"You Should Know")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement returns ",Object(r.b)("inlineCode",{parentName:"p"},"THEN")," value of the first condition that evaluated to ",Object(r.b)("inlineCode",{parentName:"p"},"TRUE"),". It means that in the above example if the ",Object(r.b)("inlineCode",{parentName:"p"},"IsAppInstalled = 1")," is true, other conditions are not considered. Even if for selected contact all of them will be true, it will still have the value ",Object(r.b)("inlineCode",{parentName:"p"},"Push")," in PreferredChannel. It is perfect, as it allows us to prioritize cheaper channels."),Object(r.b)("p",{parentName:"div"},"Always consider the order of the conditions in your ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement. It both might lead to errors if you don't expect behaviour mentioned above, as well as make your life much easier if you know it works that way."))),Object(r.b)("p",null,"As you can see, thanks to search ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement we were able to check conditions on multiple different columns and connect them with ",Object(r.b)("inlineCode",{parentName:"p"},"AND"),"/",Object(r.b)("inlineCode",{parentName:"p"},"OR")," statements for better control. You can use this version of the ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement for all your needs (even those covered by the basic one) to worry not about two ways of formatting."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"You Should Know")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"You can use ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statements inside a ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement to have an even more dynamic query."),Object(r.b)("pre",{parentName:"div"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'{3-16} title="Let\'s add another dimension of membership level to differentiate available channels"',"{3-16}":!0,title:"\"Let's",add:!0,another:!0,dimension:!0,of:!0,membership:!0,level:!0,to:!0,differentiate:!0,available:!0,'channels"':!0}),"SELECT\n    ContactKey,\n    CASE\n        WHEN MemberType = 'Platinum' THEN 'Key Account Manager'\n        WHEN MemberType = 'Gold' OR MemberType = 'Silver' THEN\n            CASE\n                WHEN IsAppInstalled = 1 THEN 'Push'\n                WHEN EmailOptIn = 1 AND EmailAddress IS NOT NULL THEN 'Email'\n                WHEN PhoneOptIn = 1 AND Mobile IS NOT NULL THEN 'Phone'\n            END\n        WHEN MemberType = 'Bronze' THEN\n            CASE\n                WHEN IsAppInstalled = 1 THEN 'Push'\n                WHEN EmailOptIn = 1 AND EmailAddress IS NOT NULL THEN 'Email'\n            END\n    END AS PreferredChannel\n")))),Object(r.b)("h3",{id:"like-in-case"},"LIKE in CASE"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"LIKE")," is not only useful in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sql/sfmc-sql-where#like-operator"}),Object(r.b)("inlineCode",{parentName:"a"},"WHERE")," Statement"),". It is also an awesome tool empowering ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," statement. It allows you to build flexible conditions on free text values:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:'{4} title="Great way to split your database between Internal and External users for different communication"',"{4}":!0,title:'"Great',way:!0,to:!0,split:!0,your:!0,database:!0,between:!0,Internal:!0,and:!0,External:!0,users:!0,for:!0,different:!0,'communication"':!0}),"SELECT\n    ContactKey,\n    CASE\n        WHEN EmailAddress LIKE '%@mateuszdabrowski.%' THEN 'Internal'\n        ELSE 'External'\n    END AS ContactType\n")),Object(r.b)("p",null,"In the ",Object(r.b)("inlineCode",{parentName:"p"},"SELECT")," statement, the ",Object(r.b)("inlineCode",{parentName:"p"},"LIKE")," operator is especially useful for fixing data coming from the free text fields. To learn more about the possibilities, check out the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sql/sfmc-sql-like"}),Object(r.b)("inlineCode",{parentName:"a"},"LIKE")," guide"),"."),Object(r.b)("h2",{id:"table-prefixes"},"Table Prefixes"),Object(r.b)("p",null,"Additional elements that you will be using in many of your queries are table prefixes for selecting columns from multiple joined Data Extensions."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql",metastring:"{2-3}","{2-3}":!0}),"SELECT\n    _Subscriber.SubscriberKey\n    _EnterpriseAttribute.LastName\n")),Object(r.b)("p",null,"I'm covering this topic in-depth in ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sql/sfmc-sql-join#table-name-prefix"}),Object(r.b)("inlineCode",{parentName:"a"},"JOIN")," statement documentation"),"."),Object(r.b)("h2",{id:"flow-control"},"Flow control"),Object(r.b)("p",null,"Despite official ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://help.salesforce.com/articleView?id=mc_as_sql_reference.htm&type=5"}),"SFMC SQL documentation")," states that it supports the ",Object(r.b)("inlineCode",{parentName:"p"},"IF")," constructs, I was not able to make it work."),Object(r.b)("h2",{id:"variables--functions"},"Variables & Functions"),Object(r.b)("p",null,"Unfortunately, SFMC SQL does not support variables."),Object(r.b)("p",null,"Fortunately, it does support (selected) functions. Learn more about them in SFMC SQL Functions documentation pages related to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sql/sfmc-sql-string-functions"}),"Strings"),", ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sql/sfmc-sql-date-functions"}),"Dates"),", ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sql/sfmc-sql-numeric-functions"}),"Numbers"),"."))}d.isMDXComponent=!0}}]);