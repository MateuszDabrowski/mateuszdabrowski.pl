"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[6306],{9929:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var s=r(4848),t=r(8453),i=r(6748);const o={id:"ssjs-script-template",title:"SSJS Script Template",sidebar_label:"SSJS Script Template",description:"Jumpstart your coding with best practice fueled SSJS Template.",image:"img/og/og-image-ssjs-script-template.png",tags:["Marketing Cloud","SSJS","Snippet"]},a=void 0,l={id:"ssjs/snippets/ssjs-script-template",title:"SSJS Script Template",description:"Jumpstart your coding with best practice fueled SSJS Template.",source:"@site/docs/ssjs/snippets/ssjs-script-template.mdx",sourceDirName:"ssjs/snippets",slug:"/ssjs/snippets/ssjs-script-template",permalink:"/docs/ssjs/snippets/ssjs-script-template",draft:!1,unlisted:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/ssjs/snippets/ssjs-script-template.mdx",tags:[{inline:!0,label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{inline:!0,label:"SSJS",permalink:"/docs/tags/ssjs"},{inline:!0,label:"Snippet",permalink:"/docs/tags/snippet"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1672049341e3,frontMatter:{id:"ssjs-script-template",title:"SSJS Script Template",sidebar_label:"SSJS Script Template",description:"Jumpstart your coding with best practice fueled SSJS Template.",image:"img/og/og-image-ssjs-script-template.png",tags:["Marketing Cloud","SSJS","Snippet"]},sidebar:"snippets",previous:{title:"SSJS Snippets",permalink:"/docs/category/ssjs-snippets"},next:{title:"Solve with Cloud Page Apps",permalink:"/docs/ssjs/snippets/sfmc-cloud-page-apps"}},c={},d=[{value:"SSJS Template Code",id:"ssjs-template-code",level:2},{value:"SSJS Template Description",id:"ssjs-template-description",level:2},{value:"Table of Contents",id:"table-of-contents",level:3},{value:"Global Variables",id:"global-variables",level:3},{value:"Multiuse empty variables",id:"multiuse-empty-variables",level:4},{value:"Customizable variables",id:"customizable-variables",level:4},{value:"Helper Functions",id:"helper-functions",level:3},{value:"Script Body",id:"script-body",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.U,{content:"Jumpstart your coding with best practice fueled SSJS Template."}),"\n",(0,s.jsx)(n.p,{children:"Some like to start with a blank slate. Some - from a well-crafted template. I'm in the #TeamTemplate, and here you can see my SSJS one. Check the bottom of this page for a walkthrough."}),"\n",(0,s.jsx)(n.h2,{id:"ssjs-template-code",children:"SSJS Template Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:"<script runat=\"server\">\n    /* -------------------------------------------------------------------------\n\n    Short description of the purpose of the script.\n\n    1. Global Variables\n    1.1. API Endpoint\n    1.2. Error Handling\n    2. Helper Functions\n    2.1. Debugging\n    2.2. Error handling\n    3. {{Section Name}}\n    ...\n\n    -------------------------------------------------------------------------- */\n\n    Platform.Load('core', '1');\n    // Uncomment below if you will be using SOAP API via WSProxy in the script\n    // var soap = new Script.Util.WSProxy();\n\n    /* ----------------------------------------------------------------------- */\n    /* ---------------------- 1. GLOBAL VARIABLES ---------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    var endpoint, headerNames, headerValues, payload, response, parsedResponse;\n    var debugging = false;\n\n    /* ---------------------- 1.1. API Endpoint------------------------------- */\n    var clientID = 'CLIENT_ID';\n    var clientSecret = 'CLIENT_SECRET';\n    var clientBase = 'API_BASE_URI';\n\n    /* -------------------- 1.2. Error Handling------------------------------- */\n    var scriptName = 'SCRIPT_NAME';\n    var errorDE = 'ERROR_DATA_EXTENSION';\n    var errorURL = 'ERROR_CLOUD_PAGE_URL';\n\n    /* ----------------------------------------------------------------------- */\n    /* ---------------------- 2. HELPER FUNCTIONS ---------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    /* ---------------------- 2.1. Debugging --------------------------------- */\n\n    /**\n    * @function debugValue\n    * @description Outputs provided description and SSJS value to front-end in a type-safe & consistent way\n    * @param {string} description - Describes meaning of the second parameter in the output\n    * @param {*} value - The value that needs to be debugged\n    */\n    function debugValue(description, value) {\n        Write(description + ': ' + (typeof value == 'object' ? Stringify(value) : value) + '<br><br>');\n    };\n\n    /* ---------------------- 2.2. Error handling ---------------------------- */\n\n    /**\n    * @function handleError\n    * @description Adds the error with context to error logging Data Extension and redirects to error page.\n    * @param {Object} error - The caught error object. Can come from the try/catch block or be manually created.\n    * @param {string} error.message - First error key stores short error message describing the issue.\n    * @param {string} error.description - Second error key stores detailed error path helping with root cause analysis\n    */\n    function handleError(error) {\n        if (debugging) {\n            debugValue('Found error', error);\n        } else {\n            // Remember that if your Logging Data Extension is in Shared Folder, you need to add the \"ENT.\" prefix to name\n            Platform.Function.InsertData(errorDE, ['id', 'scriptName', 'errorMessage', 'errorDescription'], [GUID(), scriptName, error.message, error.description]);\n            Platform.Response.Redirect(errorURL + '?error=' + error.message + '&error_description=' + error.description);\n        };\n    };\n\n    try {\n    /* ----------------------------------------------------------------------- */\n    /* ----------------------- 3. {{SECTION NAME}} --------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    /**\n    * There can be just one section for simpler scripts, or there can be multiple.\n    * As your code grow, split it into separate numbered sections for easier navigation.\n    * Always try to make each section coherent with code logic to make the split meaningful.\n    */\n\n    // if (debugging) debugValue('{{API Call Name}} Response', response);\n\n    } catch (error) {\n        handleError(error);\n    }\n\n<\/script>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ssjs-template-description",children:"SSJS Template Description"}),"\n",(0,s.jsx)(n.h3,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"    /* -------------------------------------------------------------------------\n\n    Short description of the purpose of the script.\n\n    1. Global Variables\n    1.1. API Endpoint\n    1.2. Error Handling\n    2. Helper Functions\n    2.1. Debugging\n    2.2. Error handling\n    3. {{Section Name}}\n    ...\n\n    -------------------------------------------------------------------------- */\n"})}),"\n",(0,s.jsx)(n.p,{children:"The opening section of the template does two things:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Briefly informs everyone what the purpose of this script is"}),"\n",(0,s.jsx)(n.li,{children:"Describes the high-level structure of the script to allow for quick navigation"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Read more on that approach in my ",(0,s.jsx)(n.a,{href:"/docs/ssjs/ssjs-style-guide#1-table-of-contents-comment",children:"SSJS Style Guide"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"global-variables",children:"Global Variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"    /* ----------------------------------------------------------------------- */\n    /* ---------------------- 1. GLOBAL VARIABLES ---------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    var endpoint, headerNames, headerValues, payload, response, parsedResponse;\n    var debugging = false;\n\n    /* ---------------------- 1.1. API Endpoint------------------------------- */\n    var clientID = 'CLIENT_ID';\n    var clientSecret = 'CLIENT_SECRET';\n    var clientBase = 'API_BASE_URI';\n\n    /* -------------------- 1.2. Error Handling------------------------------- */\n    var scriptName = 'SCRIPT_NAME';\n    var errorDE = 'ERROR_DATA_EXTENSION';\n    var errorURL = 'ERROR_CLOUD_PAGE_URL';\n"})}),"\n",(0,s.jsx)(n.p,{children:"This section is responsible for storing all key variables. There are two main types I like to keep here:"}),"\n",(0,s.jsx)(n.h4,{id:"multiuse-empty-variables",children:"Multiuse empty variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"var endpoint, headerNames, headerValues, payload, response, parsedResponse;\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this category, you will find variables used multiple times within various parts of the script, but their specific values have too short lifespan to warrant a separate variable."}),"\n",(0,s.jsxs)(n.p,{children:["By declaring them here, I don't have to use ",(0,s.jsx)(n.code,{children:"var"})," later in the script, and therefore I don't have to worry about the order of the code if I make some changes during the refactoring phase."]}),"\n",(0,s.jsxs)(n.p,{children:["There is also a second reason - defining them before the try/catch block, even without any value, will allow accessing its value after that block. Read more about that in ",(0,s.jsx)(n.a,{href:"/docs/ssjs/debugging-ssjs#try-to-catch-the-error",children:"Debugging & Error Handling"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"customizable-variables",children:"Customizable variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"    var debugging = false;\n\n    /* ---------------------- 1.1. API Endpoint------------------------------- */\n    var clientID = 'CLIENT_ID';\n    var clientSecret = 'CLIENT_SECRET';\n    var clientBase = 'API_BASE_URI';\n\n    /* -------------------- 1.2. Error Handling------------------------------- */\n    var scriptName = 'SCRIPT_NAME';\n    var errorDE = 'ERROR_DATA_EXTENSION';\n    var errorURL = 'ERROR_CLOUD_PAGE_URL';\n"})}),"\n",(0,s.jsx)(n.p,{children:"The second type I store here are customizable global variables:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"changing from script to script or"}),"\n",(0,s.jsxs)(n.li,{children:["controlling the script's behaviour (like configurational ones or the ",(0,s.jsx)(n.code,{children:"debugging"})," variable described in detail ",(0,s.jsx)(n.a,{href:"/docs/ssjs/debugging-ssjs#debugging-variable",children:"here"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The template contains the API Endpoint section that I frequently use, but if your script does not need it - delete it to optimize and simplify the code."}),"\n",(0,s.jsx)(n.h3,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"    /* ----------------------------------------------------------------------- */\n    /* ---------------------- 2. HELPER FUNCTIONS ---------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    /* ---------------------- 2.1. Debugging --------------------------------- */\n\n    /**\n    * @function debugValue\n    * @description Outputs provided description and SSJS value to front-end in a type-safe & consistent way\n    * @param {string} description - Describes meaning of the second parameter in the output\n    * @param {*} value - The value that needs to be debugged\n    */\n    function debugValue(description, value) {\n        Write(description + ': ' + (typeof value == 'object' ? Stringify(value) : value) + '<br><br>');\n    };\n\n    /* ---------------------- 2.2. Error handling ---------------------------- */\n\n    /**\n    * @function handleError\n    * @description Adds the error with context to error logging Data Extension and redirects to error page.\n    * @param {Object} error - The caught error object. Can come from the try/catch block or be manually created.\n    * @param {string} error.message - First error key stores short error message describing the issue.\n    * @param {string} error.description - Second error key stores detailed error path helping with root cause analysis\n    */\n    function handleError(error) {\n        if (debugging) {\n            debugValue('Found error', error);\n        } else {\n            // Remember that if your Logging Data Extension is in Shared Folder, you need to add the \"ENT.\" prefix to name\n            Platform.Function.InsertData(errorDE, ['id', 'scriptName', 'errorMessage', 'errorDescription'], [GUID(), scriptName, error.message, error.description]);\n            Platform.Response.Redirect(errorURL + '?error=' + error.message + '&error_description=' + error.description);\n        };\n    };\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this section, I keep all the helper functions used multiple times in the script or are battle-tested and shared across various scripts."}),"\n",(0,s.jsx)(n.p,{children:"In the template, you can find my two favourite ones that I use in every single script."}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about them, check out detailed descriptions of ",(0,s.jsx)(n.a,{href:"/docs/ssjs/debugging-ssjs#debugging-variable",children:(0,s.jsx)(n.code,{children:"debugValue"})})," and ",(0,s.jsx)(n.a,{href:"/docs/ssjs/debugging-ssjs#error-handler-function",children:(0,s.jsx)(n.code,{children:"handleError"})})," functions."]}),"\n",(0,s.jsxs)(n.admonition,{title:"You Should Know",type:"note",children:[(0,s.jsxs)(n.p,{children:["If the script will be used in ",(0,s.jsx)(n.a,{href:"/docs/config/sfmc-code-resource",children:"JSON Code Resource backend"})," I modify those two functions a bit by:"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Changing the ",(0,s.jsx)(n.code,{children:"debugValue"})," Write to: ",(0,s.jsx)(n.code,{children:"Write(' --- ' + description + ': ' + (typeof value == 'object' ? Stringify(value) : value) + ' --- ');"})," as break line tag will not work."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Removing the ",(0,s.jsx)(n.code,{children:"Platform.Response.Redirect"})," from ",(0,s.jsx)(n.code,{children:"handleError"})," as we don't want backend redirects. The ",(0,s.jsx)(n.code,{children:"errorURL"})," variable follows suit."]}),"\n"]}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["In many cross-cloud scenarios I also use ",(0,s.jsx)(n.a,{href:"/docs/ssjs/snippets/ampscript-in-ssjs",children:"AMPScript runner"}),", but as it is more use case specific solution, I don't keep it in base template."]}),"\n",(0,s.jsxs)(n.p,{children:["I prefix all functions with ",(0,s.jsx)(n.a,{href:"/docs/ssjs/ssjs-style-guide#3-documentation-comments",children:"documentation comments"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"script-body",children:"Script Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"    try {\n    /* ----------------------------------------------------------------------- */\n    /* ----------------------- 3. {{SECTION NAME}} --------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    /**\n    * There can be just one section for simpler scripts, or there can be multiple.\n    * As your code grow, split it into separate numbered sections for easier navigation.\n    * Always try to make each section coherent with code logic to make the split meaningful.\n    */\n\n    } catch (error) {\n        handleError(error);\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The final part of the template is where I'm adding the main part of the script. It's wrapped in try/catch (more on that ",(0,s.jsx)(n.a,{href:"/docs/ssjs/debugging-ssjs#try-to-catch-the-error",children:"here"}),") and - if the script is long - split into ",(0,s.jsx)(n.a,{href:"/docs/ssjs/ssjs-style-guide#2-section-comments",children:"sections"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},6748:(e,n,r)=>{r.d(n,{U:()=>i});r(6540);const s="leadText_qzwo";var t=r(4848);const i=e=>{let{content:n}=e;return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("p",{id:s,children:n})})}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);