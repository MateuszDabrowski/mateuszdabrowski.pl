"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8705],{7299:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=t(4848),r=t(8453),i=t(6748);const o={id:"sfmc-sql-where",title:"SFMC SQL Where",sidebar_label:"Where",description:"Use WHERE to make your query lean and to the point. Less is more.",image:"img/og/og-image-sql-where.png",tags:["Marketing Cloud","SQL"]},a=void 0,l={id:"sql/sfmc-sql-where",title:"SFMC SQL Where",description:"Use WHERE to make your query lean and to the point. Less is more.",source:"@site/docs/sql/sfmc-sql-where.mdx",sourceDirName:"sql",slug:"/sql/sfmc-sql-where",permalink:"/docs/sql/sfmc-sql-where",draft:!1,unlisted:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/sql/sfmc-sql-where.mdx",tags:[{inline:!0,label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{inline:!0,label:"SQL",permalink:"/docs/tags/sql"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1708642896e3,frontMatter:{id:"sfmc-sql-where",title:"SFMC SQL Where",sidebar_label:"Where",description:"Use WHERE to make your query lean and to the point. Less is more.",image:"img/og/og-image-sql-where.png",tags:["Marketing Cloud","SQL"]},sidebar:"docs",previous:{title:"Join",permalink:"/docs/sql/sfmc-sql-join"},next:{title:"Case",permalink:"/docs/sql/sfmc-sql-case"}},c={},d=[{value:"Basic operators",id:"basic-operators",level:2},{value:"Equality operators",id:"equality-operators",level:3},{value:"Comparison operators",id:"comparison-operators",level:3},{value:"LIKE operator",id:"like-operator",level:2},{value:"Logical operators",id:"logical-operators",level:2},{value:"BETWEEN shorthand",id:"between-shorthand",level:3},{value:"IN shorthand",id:"in-shorthand",level:3},{value:"NOT operator",id:"not-operator",level:2},{value:"CASE operator",id:"case-operator",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.U,{content:"Use WHERE to make your query lean and to the point. Less is more."}),"\n",(0,n.jsxs)(s.p,{children:["With just ",(0,n.jsx)(s.a,{href:"/docs/sql/sfmc-sql-select",children:(0,n.jsx)(s.code,{children:"SELECT"})})," and ",(0,n.jsx)(s.a,{href:"/docs/sql/sfmc-sql-from",children:(0,n.jsx)(s.code,{children:"FROM"})})," statements, you can already start building your queries. With the addition of ",(0,n.jsx)(s.a,{href:"/docs/sql/sfmc-sql-join",children:(0,n.jsx)(s.code,{children:"JOIN"})}),", you can do much more than in the Salesforce Marketing Cloud UI. ",(0,n.jsx)(s.code,{children:"WHERE"})," grants you even more power by allowing you to filter your queries' outcomes."]}),"\n",(0,n.jsxs)(s.p,{children:["The concept behind it is straightforward. It takes all the results you obtained with the query above the ",(0,n.jsx)(s.code,{children:"WHERE"}),", and for each, it applies one or more conditions. If they evaluate to ",(0,n.jsx)(s.code,{children:"TRUE"})," - this particular result will be available in the output Data Extension. If evaluation ends with ",(0,n.jsx)(s.code,{children:"FALSE"}),", ",(0,n.jsx)(s.code,{children:"WHERE"})," will filter it out."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:"{5} title=\"All subscribers with domain equal to 'mateuszdabrowski.pl'\"",children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM _Subscribers\nWHERE Domain = 'mateuszdabrowski.pl'\n"})}),"\n",(0,n.jsx)(s.admonition,{title:"You Should Know",type:"note",children:(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"WHERE"})," statement is heavily impacted by ",(0,n.jsx)(s.a,{href:"/docs/sql/sfmc-sql-null-functions",children:(0,n.jsx)(s.code,{children:"NULL"})})," values - be sure to check ",(0,n.jsx)(s.a,{href:"/docs/sql/sfmc-sql-null-functions",children:"dedicated guide"})," on how to solve those issues."]})}),"\n",(0,n.jsx)(s.h2,{id:"basic-operators",children:"Basic operators"}),"\n",(0,n.jsxs)(s.p,{children:["In many scenarios, you will be using the basic operators in your ",(0,n.jsx)(s.code,{children:"WHERE"})," clauses. In the example above, you already saw the equality operator (",(0,n.jsx)(s.code,{children:"="}),"). There are a few more available."]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Operator"}),(0,n.jsx)(s.th,{children:"Description"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"="})}),(0,n.jsx)(s.td,{children:"Equal to"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsxs)(s.td,{children:[(0,n.jsx)(s.code,{children:"!="})," or ",(0,n.jsx)(s.code,{children:"<>"})]}),(0,n.jsx)(s.td,{children:"Not equal to"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:">"})}),(0,n.jsx)(s.td,{children:"Greater than"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"<"})}),(0,n.jsx)(s.td,{children:"Less than"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:">="})}),(0,n.jsx)(s.td,{children:"Greater or equal to"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"<="})}),(0,n.jsx)(s.td,{children:"Less or equal to"})]})]})]}),"\n",(0,n.jsx)(s.h3,{id:"equality-operators",children:"Equality operators"}),"\n",(0,n.jsxs)(s.p,{children:["Equality operators (",(0,n.jsx)(s.code,{children:"="}),", ",(0,n.jsx)(s.code,{children:"!="}),") are great when you have a controlled value. Think booleans (for example Opt-in information) and picklists (for example Status field on ",(0,n.jsx)(s.code,{children:"_Subscribers"})," System Data View that is limited to four values)."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{5} title="All subscribers that do not have the unsubscribed status"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM _Subscribers\nWHERE Status != 'unsubscribed'\n"})}),"\n",(0,n.jsx)(s.h3,{id:"comparison-operators",children:"Comparison operators"}),"\n",(0,n.jsxs)(s.p,{children:["Comparison operators (",(0,n.jsx)(s.code,{children:"<"}),", ",(0,n.jsx)(s.code,{children:">"}),", ",(0,n.jsx)(s.code,{children:">="}),", ",(0,n.jsx)(s.code,{children:"<="}),") are perfect when you are operating on numbers (for example selecting contacts with low Customer Lifetime Value) or dates."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{5} title="All subscribers that joined within the last month"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM _Subscribers\nWHERE CONVERT(DATE, DateJoined) >= DATEADD(MONTH, -1, CONVERT(DATE, GETUTCDATE()))\n"})}),"\n",(0,n.jsxs)(s.p,{children:["With dates, you will frequently want to use a bit more complex structure for the comparison to work correctly. In this case, we are converting the ",(0,n.jsx)(s.code,{children:"DateJoined"})," value to a simple date (day, month, year without the time). We are also getting a current date in UTC format and converting it to a simple date. Next, we subtract one month and compare it to the ",(0,n.jsx)(s.code,{children:"DateJoined"})," transformed value. I cover more such examples in the ",(0,n.jsx)(s.a,{href:"/docs/sql/sfmc-sql-date-functions",children:"SFMC SQL Date Functions"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"like-operator",children:"LIKE operator"}),"\n",(0,n.jsxs)(s.p,{children:["Another handy operator is ",(0,n.jsx)(s.code,{children:"LIKE"}),". It allows you to leverage wildcards to search for matching records based on value fragment. You may know it from the ",(0,n.jsxs)(s.a,{href:"/docs/sql/sfmc-sql-case#like-in-case",children:[(0,n.jsx)(s.code,{children:"SELECT"})," ",(0,n.jsx)(s.code,{children:"CASE"})," statement"]}),", but it is much more useful with ",(0,n.jsx)(s.code,{children:"WHERE"}),". Think about filtering with just a part of the value (for example email domain in ",(0,n.jsx)(s.code,{children:"EmailAddress"})," field) or with a single element within multi picklist (for instance finding one value within the comma-separated list of all purchased products)."]}),"\n",(0,n.jsxs)(s.p,{children:["However, in the marketing automation world, the ",(0,n.jsx)(s.code,{children:"LIKE"})," operator is handy for selecting contacts based on the multi-picklist columns. Consider ",(0,n.jsx)(s.code,{children:"ActiveSubscriptions"})," field with any combination of values ",(0,n.jsx)(s.code,{children:"Phone"}),", ",(0,n.jsx)(s.code,{children:"TV"}),", or ",(0,n.jsx)(s.code,{children:"Internet"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["Suppose you would like to select all contacts with active phone subscription. In that case, you shouldn't use ",(0,n.jsx)(s.a,{href:"#equality-operators",children:"equality operator"})," (",(0,n.jsx)(s.code,{children:"WHERE ActiveSubscription = 'Phone'"}),"), as it would return only contacts that have just this one subscription. However, some of your customers might have multiple (phone and tv or phone and internet plans). For SQL, a field containing ",(0,n.jsx)(s.code,{children:"'Phone'"})," is not equal to having a value of ",(0,n.jsx)(s.code,{children:"'Phone', Internet'"}),". ",(0,n.jsx)(s.code,{children:"LIKE"})," operator is here to save the day."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{5} title="All subscribers that have at least Phone subscription"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM MasterSubscriberDE\nWHERE ActiveSubscription LIKE '%Phone%'\n"})}),"\n",(0,n.jsxs)(s.p,{children:["It is also an excellent tool for database cleaning by finding incorrect values within automation. To learn more about the possibilities, check out the ",(0,n.jsxs)(s.a,{href:"/docs/sql/sfmc-sql-like",children:[(0,n.jsx)(s.code,{children:"LIKE"})," guide"]}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"logical-operators",children:"Logical operators"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"WHERE"})," statement supports standard logical operators - ",(0,n.jsx)(s.code,{children:"AND"})," & ",(0,n.jsx)(s.code,{children:"OR"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["They allow you to create more fine-tuned filters evaluating either multiple values or a single value from various points of view. You can use as many ",(0,n.jsx)(s.code,{children:"AND"}),"s and ",(0,n.jsx)(s.code,{children:"OR"}),"s as you want, but keep in mind the AutoKill 30 minute limit for query execution."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{5-8} title="All subscribers that have at least Phone subscription AND are in its twelfth month"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM MasterSubscriberDE\nWHERE\n    ActiveSubscription LIKE '%Phone%'\n    AND CONVERT(DATE, SubscriptionStart) >= DATEADD(MONTH, -12, CONVERT(DATE, GETUTCDATE()))\n    AND CONVERT(DATE, SubscriptionStart) < DATEADD(MONTH, -11, CONVERT(DATE, GETUTCDATE()))\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The standard order of execution evaluates the pairs joined by ",(0,n.jsx)(s.code,{children:"AND"})," first and then considers the ones with ",(0,n.jsx)(s.code,{children:"OR"}),". But you can use parentheses ",(0,n.jsx)(s.code,{children:"()"})," to enforce your order:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{6} title="All subscribers that have at least either Phone OR Internet subscription AND are in its twelfth month"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM MasterSubscriberDE\nWHERE\n    (ActiveSubscription LIKE '%Phone%' OR ActiveSubscription LIKE '%Internet%')\n    AND CONVERT(DATE, SubscriptionStart) >= DATEADD(MONTH, -12, CONVERT(DATE, GETUTCDATE()))\n    AND CONVERT(DATE, SubscriptionStart) < DATEADD(MONTH, -11, CONVERT(DATE, GETUTCDATE()))\n"})}),"\n",(0,n.jsxs)(s.p,{children:["There are many use cases for using ",(0,n.jsx)(s.code,{children:"AND"})," or ",(0,n.jsx)(s.code,{children:"OR"}),". The most popular ones are filtering by range (numerical or date-based) and capturing records fulfilling at least one of multiple criteria. For both, there is an optional shorthand."]}),"\n",(0,n.jsx)(s.h3,{id:"between-shorthand",children:"BETWEEN shorthand"}),"\n",(0,n.jsxs)(s.p,{children:["Whenever you want to work on ranges, instead of binding ",(0,n.jsx)(s.code,{children:">="})," & ",(0,n.jsx)(s.code,{children:"<="})," scopes (closed range) with ",(0,n.jsx)(s.code,{children:"AND"}),", you can leverage ",(0,n.jsx)(s.code,{children:"BETWEEN"})," statement."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:"{8}",children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM MasterSubscriberDE\nWHERE\n    (ActiveSubscription LIKE '%Phone%' OR ActiveSubscription LIKE '%Internet%')\n    AND CONVERT(DATE, SubscriptionStart)\n       BETWEEN DATEADD(MONTH, -12, CONVERT(DATE, GETUTCDATE()))\n       AND DATEADD(MONTH, -11, CONVERT(DATE, GETUTCDATE()))\n"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"BETWEEN"})," is replacing only a range greater or equal to the first value and smaller or equal to the second value. Additionally, it behaves weird when working with dates or datetime values."]}),"\n",(0,n.jsxs)(s.p,{children:["For example: ",(0,n.jsx)(s.code,{children:'WHERE Date BETWEEN "01/01/2020" AND "31/01/2020"'})," will work as if you wrote ",(0,n.jsx)(s.code,{children:'WHERE Date >= "01/01/2020 00:00:00" AND Date <= "31/01/2020 00:00:00"'}),". It would result in a lack of data for the last day of the range. In most cases you would rather want ",(0,n.jsx)(s.code,{children:'WHERE Date >= "01/01/2020 00:00:00" AND Date <= "31/01/2020 23:59:59"'}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["Due to the above, I recommended not use ",(0,n.jsx)(s.code,{children:"BETWEEN"})," statement, unless you are sure the range is correct."]}),"\n",(0,n.jsx)(s.h3,{id:"in-shorthand",children:"IN shorthand"}),"\n",(0,n.jsxs)(s.p,{children:["There is another shorthand available - the ",(0,n.jsx)(s.code,{children:"IN"})," statement. And it is much more interesting than the ",(0,n.jsx)(s.code,{children:"BETWEEN"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["It allows you to simplify ",(0,n.jsx)(s.code,{children:"WHERE"})," statement with multiple ",(0,n.jsx)(s.code,{children:"OR"})," operators (like ",(0,n.jsx)(s.code,{children:"WHERE Status = 'held' OR Status = 'unsubscribed' OR Status = 'bounced'"}),") by using a list of searched values:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{5} title="All subscribers with the unsubscribed, bounced or temporarily held status"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM _Subscribers\nWHERE Status IN ('held', 'unsubscribed', 'bounced')\n"})}),"\n",(0,n.jsx)(s.p,{children:"As you can see above, the syntax is much shorter and more readable."}),"\n",(0,n.jsxs)(s.p,{children:["But the beauty of ",(0,n.jsx)(s.code,{children:"IN"})," statement doesn't end there. It additionally optimizes the search speed by sorting the data and performing the binary search. Thanks to it, using ",(0,n.jsx)(s.code,{children:"IN"})," instead of multiple ",(0,n.jsx)(s.code,{children:"OR"}),"s can lead to significant performance improvements."]}),"\n",(0,n.jsx)(s.admonition,{title:"You Should Know",type:"note",children:(0,n.jsxs)(s.p,{children:["Unfortunately, you cannot use ",(0,n.jsx)(s.code,{children:"IN"})," statement together with ",(0,n.jsx)(s.code,{children:"LIKE"})," statement. You need to use one or more ",(0,n.jsx)(s.code,{children:"OR"})," operators for such use case."]})}),"\n",(0,n.jsx)(s.h2,{id:"not-operator",children:"NOT operator"}),"\n",(0,n.jsxs)(s.p,{children:["Sometimes you want to rather exclude some records instead of searching for them. In many cases, you can do it by just adjusting the operators (for example ",(0,n.jsx)(s.code,{children:"!="})," instead of ",(0,n.jsx)(s.code,{children:"="}),"). There are, however, some situations where the ",(0,n.jsx)(s.code,{children:"NOT"})," operator is the best tool for the job."]}),"\n",(0,n.jsxs)(s.p,{children:["It is especially apparent when working with ",(0,n.jsx)(s.code,{children:"LIKE"}),", ",(0,n.jsx)(s.code,{children:"BETWEEN"}),", ",(0,n.jsx)(s.code,{children:"IN"})," and ",(0,n.jsx)(s.code,{children:"EXISTS"})," operators."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{5} title="All subscribers NOT with unsubscribed, bounced or temporarily held status"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM _Subscribers\nWHERE Status NOT IN ('held', 'unsubscribed', 'bounced')\n"})}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{5} title="All subscribers that have email address NOT ending with @mateuszdabrowski.pl"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM _Subscribers\nWHERE EmailAddress NOT LIKE '%@mateuszdabrowski.pl'\n"})}),"\n",(0,n.jsx)(s.h2,{id:"case-operator",children:"CASE operator"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"CASE"})," statement is not only useful in a ",(0,n.jsx)(s.a,{href:"/docs/sql/sfmc-sql-select",children:(0,n.jsx)(s.code,{children:"SELECT"})})," part of the query. You can use it also within the ",(0,n.jsx)(s.code,{children:"WHERE"}),". There are two approaches to do this."]}),"\n",(0,n.jsxs)(s.p,{children:["The first compare ",(0,n.jsx)(s.code,{children:"1"})," to the outcome of the ",(0,n.jsx)(s.code,{children:"CASE"})," statement that evaluates each of its conditions to either ",(0,n.jsx)(s.code,{children:"1"})," or ",(0,n.jsx)(s.code,{children:"0"}),". If the comparison evaluates to ",(0,n.jsx)(s.code,{children:"WHERE 1 = 1"})," it will resolve to ",(0,n.jsx)(s.code,{children:"TRUE"})," and return the result."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{6-11} title="All subscribers NOT with unsubscribed, bounced or temporarily held status"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM _Subscribers\nWHERE\n    1 = CASE Status\n        WHEN 'active'       THEN 1\n        WHEN 'held'         THEN 0\n        WHEN 'unsubscribed' THEN 0\n        WHEN 'bounced'      THEN 0\n    END\n"})}),"\n",(0,n.jsxs)(s.p,{children:["It works, but you can write it better with other means mentioned above in most cases. This query was previously coded with single-line ",(0,n.jsx)(s.code,{children:"WHERE"})," utilizing ",(0,n.jsx)(s.code,{children:"NOT IN"})," statement."]}),"\n",(0,n.jsxs)(s.admonition,{title:"You Should Know",type:"note",children:[(0,n.jsxs)(s.p,{children:["You can do better even with the ",(0,n.jsxs)(s.a,{href:"/docs/sql/sfmc-sql-case#search-version-of-case",children:["search version of ",(0,n.jsx)(s.code,{children:"CASE"})]}),", as it allows you to use ",(0,n.jsx)(s.code,{children:"AND"}),"/",(0,n.jsx)(s.code,{children:"OR"}),"/",(0,n.jsx)(s.code,{children:"IN"})," within the ",(0,n.jsx)(s.code,{children:"CASE"}),":"]}),(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{6-9} title="All subscribers NOT with unsubscribed, bounced or temporarily held status"',children:"SELECT\n     SubscriberKey\n   , EmailAddress\nFROM _Subscribers\nWHERE\n   1 = CASE\n       WHEN Status = 'active'                              THEN 1\n       WHEN Status IN ('held', 'unsubscribed', 'bounced')  THEN 0\n   END\n"})}),(0,n.jsxs)(s.p,{children:["Notice the lack of ",(0,n.jsx)(s.code,{children:"Status"})," column name right after ",(0,n.jsx)(s.code,{children:"CASE"})," keyword and its addition in each ",(0,n.jsx)(s.code,{children:"WHEN"}),"."]})]}),"\n",(0,n.jsxs)(s.p,{children:["The second approach compares a field to the ",(0,n.jsx)(s.code,{children:"CASE"})," statement evaluation and is much more useful:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sql",metastring:'{6-9} title="All subscribers that have EmailAddress different from the Preferred Email"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM MasterSubscriberDE\nWHERE\n    EmailAddress != CASE\n        WHEN PreferredEmail = 'Personal Email'  THEN PersonalEmail\n        WHEN PreferredEmail = 'Work Email'      THEN WorkEmail\n    END\n"})}),"\n",(0,n.jsxs)(s.p,{children:["It can still be written using multiple ",(0,n.jsx)(s.code,{children:"AND"})," & ",(0,n.jsx)(s.code,{children:"OR"})," statements, but it is shorter and more readable thanks to the ",(0,n.jsx)(s.code,{children:"CASE"})," statement."]}),"\n",(0,n.jsxs)(s.admonition,{title:"You Should Know",type:"note",children:[(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"CASE"})," statement returns ",(0,n.jsx)(s.code,{children:"THEN"})," value of the first condition that evaluated to ",(0,n.jsx)(s.code,{children:"TRUE"}),". It means that if in your query first condition is true, the rest will be ignored. Even if for the selected contact, all of them would be true."]}),(0,n.jsxs)(s.p,{children:["Always consider the order of the conditions in your ",(0,n.jsx)(s.code,{children:"CASE"})," statement. It might lead to errors if you don't expect behaviour mentioned above, and make your life much easier if you know it works that way."]})]}),"\n",(0,n.jsxs)(s.p,{children:["To learn more about the possibilities and ",(0,n.jsx)(s.a,{href:"/docs/sql/sfmc-sql-case#iif-shorthand",children:"shorthands"}),", check out the ",(0,n.jsxs)(s.a,{href:"/docs/sql/sfmc-sql-case",children:[(0,n.jsx)(s.code,{children:"CASE"})," guide"]}),"."]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},6748:(e,s,t)=>{t.d(s,{U:()=>i});const n="leadText_qzwo";var r=t(4848);const i=e=>{let{content:s}=e;return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("p",{id:n,children:s})})}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>a});var n=t(6540);const r={},i=n.createContext(r);function o(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);