"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[7120],{4137:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>u});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function r(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=t.createContext({}),m=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=m(e.components);return t.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=m(a),u=i,N=c["".concat(o,".").concat(u)]||c[u]||p[u]||s;return a?t.createElement(N,l(l({ref:n},d),{},{components:a})):t.createElement(N,l({ref:n},d))}));function u(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=a.length,l=new Array(s);l[0]=c;var r={};for(var o in n)hasOwnProperty.call(n,o)&&(r[o]=n[o]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var m=2;m<s;m++)l[m]=a[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1872:(e,n,a)=>{a.d(n,{m:()=>s});var t=a(7294);const i="leadText_qzwo",s=e=>{let{content:n}=e;return t.createElement(t.Fragment,null,t.createElement("p",{id:i},n))}},6944:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var t=a(7462),i=(a(7294),a(4137)),s=a(1872);const l={id:"sfmc-sql-style-guide",title:"SFMC SQL Style Guide",sidebar_label:"Style Guide",description:"Query with style. Readable, bug-free code is a few shifts & spaces away.",image:"img/og/og-image-sql-style-guide.png",tags:["Marketing Cloud","SQL","Style Guide","Best Practice"]},r=void 0,o={unversionedId:"sql/sfmc-sql-style-guide",id:"sql/sfmc-sql-style-guide",title:"SFMC SQL Style Guide",description:"Query with style. Readable, bug-free code is a few shifts & spaces away.",source:"@site/docs/sql/sfmc-sql-style-guide.mdx",sourceDirName:"sql",slug:"/sql/sfmc-sql-style-guide",permalink:"/docs/sql/sfmc-sql-style-guide",draft:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/sql/sfmc-sql-style-guide.mdx",tags:[{label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{label:"SQL",permalink:"/docs/tags/sql"},{label:"Style Guide",permalink:"/docs/tags/style-guide"},{label:"Best Practice",permalink:"/docs/tags/best-practice"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1641649742,formattedLastUpdatedAt:"Jan 8, 2022",frontMatter:{id:"sfmc-sql-style-guide",title:"SFMC SQL Style Guide",sidebar_label:"Style Guide",description:"Query with style. Readable, bug-free code is a few shifts & spaces away.",image:"img/og/og-image-sql-style-guide.png",tags:["Marketing Cloud","SQL","Style Guide","Best Practice"]},sidebar:"snippets",previous:{title:"Null Functions",permalink:"/docs/sql/sfmc-sql-null-functions"},next:{title:"\xbb SQL Snippets",permalink:"/docs/category/-sql-snippets"}},m={},d=[{value:"Letter Case",id:"letter-case",level:2},{value:"SQL Syntax Case",id:"sql-syntax-case",level:3},{value:"Column &amp; Table Names Case",id:"column--table-names-case",level:3},{value:"Alignment and Indentation",id:"alignment-and-indentation",level:2},{value:"Single Information per Line",id:"single-information-per-line",level:3},{value:"Left Aligned Keywords",id:"left-aligned-keywords",level:3},{value:"Consistent Indentation",id:"consistent-indentation",level:3},{value:"Intentional Spacing",id:"intentional-spacing",level:3},{value:"Commas Placement",id:"commas-placement",level:3},{value:"Explicit vs Implicit",id:"explicit-vs-implicit",level:2},{value:"Date Parts",id:"date-parts",level:3},{value:"JOIN and ON",id:"join-and-on",level:3},{value:"Table Aliases",id:"table-aliases",level:3},{value:"Not Equal To Symbol",id:"not-equal-to-symbol",level:3},{value:"Meaningful Column Names",id:"meaningful-column-names",level:3},{value:"Sum Up",id:"sum-up",level:2}],p={toc:d};function c(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(s.m,{content:"Query with style. Readable, bug-free code is a few shifts & spaces away.",mdxType:"LeadText"}),(0,i.kt)("p",null,"First things first: this Salesforce Marketing Cloud SQL style guide is highly subjective. You may use it as it is, implement only some parts of it, or ignore it altogether. There are only two rules that I believe are a must-have:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Be consistent across your codebase."),(0,i.kt)("li",{parentName:"ol"},"Strive for good readability.")),(0,i.kt)("p",null,"Everything else is preference. And you are just about to learn about mine."),(0,i.kt)("h2",{id:"letter-case"},"Letter Case"),(0,i.kt)("p",null,"SQL gives you much freedom regarding the type of letter case you will be using for parts of your query. Let's use this freedom to create queries that are readable and aligned in convention to other Marketing Cloud programmatic languages operating on the same data."),(0,i.kt)("h3",{id:"sql-syntax-case"},"SQL Syntax Case"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use ",(0,i.kt)("inlineCode",{parentName:"strong"},"UPPERCASE")," for all elements of SQL syntax.")),(0,i.kt)("p",null,"This approach helps visually differentiate query language from Tables (data extensions, data views) and Columns (fields) to improve readability."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 Upper Case for SQL Syntax */\nSELECT\n      SubscriberKey\n    , EmailAddress\nFROM Ent._Subscribers\nWHERE DateJoined >= DATEADD(MONTH, -1, GETDATE())\n\n/* \u274c Pascal Case for SQL Syntax */\nSelect\n      SubscriberKey\n    , EmailAddress\nFrom Ent._Subscribers\nWhere DateJoined >= DateAdd(Month, -1, GetDate())\n\n/* \u274c Lower Case for SQL Syntax */\nselect\n      SubscriberKey\n    , EmailAddress\nfrom Ent._Subscribers\nwhere DateJoined >= dateadd(month, -1, getdate())\n")),(0,i.kt)("h3",{id:"column--table-names-case"},"Column & Table Names Case"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use ",(0,i.kt)("inlineCode",{parentName:"strong"},"PascalCase")," for all Table and Column names.")),(0,i.kt)("p",null,"Treat it as a soft recommendation, as it is highly connected to your organisation's conventions. If other connected systems are using a different style, it might be best to follow it in Marketing Cloud."),(0,i.kt)("p",null,"It is especially true for Tables, as you might be using mixed convention leveraging lowercase, uppercase and underscores for Data Extension names. However, try not to use hyphens, as those will require you to use square brackets around the name and might interfere in query syntax highlighting, leading to worse readability."),(0,i.kt)("p",null,"The most popular SQL convention for Table and Column names is ",(0,i.kt)("inlineCode",{parentName:"p"},"snake_case"),". However, in Marketing Cloud, the Table and Column names will share the case between your queries and the User Interface. It is essential to make them as readable and human friendly as possible. Additionally, in many cases, you will also leverage those names in AMPScript and SSJS."),(0,i.kt)("p",null,"Due to the above, I believe ",(0,i.kt)("inlineCode",{parentName:"p"},"PascalCase")," - especially for Column names - is the best choice for Marketing Cloud SQL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 Pascal Case for Table and Column names */\nSELECT\n      wel.SubscriberKey\n    , wel.EmailAddress\n    , o.EventDate AS OpenDate\nFROM WelcomeCampaignSegment AS wel\n    INNER JOIN _Open AS o\n        ON o.SubscriberKey = wel.SubscriberKey\n\n/* \u2705 Pascal Case for Column names and custom consistent covention for Table names */\nSELECT\n      wel.SubscriberKey\n    , wel.EmailAddress\n    , o.EventDate AS OpenDate\nFROM WEL_WelcomeCampaignSegment_20201011_OTH AS wel\n    INNER JOIN _Open AS o\n        ON o.SubscriberKey = wel.SubscriberKey\n\n/* \u274c Lower Case for Table and Column names */\nSELECT\n      wel.subscriberkey\n    , wel.emailaddress\n    , o.eventdate AS opendate\nFROM welcomecampaignsegment AS wel\n    INNER JOIN _open AS o\n        ON o.subscriberkey = wel.subscriberkey\n\n/* \u274c Upper Case for Table and Column names */\nSELECT\n      WEL.SUBSCRIBERKEY\n    , WEL.EMAILADDRESS\n    , O.EVENTDATE AS OPENDATE\nFROM WELCOMECAMPAIGNSEGMENT AS WEL\n    INNER JOIN _OPEN AS O\n        ON O.SUBSCRIBERKEY = WEL.SUBSCRIBERKEY\n")),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If you want to make your Style Guide even safer, you can decide on writing all Columns and Table names in square brackets. As Marketing Cloud is not checking whether you use SQL's reserved keywords, this approach will protect you from potential silent issue. The cost, however, is much more characters and less readable queries."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="You need to decide how hard you want to leverage the square brackets"',title:'"You',need:!0,to:!0,decide:!0,how:!0,hard:!0,you:!0,want:!0,leverage:!0,the:!0,square:!0,'brackets"':!0},"SELECT\n      [wel].[SubscriberKey]\n    , [wel].[EmailAddress]\n    , [o].[EventDate] AS [OpenDate]\nFROM [WelcomeCampaignSegment] AS [wel]\n    INNER JOIN [_Open] AS [o]\n        ON [o].[SubscriberKey] = [wel].[SubscriberKey]\n"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"alignment-and-indentation"},"Alignment and Indentation"),(0,i.kt)("p",null,"SQL is very flexible when it comes to alignment and indentation of the query. Writing everything in one line creates a valid code that will run. But just because it is correct, it doesn't mean it is good. Generous use of new lines and indents has close to no impact on performance but a massive impact on readability. Enter and Space keys are your friends."),(0,i.kt)("p",null,"There are many styles out there, and I decided to follow those that merge good writing speed with excellent readability."),(0,i.kt)("h3",{id:"single-information-per-line"},"Single Information per Line"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Limit information per line to one.")),(0,i.kt)("p",null,"I recommend keeping one information per line, as it allows for much easier scanning. The four most important examples of this approach are:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Each ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-select"},(0,i.kt)("inlineCode",{parentName:"a"},"SELECT"))," Column in a separate line"),(0,i.kt)("li",{parentName:"ol"},"Each ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-where"},(0,i.kt)("inlineCode",{parentName:"a"},"WHERE"))," condition in a separate line"),(0,i.kt)("li",{parentName:"ol"},"Each ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-case"},(0,i.kt)("inlineCode",{parentName:"a"},"CASE"))," condition in a separate line"),(0,i.kt)("li",{parentName:"ol"},"Each ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"))," and ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join#joining-on"},(0,i.kt)("inlineCode",{parentName:"a"},"ON"))," relationship in a separate line")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 Single information per line  */\nSELECT\n      s.SubscriberKey AS SubscriberKey\n    , j.EmailName     AS EmailName\n    , s.EventDate     AS SentDate\n    , j.DeliveredTime AS DeliveryDate\n    , o.EventDate     AS OpenDate\nFROM _Sent AS s\n    LEFT JOIN _Job AS j\n        ON j.JobID = s.JobID\n    LEFT JOIN _Open AS o\n        ON o.JobID = s.JobID\n        AND o.ListID = s.ListID\n        AND o.BatchID = s.BatchID\n        AND o.SubscriberID = s.SubscriberID\n        AND o.IsUnique = 1\nWHERE\n    1 = CASE\n        WHEN j.EmailName LIKE 'UPS_%' THEN 1\n        WHEN j.EmailName LIKE 'CRS_%' THEN 1\n        ELSE 0\n    END\n\n/* \u274c Multiple pieces of information per line */\nSELECT s.SubscriberKey AS SubscriberKey, j.EmailName AS EmailName, s.EventDate AS SentDate, j.DeliveredTime AS DeliveryDate, o.EventDate AS OpenDate\nFROM _Sent AS s\n    LEFT JOIN _Job AS j ON j.JobID = s.JobID\n    LEFT JOIN _Open AS o ON o.JobID = s.JobID AND o.ListID = s.ListID AND o.BatchID = s.BatchID AND o.SubscriberID = s.SubscriberID AND o.IsUnique = 1\nWHERE 1 = CASE WHEN j.EmailName LIKE 'UPS_%' THEN 1 WHEN j.EmailName LIKE 'CRS_%' THEN 1 ELSE 0 END\n")),(0,i.kt)("p",null,"As you can see, the ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select"},(0,i.kt)("inlineCode",{parentName:"a"},"SELECT"))," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,i.kt)("inlineCode",{parentName:"a"},"WHERE"))," keywords have their separate line to mark respective block starting. For readability reasons, I make an exception if there is only one Column or condition to be used:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 Single Column in SELECT and single condition in WHERE lines */\nSELECT SubscriberKey\nFROM _Subscribers\nWHERE Domain = 'mateuszdabrowski.pl'\n\n/* \u274c Separate lines with single SELECT Column and WHERE condition */\nSELECT\n      SubscriberKey\nFROM _Subscribers\nWHERE\n    Domain = 'mateuszdabrowski.pl'\n")),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"DISTINCT")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"TOP"),", put it into the same line as ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select"},(0,i.kt)("inlineCode",{parentName:"a"},"SELECT")),". In such a case, even if you work on a single Column, move it to a separate row for better readability."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 Single Column in SELECT and single condition in WHERE lines */\nSELECT DISTINCT TOP 10\n      SubscriberKey\nFROM ContenstSubmissions\n\n/* \u274c Separate lines for single SELECT Column and WHERE condition */\nSELECT DISTINCT TOP 10 SubscriberKey\nFROM ContenstSubmissions\n"))),(0,i.kt)("h3",{id:"left-aligned-keywords"},"Left Aligned Keywords"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Align main SQL keywords to the left.")),(0,i.kt)("p",null,"This rule focuses on writing speed. While I prefer the Vertically Aligned Space approach's aesthetics, I don't see any significant readability gains. On the other hand, writing in this style in Marketing Cloud is a pain, as there is no autoformatter supporting it in the Query Studio or Query Activity. We would have to add all those additional spaces manually. It's just not worth it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 Left Aligned Keywords */\nSELECT\n      SubscriberKey\n    , EmailAddress\nFROM Ent._Subscribers\nWHERE DateJoined >= DATEADD(MONTH, -1, GETDATE())\n\n/* \u274c Post Keyword Space Aligned Vertically */\nSELECT SubscriberKey,\n       EmailAddress\n  FROM Ent._Subscribers\n WHERE DateJoined >= DATEADD(MONTH, -1, GETDATE())\n")),(0,i.kt)("h3",{id:"consistent-indentation"},"Consistent Indentation"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use indentation to highlight SQL keyword relationships.")),(0,i.kt)("p",null,"This rule focuses on readability. The logic, in short, is to indent whenever the line is dependent on the previous line (child line), for example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Selected Column Names are children of ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-select"},(0,i.kt)("inlineCode",{parentName:"a"},"SELECT"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"))," keywords are children of the initial Table referenced with ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-from"},(0,i.kt)("inlineCode",{parentName:"a"},"FROM"))),(0,i.kt)("li",{parentName:"ul"},"Joining relationships (",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join#joining-on"},(0,i.kt)("inlineCode",{parentName:"a"},"ON")),") are children of ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"))),(0,i.kt)("li",{parentName:"ul"},"Case conditions are children of the ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-case"},(0,i.kt)("inlineCode",{parentName:"a"},"CASE"))),(0,i.kt)("li",{parentName:"ul"},"Where conditions are children of the ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-where"},(0,i.kt)("inlineCode",{parentName:"a"},"WHERE"))),(0,i.kt)("li",{parentName:"ul"},"Sub-queries follow the same rules in respective indentation level.")),(0,i.kt)("p",null,"For simplicity I use 4-spaces indent, as it is both standard and can be added in Marketing Cloud Query with a single click of the Tab key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 Dependency based indentation */\nSELECT\n      s.SubscriberKey AS SubscriberKey\n    , j.EmailName     AS EmailName\n    , s.EventDate     AS SentDate\n    , j.DeliveredTime AS DeliveryDate\n    , o.EventDate     AS OpenDate\nFROM _Sent AS s\n    LEFT JOIN _Job AS j\n        ON j.JobID = s.JobID\n    LEFT JOIN _Open AS o\n        ON o.JobID = s.JobID\n        AND o.ListID = s.ListID\n        AND o.BatchID = s.BatchID\n        AND o.SubscriberID = s.SubscriberID\n        AND o.IsUnique = 1\nWHERE\n    1 = CASE\n        WHEN j.EmailName LIKE 'UPS_%' THEN 1\n        WHEN j.EmailName LIKE 'CRS_%' THEN 1\n        ELSE 0\n    END\n\n/* \u274c Lack of indentation */\nSELECT\ns.SubscriberKey   AS SubscriberKey\n, j.EmailName     AS EmailName\n, s.EventDate     AS SentDate\n, j.DeliveredTime AS DeliveryDate\n, o.EventDate     AS OpenDate\nFROM _Sent AS s\nLEFT JOIN _Job AS j ON j.JobID = s.JobID\nLEFT JOIN _Open AS o ON o.JobID = s.JobID\nAND o.ListID = s.ListID\nAND o.BatchID = s.BatchID\nAND o.SubscriberID = s.SubscriberID\nAND o.IsUnique = 1\nWHERE 1 = CASE\nWHEN j.EmailName LIKE 'UPS_%' THEN 1\nWHEN j.EmailName LIKE 'CRS_%' THEN 1\nELSE 0\nEND\n")),(0,i.kt)("h3",{id:"intentional-spacing"},"Intentional Spacing"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use spaces wherever it makes the query more readable.")),(0,i.kt)("p",null,"The must-have is spacing around any ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where#basic-operators"},"operators")," (equality or comparison) and after commas."),(0,i.kt)("p",null,"However, there is another place where spacing is beneficial for readability but might require an exception in some scenarios. Spacing for ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select#aliasing-with-as"},"aliases")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"THEN")," keywords of the ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-case"},(0,i.kt)("inlineCode",{parentName:"a"},"CASE"))," statement."),(0,i.kt)("p",null,"I try to use it whenever possible, but when there is huge imbalance in length (for example one Column requires multi-function calculation or there is a single complex ",(0,i.kt)("inlineCode",{parentName:"p"},"WHEN")," in ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-case"},(0,i.kt)("inlineCode",{parentName:"a"},"CASE")),") equal spacing might make the query harder to read. Always decide which approach works best for your query from readability perspective."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 Spacing around operators plus equalizing aliases and THEN */\nSELECT\n      s.SubscriberKey AS SubscriberKey\n    , j.EmailName     AS EmailName\n    , s.EventDate     AS SentDate\n    , j.DeliveredTime AS DeliveryDate\n    , o.EventDate     AS OpenDate\nFROM _Sent AS s\n    LEFT JOIN _Job AS j\n        ON j.JobID = s.JobID\n    LEFT JOIN _Open AS o\n        ON o.JobID = s.JobID\n        AND o.ListID = s.ListID\n        AND o.BatchID = s.BatchID\n        AND o.SubscriberID = s.SubscriberID\n        AND o.IsUnique = 1\nWHERE\n    1 = CASE\n        WHEN j.EmailName LIKE 'UPS_%'     THEN 1\n        WHEN j.EmailName LIKE 'CRS_%'     THEN 1\n        WHEN j.EmailName = 'OTH_SeedList' THEN 1\n        ELSE 0\n    END\n\n/* \u2705 Spacing around operators plus equalizing aliases with exceptions */\nSELECT\n      s.SubscriberKey AS SubscriberKey\n    , j.EmailName     AS EmailName\n    , s.EventDate     AS SentDate\n    , j.DeliveredTime AS DeliveryDate\n    , o.EventDate     AS OpenDate\n    , DATEDIFF(HOUR, s.EventDate, o.EventDate) AS TimeToOpen\nFROM _Sent AS s\n    LEFT JOIN _Job AS j\n        ON j.JobID = s.JobID\n    LEFT JOIN _Open AS o\n        ON o.JobID = s.JobID\n        AND o.ListID = s.ListID\n        AND o.BatchID = s.BatchID\n        AND o.SubscriberID = s.SubscriberID\n        AND o.IsUnique = 1\nWHERE\n    1 = CASE\n        WHEN j.EmailName LIKE 'UPS_%' OR j.EmailName LIKE 'CRS_%' THEN 1\n        WHEN j.EmailName = 'OTH_SeedList' THEN 1\n        ELSE 0\n    END\n\n/* \u274c Lack of spacing */\nSELECT\n    s.SubscriberKey AS SubscriberKey\n    ,j.EmailName AS EmailName\n    ,s.EventDate AS SentDate\n    ,j.DeliveredTime AS DeliveryDate\n    ,o.EventDate AS OpenDate\n    ,DATEDIFF(HOUR,s.EventDate,o.EventDate) AS TimeToOpen\nFROM _Sent AS s\n    LEFT JOIN _Job AS j\n        ON j.JobID=s.JobID\n    LEFT JOIN _Open AS o\n        ON o.JobID=s.JobID\n        AND o.ListID=s.ListID\n        AND o.BatchID=s.BatchID\n        AND o.SubscriberID=s.SubscriberID\n        AND o.IsUnique=1\nWHERE\n    1=CASE\n        WHEN j.EmailName LIKE 'UPS_%' THEN 1\n        WHEN j.EmailName LIKE 'CRS_%' THEN 1\n        WHEN j.EmailName='OTH_SeedList' THEN 1\n        ELSE 0\n    END\n")),(0,i.kt)("h3",{id:"commas-placement"},"Commas Placement"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use commas at the beginning of the line.")),(0,i.kt)("p",null,"There are few approaches related to comma placement. Initially, I favoured commas at the end of the line, as I found them more accessible to use due to their similarity to natural language. However, there are strong reasons to use the comma at the beginning of the line. Here is what convinced me to change my style:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Adding or deleting a Column requires a change in only one line. It's easier, faster and minimises the risk of a crash due to the trailing comma."),(0,i.kt)("li",{parentName:"ol"},"Above is also very beneficial during difference checking and when leveraging git for query version control. With a comma at the beginning of the line, the Column addition or deletion is displayed correctly as a single line change."),(0,i.kt)("li",{parentName:"ol"},"Having a comma in the beginning makes it easier to assess where a new Column definition starts quickly. It is a vast readability improvement when you are using more complex structures, like ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-case#conditional-values-with-case"},(0,i.kt)("inlineCode",{parentName:"a"},"CASE")," in ",(0,i.kt)("inlineCode",{parentName:"a"},"SELECT")),"."),(0,i.kt)("li",{parentName:"ol"},"It's also easier to quickly assess whether you have a comma for each Column. With lines of various length, it is much harder with the comma at the end.")),(0,i.kt)("p",null,"For the sake of readability, I indent the first Column by two spaces so that it is in line with the following ones. Similarly, I indent ",(0,i.kt)("inlineCode",{parentName:"p"},"END")," after ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-case#conditional-values-with-case"},(0,i.kt)("inlineCode",{parentName:"a"},"CASE")," in ",(0,i.kt)("inlineCode",{parentName:"a"},"SELECT"))," by two spaces for the same reason."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{3-5,10-12}","{3-5,10-12}":!0},"/* \u2705 Commas at the beginning */\nSELECT\n      SubscriberKey\n    , EmailAddress\n    , DateJoined\nFROM Ent._Subscribers\n\n/* \u274c Commas in the end */\nSELECT\n    SubscriberKey,\n    EmailAddress,\n    DateJoined\nFROM Ent._Subscribers\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"explicit-vs-implicit"},"Explicit vs Implicit"),(0,i.kt)("p",null,"Many things in SQL can be done in multiple ways - using various functions, symbols or shortcuts. While all those options may work, not all are a good idea. Whenever you are choosing the approach, go for the explicit and straightforward. Even if it means writing a few characters more."),(0,i.kt)("h3",{id:"date-parts"},"Date Parts"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use full ",(0,i.kt)("a",{parentName:"strong",href:"/docs/sql/sfmc-sql-date-functions#date-parts"},"Date Parts")," names.")),(0,i.kt)("p",null,"Yes, abbreviations let you save few characters, but they kill the readability unless someone is fluent in those shortcuts. For Marketing Cloud purposes, the time saved during writing is not worth the time lost when reading. Go with the full version."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{6,13}","{6,13}":!0},"/* \u2705 Full Date Part */\nSELECT\n      SubscriberKey\n    , EmailAddress\nFROM Ent._Subscribers\nWHERE DateJoined >= DATEADD(MONTH, -1, GETDATE())\n\n/* \u274c Abbreviated Date Part */\nSELECT\n      SubscriberKey\n    , EmailAddress\nFROM Ent._Subscribers\nWHERE DateJoined >= DATEADD(M, -1, GETDATE())\n")),(0,i.kt)("h3",{id:"join-and-on"},"JOIN and ON"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use ",(0,i.kt)("a",{parentName:"strong",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"INNER JOIN"))," name and reference Column from the new Table first after ",(0,i.kt)("a",{parentName:"strong",href:"/docs/sql/sfmc-sql-join#joining-on"},(0,i.kt)("inlineCode",{parentName:"a"},"ON")),".")),(0,i.kt)("p",null,"Instead of just ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN")),", write ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-join#inner-join"},(0,i.kt)("inlineCode",{parentName:"a"},"INNER JOIN"))," - it's longer but explicit and in line with the rest of ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"))," keywords. It makes it easier to scan queries with ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-join#multiple-various-joins"},"multiple various ",(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"))," statements."),(0,i.kt)("p",null,"Additionally, when defining ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"))," relationships after ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-join#joining-on"},(0,i.kt)("inlineCode",{parentName:"a"},"ON")),", firstly reference the Column from the joined Table. The previous Table should be on the right side. It will improve consistency and reading speed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{7-8,16-17}","{7-8,16-17}":!0},"/* \u2705 Explicit Inner Join and Column from new Table on the left side of the ON condition */\nSELECT\n      wel.SubscriberKey\n    , wel.EmailAddress\n    , o.EventDate AS OpenDate\nFROM WelcomeCampaignSegment AS wel\n    INNER JOIN _Open AS o\n        ON o.SubscriberKey = wel.SubscriberKey\n\n/* \u274c Implicit Inner Join and Column from new Table on the right side of the ON condition */\nSELECT\n      wel.SubscriberKey\n    , wel.EmailAddress\n    , o.EventDate AS OpenDate\nFROM WelcomeCampaignSegment AS wel\n    JOIN _Open AS o\n        ON wel.SubscriberKey = o.SubscriberKey\n")),(0,i.kt)("h3",{id:"table-aliases"},"Table Aliases"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"When using ",(0,i.kt)("inlineCode",{parentName:"strong"},"JOIN"),", add meaningful aliases for Tables and prefix all Columns with them.")),(0,i.kt)("p",null,"There are a few points:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If you are working on only one Table without ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"))," - don't use ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join#table-name-prefix"},"aliases")," at all. They are not needed and would make the query less readable."),(0,i.kt)("li",{parentName:"ol"},"If you have any ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join"},(0,i.kt)("inlineCode",{parentName:"a"},"JOIN"))," - always use ",(0,i.kt)("a",{parentName:"li",href:"/docs/sql/sfmc-sql-join#table-name-prefix"},"aliases and prefixes"),". SQL doesn't always require it, but it is much easier to read the query when the Columns have an explicit Table mention in the prefix."),(0,i.kt)("li",{parentName:"ol"},"When you create an alias for a Table, make it meaningful. Using subsequent letters of the alphabet is not a good idea. Instead, use something that will remind the reader of the full name - for example, abbreviation using the first letter of each word in the Table. It will allow for much easier reading."),(0,i.kt)("li",{parentName:"ol"},"Always use ",(0,i.kt)("inlineCode",{parentName:"li"},"AS")," keyword between the Table name and the alias.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"/* \u2705 No aliasing in single Table query */\nSELECT\n      SubscriberKey\n    , EmailAddress\nFROM Ent._Subscribers\n\n/* \u274c Aliasing in single Table query */\nSELECT\n      s.SubscriberKey\n    , s.EmailAddress\nFROM Ent._Subscribers AS s\n\n/* \u2705 Meaningful aliasing and prefixes in multi Table query */\nSELECT\n      wel.SubscriberKey\n    , wel.EmailAddress\n    , o.EventDate AS OpenDate\nFROM WelcomeCampaignSegment AS wel\n    INNER JOIN _Open AS o\n        ON o.SubscriberKey = wel.SubscriberKey\n\n/* \u274c No aliasing and no prefix in multi Table query */\nSELECT\n      SubscriberKey\n    , EmailAddress\n    , EventDate AS OpenDate\nFROM WelcomeCampaignSegment\n    INNER JOIN _Open\n        ON _Open.SubscriberKey = WelcomeCampaignSegment.SubscriberKey\n\n/* \u274c Not meaningful aliasing and no AS keyword in multi Table query */\nSELECT\n      a.SubscriberKey\n    , a.EmailAddress\n    , b.EventDate AS OpenDate\nFROM WelcomeCampaignSegment a\n    INNER JOIN _Open b\n        ON a.SubscriberKey = b.SubscriberKey\n")),(0,i.kt)("h3",{id:"not-equal-to-symbol"},"Not Equal To Symbol"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use ",(0,i.kt)("inlineCode",{parentName:"strong"},"!=")," instead of ",(0,i.kt)("inlineCode",{parentName:"strong"},"<>"),".")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"!=")," symbol is much more popular and used in many languages. Using it makes the query more readable to people not experienced in SQL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{4,9}","{4,9}":!0},"/* \u2705 Use of != for negation */\nSELECT SubscriberKey\nFROM Ent._Subscribers\nWHERE CONVERT(DATE, DateJoined) != CONVERT(DATE, GETDATE())\n\n/* \u274c Use of <> for negation */\nSELECT SubscriberKey\nFROM Ent._Subscribers\nWHERE CONVERT(DATE, DateJoined) <> CONVERT(DATE, GETDATE())\n")),(0,i.kt)("h3",{id:"meaningful-column-names"},"Meaningful Column Names"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use Column names that suggest the data type.")),(0,i.kt)("p",null,"Just as with a letter case, you might have your hands tied by cross-system dependencies. But whenever possible, strive for meaningful names:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Use descriptive Column names. It is better to have a long explicit one (",(0,i.kt)("inlineCode",{parentName:"li"},"IsTrackingSuppressed"),") than a short mysterious abbreviation (",(0,i.kt)("inlineCode",{parentName:"li"},"trk"),")."),(0,i.kt)("li",{parentName:"ol"},"When the Column is a boolean, prefix it with ",(0,i.kt)("inlineCode",{parentName:"li"},"Is")," (or ",(0,i.kt)("inlineCode",{parentName:"li"},"Has"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"Does")," depending on the underlying data)."),(0,i.kt)("li",{parentName:"ol"},"When the Column is a date, suffix it with ",(0,i.kt)("inlineCode",{parentName:"li"},"Date"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{3-8,17-22}","{3-8,17-22}":!0},"/* \u2705 Meaningful and consistent Column Names */\nSELECT\n      s.SubscriberKey    AS SubscriberKey\n    , j.EmailName        AS EmailName\n    , s.EventDate        AS SentDate\n    , j.DeliveredTime    AS DeliveryDate\n    , o.EventDate        AS OpenDate\n    , j.SuppressTracking AS IsTrackingSuppressed\nFROM _Sent AS s\n    LEFT JOIN _Job AS j\n        ON j.JobID = s.JobID\n    LEFT JOIN _Open AS o\n        ON o.JobID = s.JobID\n\n/* \u274c No consistency and type alignment in Column Names */\nSELECT\n      s.SubscriberKey    AS SubscriberKey\n    , j.EmailName        AS EmailName\n    , s.EventDate        AS SentDate\n    , j.DeliveredTime    AS DeliveryTime\n    , o.EventDate        AS OpenedAt\n    , j.SuppressTracking AS SuppressTracking\nFROM _Sent AS s\n    LEFT JOIN _Job AS j\n        ON j.JobID = s.JobID\n    LEFT JOIN _Open AS o\n        ON o.JobID = s.JobID\n")),(0,i.kt)("h2",{id:"sum-up"},"Sum Up"),(0,i.kt)("p",null,"It is a long article, so let's gather all the recommendations in one place:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Be consistent"),(0,i.kt)("li",{parentName:"ol"},"Strive for readability"),(0,i.kt)("li",{parentName:"ol"},"Use comments to provide required context to your query"),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"UPPERCASE")," for SQL syntax ",(0,i.kt)("a",{parentName:"li",href:"#sql-syntax-case"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"PascalCase")," for Table & Column names ",(0,i.kt)("a",{parentName:"li",href:"#column--table-names-case"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Limit information per line to one ",(0,i.kt)("a",{parentName:"li",href:"#single-information-per-line"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Align main SQL keywords to the left ",(0,i.kt)("a",{parentName:"li",href:"#left-aligned-keywords"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Use indentation to highlight the relationship between SQL keywords ",(0,i.kt)("a",{parentName:"li",href:"#consistent-indentation"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Use spaces wherever it makes the query more readable ",(0,i.kt)("a",{parentName:"li",href:"#intentional-spacing"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Use commas at the beginning of the line ",(0,i.kt)("a",{parentName:"li",href:"#commas-placement"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Use full Date Parts names ",(0,i.kt)("a",{parentName:"li",href:"#date-parts"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"INNER JOIN")," name over ",(0,i.kt)("inlineCode",{parentName:"li"},"JOIN")," ",(0,i.kt)("a",{parentName:"li",href:"#join-and-on"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"In ",(0,i.kt)("inlineCode",{parentName:"li"},"JOIN ON")," reference Column from newly joined Table on the left ",(0,i.kt)("a",{parentName:"li",href:"#join-and-on"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"When using ",(0,i.kt)("inlineCode",{parentName:"li"},"JOIN"),", add meaningful aliases for Tables and prefix all Columns ",(0,i.kt)("a",{parentName:"li",href:"#join-and-on"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Always use ",(0,i.kt)("inlineCode",{parentName:"li"},"AS")," keyword between the Table name and the alias ",(0,i.kt)("a",{parentName:"li",href:"#join-and-on"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"!=")," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},"<>")," ",(0,i.kt)("a",{parentName:"li",href:"#not-equal-to-symbol"},"\ud83d\udd17")),(0,i.kt)("li",{parentName:"ol"},"Use Column names that suggest the data type ",(0,i.kt)("a",{parentName:"li",href:"#meaningful-column-names"},"\ud83d\udd17"))),(0,i.kt)("p",null,"If you want to share something I'm missing or have arguments for a different recommendation - ",(0,i.kt)("a",{parentName:"p",href:"https://www.linkedin.com/in/mateusz-dabrowski-marketing/"},"let me know"),"."),(0,i.kt)("p",null,"Looking for more Marketing Cloud style? Check out my:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/ssjs/ssjs-style-guide"},"SSJS Style Guide")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/ampscript/ampscript-style-guide"},"AMPScript Style Guide"))))}c.isMDXComponent=!0}}]);