"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[800],{4137:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),m=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(a),k=i,N=u["".concat(d,".").concat(k)]||u[k]||s[k]||r;return a?n.createElement(N,l(l({ref:t},p),{},{components:a})):n.createElement(N,l({ref:t},p))}));function k(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1872:(e,t,a)=>{a.d(t,{m:()=>r});var n=a(7294);const i="leadText_qzwo",r=e=>{let{content:t}=e;return n.createElement(n.Fragment,null,n.createElement("p",{id:i},t))}},1291:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var n=a(7462),i=(a(7294),a(4137)),r=a(1872);const l={id:"sfmc-sql-date-functions",title:"SFMC SQL Date Functions",sidebar_label:"Date Functions",description:"Take control over dates with built-in SQL functions. Let the query do the job.",image:"img/og/og-image-sql-date-functions.png",tags:["Marketing Cloud","SQL"]},o=void 0,d={unversionedId:"sql/sfmc-sql-date-functions",id:"sql/sfmc-sql-date-functions",title:"SFMC SQL Date Functions",description:"Take control over dates with built-in SQL functions. Let the query do the job.",source:"@site/docs/sql/sfmc-sql-date-functions.mdx",sourceDirName:"sql",slug:"/sql/sfmc-sql-date-functions",permalink:"/docs/sql/sfmc-sql-date-functions",draft:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/sql/sfmc-sql-date-functions.mdx",tags:[{label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{label:"SQL",permalink:"/docs/tags/sql"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1657131299,formattedLastUpdatedAt:"Jul 6, 2022",frontMatter:{id:"sfmc-sql-date-functions",title:"SFMC SQL Date Functions",sidebar_label:"Date Functions",description:"Take control over dates with built-in SQL functions. Let the query do the job.",image:"img/og/og-image-sql-date-functions.png",tags:["Marketing Cloud","SQL"]},sidebar:"docs",previous:{title:"String Functions",permalink:"/docs/sql/sfmc-sql-string-functions"},next:{title:"Numeric Functions",permalink:"/docs/sql/sfmc-sql-numeric-functions"}},m={},p=[{value:"GETDATE &amp; GETUTCDATE",id:"getdate--getutcdate",level:2},{value:"DATEPART",id:"datepart",level:2},{value:"Date parts",id:"date-parts",level:3},{value:"DATENAME",id:"datename",level:2},{value:"DATEFROMPARTS &amp; DATETIMEFROMPARTS",id:"datefromparts--datetimefromparts",level:2},{value:"DATEADD",id:"dateadd",level:2},{value:"DATEDIFF",id:"datediff",level:2},{value:"AT TIME ZONE",id:"at-time-zone",level:2},{value:"Add offset with AT TIME ZONE",id:"add-offset-with-at-time-zone",level:3},{value:"AT TIME ZONE vs TODATETIMEOFFSET",id:"at-time-zone-vs-todatetimeoffset",level:3},{value:"Change timezone with AT TIME ZONE",id:"change-timezone-with-at-time-zone",level:3},{value:"Available timezones",id:"available-timezones",level:3},{value:"FORMAT with Dates",id:"format-with-dates",level:2},{value:"Standard date formats",id:"standard-date-formats",level:3},{value:"Custom date formats",id:"custom-date-formats",level:3}],s={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(r.m,{content:"Take control over dates with built-in SQL functions. Let the query do the job.",mdxType:"LeadText"}),(0,i.kt)("p",null,"Salesforce Marketing Cloud SQL implementation does not support user-defined functions. There are, however, multiple built-in functions that are useful on a day-to-day basis when working with queries."),(0,i.kt)("p",null,"Here, I will cover only selected date functions that I find most useful for Marketing Automation purposes. They will help you find the current date, calculate a new one or format it to match your needs."),(0,i.kt)("h2",{id:"getdate--getutcdate"},"GETDATE & GETUTCDATE"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"GETDATE")," function is the most straightforward way to get the current timestamp within your query."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT GETDATE() AS CurrentDate\n")),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"GETDATE()")," gets server time. For Salesforce Marketing Cloud, it means Central Standard Time (UTC-6) without changes between standard and daylight savings time. It cannot be changed, even with timezone and culture settings in Setup."),(0,i.kt)("p",{parentName:"admonition"},"You can get the datetime with appropriate offset information using the ",(0,i.kt)("inlineCode",{parentName:"p"},"SYSDATETIMEOFFSET()")," function. It will return the same datetime as ",(0,i.kt)("inlineCode",{parentName:"p"},"GETDATE()")," but in a format showcasing the timezone offset: ",(0,i.kt)("inlineCode",{parentName:"p"},"2020-12-28 15:08:01.7239173 -06:00"),"."),(0,i.kt)("p",{parentName:"admonition"},"You can see the 24-hour clock format and milliseconds and UTC-6 offset at the end. This last information will be helpful for timezone conversions with the ",(0,i.kt)("a",{parentName:"p",href:"#at-time-zone"},(0,i.kt)("inlineCode",{parentName:"a"},"AT TIME ZONE"))," function."),(0,i.kt)("p",{parentName:"admonition"},"You can also leverage ",(0,i.kt)("a",{parentName:"p",href:"#at-time-zone-vs-todatetimeoffset"},"`TODATETIMEOFFSET'")," to work with standard ",(0,i.kt)("inlineCode",{parentName:"p"},"GETDATE"),".")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"GETUTCDATE")," function works the same as ",(0,i.kt)("inlineCode",{parentName:"p"},"GETDATE")," but returns datetime in the UTC timezone."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT GETUTCDATE() AS CurrentUTCDate\n")),(0,i.kt)("p",null,"Both return a datetime object (for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"Oct 30 2020 1:15AM"),"), so no conversion is needed to use other Date Functions on the outcome of this function."),(0,i.kt)("p",null,"However, you can limit its output to either date or time part by using ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-conversion-functions#cast--convert"},(0,i.kt)("inlineCode",{parentName:"a"},"CONVERT"))," or ",(0,i.kt)("a",{parentName:"p",href:"#format-with-dates"},(0,i.kt)("inlineCode",{parentName:"a"},"FORMAT"))," Functions."),(0,i.kt)("h2",{id:"datepart"},"DATEPART"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEPART")," function returns the chosen part of the provided date."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{5} title="Find all Subscribers that joined in 2020"',"{5}":!0,title:'"Find',all:!0,Subscribers:!0,that:!0,joined:!0,in:!0,'2020"':!0},"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM Ent._Subscribers\nWHERE DATEPART(YEAR, DateJoined) = 2020\n")),(0,i.kt)("p",null,"It outputs an integer, so be sure you use a number when making comparisons. If you need a string output, check out the similar ",(0,i.kt)("a",{parentName:"p",href:"#datename"},(0,i.kt)("inlineCode",{parentName:"a"},"DATENAME"))," function."),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"There are also three shortcuts for the most popular use cases: ",(0,i.kt)("inlineCode",{parentName:"p"},"YEAR()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MONTH()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DAY()"),"."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",2020:!0,className:"language-sql",metastring:'{5} title="Find all Subscribers that joined in 2020 - shorter approach"',"{5}":!0,title:'"Find',all:!0,Subscribers:!0,that:!0,joined:!0,in:!0,"-":!0,shorter:!0,'approach"':!0},"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM Ent._Subscribers\nWHERE YEAR(DateJoined) = 2020\n")),(0,i.kt)("p",{parentName:"admonition"},"In the backend, those functions are just wrappers around ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEPART"),", so you can use whatever you prefer.")),(0,i.kt)("h3",{id:"date-parts"},"Date parts"),(0,i.kt)("p",null,"You can reference date parts both by their full name and an abbreviation."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Date part"),(0,i.kt)("th",{parentName:"tr",align:null},"Abbreviations"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"YEAR"),(0,i.kt)("td",{parentName:"tr",align:null},"yy, yyyy")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"QUARTER"),(0,i.kt)("td",{parentName:"tr",align:null},"qq, q")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MONTH"),(0,i.kt)("td",{parentName:"tr",align:null},"mm, m")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DAYOFYEAR"),(0,i.kt)("td",{parentName:"tr",align:null},"dy, y")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DAY"),(0,i.kt)("td",{parentName:"tr",align:null},"dd, d")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WEEK"),(0,i.kt)("td",{parentName:"tr",align:null},"wk, ww")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WEEKDAY"),(0,i.kt)("td",{parentName:"tr",align:null},"dw, w")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"HOUR"),(0,i.kt)("td",{parentName:"tr",align:null},"hh")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MINUTE"),(0,i.kt)("td",{parentName:"tr",align:null},"mi, n")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SECOND"),(0,i.kt)("td",{parentName:"tr",align:null},"ss, s")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MILLISECOND"),(0,i.kt)("td",{parentName:"tr",align:null},"ms")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MICROSECOND"),(0,i.kt)("td",{parentName:"tr",align:null},"mcs")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NANOSECOND"),(0,i.kt)("td",{parentName:"tr",align:null},"ns")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DAYOFYEAR"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DAY"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"WEEKDAY")," sounds similar to each other, but they return a bit different value. ",(0,i.kt)("inlineCode",{parentName:"p"},"DAYOFYEAR")," will tell you which day of the year it is (f.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"257"),"). ",(0,i.kt)("inlineCode",{parentName:"p"},"DAY")," returns number of the day within the month (f.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"14"),"). ",(0,i.kt)("inlineCode",{parentName:"p"},"WEEKDAY")," returns number of the day within a week (f.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," for Monday)."),(0,i.kt)("p",null,"For 99% of SFMC needs, you will be fine with ",(0,i.kt)("inlineCode",{parentName:"p"},"YEAR"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MONTH"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DAY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"HOUR")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"MINUTE"),". Using only those with the full name will make your queries readable and straightforward for everyone."),(0,i.kt)("h2",{id:"datename"},"DATENAME"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DATENAME")," functions return the string value of the specified ",(0,i.kt)("a",{parentName:"p",href:"#date-parts"},"date part")," from a given date."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{3} title="Capture the whole day\'s name"',"{3}":!0,title:'"Capture',the:!0,whole:!0,"day's":!0,'name"':!0},"SELECT\n      SubscriberKey\n    , DATENAME(WEEKDAY, DateJoined) AS DayJoined\nFROM Ent._Subscribers\n")),(0,i.kt)("p",null,"It might help quickly cut the date to just an important part (like a year for anniversary personalisation or capturing anniversary bins). However, its standout feature is returning the day's name for a given date, thanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"WEEKDAY")," ",(0,i.kt)("a",{parentName:"p",href:"#date-parts"},"date part"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{3} title="Create an automation that will capture weekend meetings for Friday reminder"',"{3}":!0,title:'"Create',an:!0,automation:!0,that:!0,will:!0,capture:!0,weekend:!0,meetings:!0,for:!0,Friday:!0,'reminder"':!0},"SELECT SubscriberKey\nFROM SalesMeetings\nWHERE DATENAME(WEEKDAY, DayOfMeeting) IN ('Friday', 'Saturday', 'Sunday')\n    AND DATEDIFF(DAY, GETDATE(), DayOfMeeting) < 3\n")),(0,i.kt)("p",null,"It works for months as well: ",(0,i.kt)("inlineCode",{parentName:"p"},"DATENAME(MONTH, GETDATE())"),"."),(0,i.kt)("p",null,"As ",(0,i.kt)("inlineCode",{parentName:"p"},"DATENAME")," returns a string, you won't be able to do any calculations on the outcome - even if it will contain only digits (like ",(0,i.kt)("inlineCode",{parentName:"p"},"DATENAME")," from the ",(0,i.kt)("inlineCode",{parentName:"p"},"YEAR")," date part). If you want to perform operations, you must use the ",(0,i.kt)("a",{parentName:"p",href:"#datepart"},(0,i.kt)("inlineCode",{parentName:"a"},"DATEPART"))," function."),(0,i.kt)("h2",{id:"datefromparts--datetimefromparts"},"DATEFROMPARTS & DATETIMEFROMPARTS"),(0,i.kt)("p",null,"While ",(0,i.kt)("a",{parentName:"p",href:"#datepart"},(0,i.kt)("inlineCode",{parentName:"a"},"DATEPART"))," and ",(0,i.kt)("a",{parentName:"p",href:"#datename"},(0,i.kt)("inlineCode",{parentName:"a"},"DATENAME"))," allow you to pull specific parts from a given date, there are also three functions that will enable you to go the other way round."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DATEFROMPARTS")," lets you create a date value from three integers representing a year, month and day."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{3}","{3}":!0},"SELECT\n      SubscriberKey\n    , DATEFROMPARTS(2022, 01, 31) AS DateValue\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DATETIMEFROMEPARTS")," is a sibling function that requires more data but outputs a fully-fledged datetime value. On top of the year, month and day, add an hour, minute, seconds and milliseconds. You won't be able to see the time part in the Salesforce Marketing Cloud UI (Contact Builder or Email Studio), but it will be available for calculations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{3}","{3}":!0},"SELECT\n      SubscriberKey\n    , DATETIMEFROMPARTS(2022, 01, 31, 23, 59, 59, 0) AS DatetimeValue\n")),(0,i.kt)("p",null,"There is also a third function: ",(0,i.kt)("inlineCode",{parentName:"p"},"TIMEFROMEPARTS"),". It requires an hour, minute, seconds, fraction and precision as arguments. Its usefulness in Marketing Cloud is close to none."),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Of course, you don't have to pass hardcoded integers as arguments for those functions - you can pass existing fields or even calculated values."),(0,i.kt)("p",{parentName:"admonition"},"However, keep in mind that if at least one provided date part is a ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL"),", the whole output will be a ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL"),".")),(0,i.kt)("h2",{id:"dateadd"},"DATEADD"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEADD")," functions give you the power to add and subtract from your date values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{2-3} title="Add seven days to the current UTC date"',"{2-3}":!0,title:'"Add',seven:!0,days:!0,to:!0,the:!0,current:!0,UTC:!0,'date"':!0},"SELECT\n      GETUTCDATE()                  AS TrialStartDate\n    , DATEADD(DAY, 7, GETUTCDATE()) AS TrialEndDate\n")),(0,i.kt)("p",null,"It requires three things:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Date part - The date element that will be changed"),(0,i.kt)("li",{parentName:"ol"},"Number - The integer (or an expression evaluating to integer) for interval"),(0,i.kt)("li",{parentName:"ol"},"Date - The original date that the ",(0,i.kt)("inlineCode",{parentName:"li"},"DATEADD")," function will change. It can be in any date data type. The output will be of the same type.")),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"DATEADD")," does not take into consideration timezone offset."),(0,i.kt)("p",{parentName:"admonition"},"However, if you change the date with the 31st day of the month by some months and the outcome month is shorter, SQL will account for that and return the last day of a given month.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DATEADD")," is especially useful when used with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,i.kt)("inlineCode",{parentName:"a"},"WHERE"))," statement, as it allows to filter records dynamically:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{5} title="Find all Subscribers that joined within the last month"',"{5}":!0,title:'"Find',all:!0,Subscribers:!0,that:!0,joined:!0,within:!0,the:!0,last:!0,'month"':!0},"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM Ent._Subscribers\nWHERE DateJoined >= DATEADD(MONTH, -1, GETDATE())\n")),(0,i.kt)("p",null,"It's even better with ranges:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{5} title="Find all Subscribers registered to an event within the next month"',"{5}":!0,title:'"Find',all:!0,Subscribers:!0,registered:!0,to:!0,an:!0,event:!0,within:!0,the:!0,next:!0,'month"':!0},"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM EventRegistration\nWHERE EventDate BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE())\n")),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"A similar date calculation is also available with the ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEADD()")," AMPScript function. Depending on the use case, consider whether you want to manipulate the date in the Data Extension or only in the communication.")),(0,i.kt)("p",null,"If the date field is nullable, be sure to use ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-null-functions#coalesce"},(0,i.kt)("inlineCode",{parentName:"a"},"COALESCE"))," or add a ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-null-functions#null"},(0,i.kt)("inlineCode",{parentName:"a"},"NULL")," checking condition"),"."),(0,i.kt)("h2",{id:"datediff"},"DATEDIFF"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEDIFF")," function calculates the difference between two dates."),(0,i.kt)("p",null,"You need to provide the ",(0,i.kt)("a",{parentName:"p",href:"#date-parts"},"date part")," used for the calculation and two dates (start and end order)."),(0,i.kt)("p",null,"You may use it in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select"},(0,i.kt)("inlineCode",{parentName:"a"},"SELECT"))," statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{3} title="Check how long someone was a subscriber"',"{3}":!0,title:'"Check',how:!0,long:!0,someone:!0,was:!0,a:!0,'subscriber"':!0},"SELECT\n      SubscriberKey\n    , DATEDIFF(DAY, DateJoined, GETDATE()) AS SubscriptionTime\nFROM Ent._Subscribers\n")),(0,i.kt)("p",null,"You may use it in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,i.kt)("inlineCode",{parentName:"a"},"WHERE"))," statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{3} title="Get everyone that hit one year on the subscription list"',"{3}":!0,title:'"Get',everyone:!0,that:!0,hit:!0,one:!0,year:!0,on:!0,the:!0,subscription:!0,'list"':!0},"SELECT SubscriberKey\nFROM Ent._Subscribers\nWHERE DATEDIFF(DAY, DateJoined, GETDATE()) = 365\n")),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"DATEDIFF")," can output positive and negative numbers depending on provided values and their order."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n      DATEDIFF(DAY, DATEADD(DAY, -1, GETDATE()), GETDATE()) AS YesterdayPostive  /* Output: 1 */\n    , DATEDIFF(DAY, GETDATE(), DATEADD(DAY, -1, GETDATE())) AS YesterdayNegative /* Output: -1 */\n")),(0,i.kt)("p",{parentName:"admonition"},"It is crucial for creating correct comparisons within ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,i.kt)("inlineCode",{parentName:"a"},"WHERE")),".")),(0,i.kt)("p",null,"It takes into consideration the leap years. If you provide dates with ",(0,i.kt)("a",{parentName:"p",href:"#at-time-zone"},"offset"),", it will include the timezone differences and Daylight Saving Time."),(0,i.kt)("p",null,"You can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEDIFF")," for capturing ranges."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",31:!0,className:"language-sql",metastring:'{5} title="Find all Subscribers registered to an event within next 31 days"',"{5}":!0,title:'"Find',all:!0,Subscribers:!0,registered:!0,to:!0,an:!0,event:!0,within:!0,next:!0,'days"':!0},"SELECT\n      SubscriberKey\n    , EmailAddress\nFROM EventRegistration\nWHERE DATEDIFF(DAY, GETDATE(), EventDate) <= 31\n")),(0,i.kt)("p",null," It is shorter than ",(0,i.kt)("a",{parentName:"p",href:"#dateadd"},(0,i.kt)("inlineCode",{parentName:"a"},"DATEADD"))," but with a different level of control. Because ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEDIFF")," operates on ",(0,i.kt)("a",{parentName:"p",href:"#date-parts"},"Date Parts"),", it will consider only the chosen part. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{2-3} title="Different ranges, same outcome"',"{2-3}":!0,title:'"Different',"ranges,":!0,same:!0,'outcome"':!0},"SELECT\n     DATEDIFF(MONTH, 'Mar 31 2021', 'Apr 01 2021') AS ShortDiff /* Output: 1 */\n   , DATEDIFF(MONTH, 'Mar 01 2021', 'Apr 30 2021') AS LongDiff  /* Output: 1 */\n")),(0,i.kt)("p",null,"Despite dates in the first ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEDIFF")," being just a day apart and in the second nearly two months apart, both return ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),". The reason is that ",(0,i.kt)("inlineCode",{parentName:"p"},"DATEDIFF")," compares only the month date part - March to April is a single month of difference."),(0,i.kt)("p",null,"Depending on the use case, it might be good or bad, so be sure to select the correct function for your needs."),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"There is a limit to how big the difference can be. If you go down to the ",(0,i.kt)("inlineCode",{parentName:"p"},"SECOND")," ",(0,i.kt)("a",{parentName:"p",href:"#date-parts"},"date part"),", the query's maximum time difference is 68 years, 19 days, 3 hours, 14 minutes and 7 seconds. It shouldn't be an issue in Marketing Cloud for most use cases.")),(0,i.kt)("p",null,"If the date field is nullable, be sure to use ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-null-functions#coalesce"},(0,i.kt)("inlineCode",{parentName:"a"},"COALESCE"))," or add a ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-null-functions#null"},(0,i.kt)("inlineCode",{parentName:"a"},"NULL")," checking condition"),"."),(0,i.kt)("h2",{id:"at-time-zone"},"AT TIME ZONE"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AT TIME ZONE")," function provides two incredible features:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"It can give timezone offset information for any datetime missing this data."),(0,i.kt)("li",{parentName:"ol"},"It can convert datetime with offset to a different timezone.")),(0,i.kt)("p",null,"It's a must-have for multi-country senders and beneficial for others planning to personalize or calculate using date data."),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"AT TIME ZONE")," always outputs ",(0,i.kt)("inlineCode",{parentName:"p"},"DATETIMEOFFSET")," data type. If you need it in another type/format, use ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-conversion-functions#convert"},(0,i.kt)("inlineCode",{parentName:"a"},"CONVERT"))," or ",(0,i.kt)("a",{parentName:"p",href:"#format-with-dates"},(0,i.kt)("inlineCode",{parentName:"a"},"FORMAT")),".")),(0,i.kt)("h3",{id:"add-offset-with-at-time-zone"},"Add offset with AT TIME ZONE"),(0,i.kt)("p",null,"When you work with timezones, you want to have offset for the datetime fields you are using. Unfortunately, in most cases, it is missing. Neither Salesforce Marketing Cloud system timestamps nor the popular ",(0,i.kt)("a",{parentName:"p",href:"#getdate--getutcdate"},(0,i.kt)("inlineCode",{parentName:"a"},"GETDATE"))," function provides offset information."),(0,i.kt)("p",null,"You can quickly fix it with ",(0,i.kt)("inlineCode",{parentName:"p"},"AT TIME ZONE"),". When you apply this function to a timezone-less datetime, it will assume that you are defining it and return value with an appropriate offset."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Daylight Saving Time magic"',title:'"Daylight',Saving:!0,Time:!0,'magic"':!0},"SELECT\n      CONVERT(DATETIME2(0), '2020-01-01T18:00:00') AT TIME ZONE 'Central Standard Time' AS CST /* Output: 2020-01-01 18:00:00 -06:00 */\n    , CONVERT(DATETIME2(0), '2020-07-01T18:00:00') AT TIME ZONE 'Central Standard Time' AS CDT /* Output: 2020-07-01 18:00:00 -05:00 */\n")),(0,i.kt)("p",null,"In the above snippet, we ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-conversion-functions#convert"},(0,i.kt)("inlineCode",{parentName:"a"},"CONVERT"))," the dates to datetime without offset. Then the ",(0,i.kt)("inlineCode",{parentName:"p"},"AT TIME ZONE")," function adds the offset and calculates the Daylight Saving Time offset change for you."),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Not all available ",(0,i.kt)("a",{parentName:"p",href:"#available-timezones"},"timezones")," observe Daylight Saving Time. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"Central Standard Time")," observes DST, while ",(0,i.kt)("inlineCode",{parentName:"p"},"Central America Standard Time")," does not. Always double-check the behaviour of the timezone you are selecting for your query.")),(0,i.kt)("h3",{id:"at-time-zone-vs-todatetimeoffset"},"AT TIME ZONE vs TODATETIMEOFFSET"),(0,i.kt)("p",null,"As astonishing as it might seem, taking Daylight Saving Time into consideration is a problem when working with Salesforce Marketing Cloud system dates (including the ",(0,i.kt)("a",{parentName:"p",href:"#getdate--getutcdate"},(0,i.kt)("inlineCode",{parentName:"a"},"GETDATE")),")."),(0,i.kt)("p",null,"Salesforce Marketing Cloud uses Central Standard Time (UTC-6) ",(0,i.kt)("strong",{parentName:"p"},"without")," changes between standard and daylight savings time. It means that ",(0,i.kt)("inlineCode",{parentName:"p"},"AT TIME ZONE"),"'s excellent feature is working against us."),(0,i.kt)("p",null,"There are, however, two workarounds:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Central America Standard Time"),". It is a CST-like timezone that stays at the same offset for the whole year.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="No Daylight Saving Time magic"',title:'"No',Daylight:!0,Saving:!0,Time:!0,'magic"':!0},"SELECT\n      CONVERT(DATETIME2(0), '2020-01-01T18:00:00') AT TIME ZONE 'Central America Standard Time' AS CST     /* Output: 2020-01-01 18:00:00 -06:00 */\n    , CONVERT(DATETIME2(0), '2020-07-01T18:00:00') AT TIME ZONE 'Central America Standard Time' AS AlsoCST  /* Output: 2020-07-01 18:00:00 -06:00 */\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"TODATETIMEOFFSET"),". It is a simplified version of the ",(0,i.kt)("inlineCode",{parentName:"li"},"AT TIME ZONE")," that adds arbitrary offset without any logic on Daylight Saving Time. Just as we would like for the SFMC system dates.")),(0,i.kt)("p",null,"To use it, provide a datetime and an offset (for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"'-06:00'")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"'+01:00'"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="No Daylight Saving Time magic"',title:'"No',Daylight:!0,Saving:!0,Time:!0,'magic"':!0},"SELECT\n      TODATETIMEOFFSET(CONVERT(DATETIME2(0), '2020-01-01T18:00:00'), '-06:00') AS CST     /* Output: 2020-01-01 18:00:00 -06:00 */\n    , TODATETIMEOFFSET(CONVERT(DATETIME2(0), '2020-07-01T18:00:00'), '-06:00') AS AlsoCST  /* Output: 2020-07-01 18:00:00 -06:00 */\n")),(0,i.kt)("p",null,"Of course, for any datetime values that include the Daylight Saving Time - pushed from a website or your data warehouse - ",(0,i.kt)("a",{parentName:"p",href:"#add-offset-with-at-time-zone"},(0,i.kt)("inlineCode",{parentName:"a"},"AT TIME ZONE"))," will be the better solution."),(0,i.kt)("h3",{id:"change-timezone-with-at-time-zone"},"Change timezone with AT TIME ZONE"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AT TIME ZONE")," is useful also for changing the timezone of a datetime with offset."),(0,i.kt)("p",null,"You use it as previously - by providing the original datetime and the target timezone. But because the first argument already contains the offset, the function will convert the time to a new timezone in this scenario."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Change CST datetime with offset to CET"',title:'"Change',CST:!0,datetime:!0,with:!0,offset:!0,to:!0,'CET"':!0},"SELECT CONVERT(DATETIMEOFFSET(0), '2018-01-01 18:00:00 -06:00') AT TIME ZONE 'Central European Standard Time' AS CSTtoCET /* Output: 2020-01-02 01:00:00 +01:00 */\n")),(0,i.kt)("p",null,"It will also automatically consider any differences between Daylight Saving Time start and end times for each timezone."),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You can leverage both features of the ",(0,i.kt)("inlineCode",{parentName:"p"},"AT THE TIMEZONE")," in one line to apply the timezone to offset-less datetime and convert it to another timezone by using the function twice:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="First, apply the timezone. Then change the timezone"',title:'"First,',apply:!0,the:!0,"timezone.":!0,Then:!0,change:!0,'timezone"':!0},"SELECT CONVERT(DATETIME2(0), '2020-01-01T18:00:00') AT TIME ZONE 'Central Standard Time' AT TIME ZONE 'Central European Standard Time' AS DateToCSTtoCET, /* Output: 2020-01-02 01:00:00 +01:00 */\n")),(0,i.kt)("p",{parentName:"admonition"},"It works because the function's first execution ",(0,i.kt)("a",{parentName:"p",href:"#add-offset-with-at-time-zone"},"adds the offset with ",(0,i.kt)("inlineCode",{parentName:"a"},"AT TIME ZONE")),". The second uses the output with an offset applied and ",(0,i.kt)("a",{parentName:"p",href:"#change-timezone-with-at-time-zone"},"change the timezone"),"."),(0,i.kt)("p",{parentName:"admonition"},"Of course, for Salesforce Marketing Cloud system dates, we still need either of the ",(0,i.kt)("a",{parentName:"p",href:"#at-time-zone-vs-todatetimeoffset"},"workarounds"),":"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="No Daylight Saving Time magic but still changing the timezone"',title:'"No',Daylight:!0,Saving:!0,Time:!0,magic:!0,but:!0,still:!0,changing:!0,the:!0,'timezone"':!0},"SELECT\n      GETDATE() AT TIME ZONE 'Central America Standard Time' AT TIME ZONE 'Central European Standard Time' AS SystemDateToCSTtoCET_v1\n    , TODATETIMEOFFSET(GETDATE(), '-06:00') AT TIME ZONE 'Central European Standard Time' AS SystemDateToCSTtoCET_v2\n"))),(0,i.kt)("h3",{id:"available-timezones"},"Available timezones"),(0,i.kt)("p",null,"You can choose from 140 available timezones:\n",(0,i.kt)("inlineCode",{parentName:"p"},"Dateline Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC-11"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Aleutian Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Hawaiian Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Marquesas Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Alaskan Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC-09"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Pacific Standard Time (Mexico)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC-08"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Pacific Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"US Mountain Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Mountain Standard Time (Mexico)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Mountain Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Central America Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Central Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Easter Island Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Central Standard Time (Mexico)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Canada Central Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SA Pacific Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Eastern Standard Time (Mexico)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Eastern Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Haiti Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Cuba Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"US Eastern Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Paraguay Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Atlantic Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Venezuela Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Central Brazilian Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SA Western Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Pacific SA Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Turks And Caicos Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Newfoundland Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Tocantins Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"E. South America Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SA Eastern Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Argentina Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Greenland Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Montevideo Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Magallanes Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Saint Pierre Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Bahia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC-02"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Mid-Atlantic Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Azores Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Cape Verde Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Morocco Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GMT Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Greenwich Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"W. Europe Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Central Europe Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Romance Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Central European Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"W. Central Africa Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Namibia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Jordan Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GTB Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Middle East Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Egypt Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"E. Europe Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Syria Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"West Bank Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"South Africa Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"FLE Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Israel Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Kaliningrad Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Libya Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Arabic Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Turkey Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Arab Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Belarus Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Russian Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"E. Africa Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Iran Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Arabian Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Astrakhan Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Azerbaijan Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Russia Time Zone 3"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Mauritius Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Saratov Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Georgian Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Caucasus Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Afghanistan Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"West Asia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Ekaterinburg Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Pakistan Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"India Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Sri Lanka Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Nepal Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Central Asia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Bangladesh Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Omsk Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Myanmar Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SE Asia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Altai Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"W. Mongolia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"North Asia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"N. Central Asia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Tomsk Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"China Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"North Asia East Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Singapore Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"W. Australia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Taipei Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Ulaanbaatar Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"North Korea Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Aus Central W. Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Transbaikal Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Tokyo Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Korea Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Yakutsk Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Cen. Australia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AUS Central Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"E. Australia Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AUS Eastern Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"West Pacific Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Tasmania Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Vladivostok Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Lord Howe Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Bougainville Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Russia Time Zone 10"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Magadan Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Norfolk Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Sakhalin Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Central Pacific Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Russia Time Zone 11"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"New Zealand Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC+12"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Fiji Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Kamchatka Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Chatham Islands Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC+13"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Tonga Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Samoa Standard Time"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Line Islands Standard Time"),"."),(0,i.kt)("p",null,"Don't worry about Daylight Saving Time names - ",(0,i.kt)("inlineCode",{parentName:"p"},"AT TIME ZONE")," use the Standard ones and will take care of DST."),(0,i.kt)("h2",{id:"format-with-dates"},"FORMAT with Dates"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"FORMAT")," works only with datetime and numeric values, outputs a string and requires:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Value to be formatted (can be a column, string or a function)"),(0,i.kt)("li",{parentName:"ol"},"Format specifier to be applied"),(0,i.kt)("li",{parentName:"ol"},"Optionally - ISO culture code")),(0,i.kt)("p",null,"It is a perfect tool to manipulate any dates (or date-like strings with the help of ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-conversion-functions"},"conversion"),") available in your Data Extensions. For personalization. For comparison between system and imported dates outside of the query. For preparing data to export it to an external system with specific format requirements."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Instead of creating complex AMPScript logic to adapt dates, format them"',title:'"Instead',of:!0,creating:!0,complex:!0,AMPScript:!0,logic:!0,to:!0,adapt:!0,"dates,":!0,format:!0,'them"':!0},"SELECT\n      FORMAT(CONVERT(DATE, '10/30/2020'), 'd', 'en-GB') AS DateOrderedProperly\n    , FORMAT(GETUTCDATE(), 'dd/MM/yyyy')                AS TodayCustomFormat\n    , FORMAT(DateJoined, 'D', 'de-DE')                  AS DateExpandedIndian\n")),(0,i.kt)("p",null,"In the example above, the first two ",(0,i.kt)("inlineCode",{parentName:"p"},"FORMAT")," functions return the date in the same format - ",(0,i.kt)("inlineCode",{parentName:"p"},"30/10/2020")," - one by using manually provided value, another by taking the current UTC date from the function."),(0,i.kt)("p",null,"The last line outputs ",(0,i.kt)("inlineCode",{parentName:"p"},"Freitag, 7. Februar 2020"),". Neat for running it with ",(0,i.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-case#conditional-values-with-case"},(0,i.kt)("inlineCode",{parentName:"a"},"CASE"))," to change your short date into an extended date personalized on user language."),(0,i.kt)("h3",{id:"standard-date-formats"},"Standard date formats"),(0,i.kt)("p",null,"Above, you have seen three different format specifiers used to manipulate the date, but many more are available. You can find the most useful below:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Format specifier"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Example (for US culture)"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'d'"),(0,i.kt)("td",{parentName:"tr",align:null},"Short date"),(0,i.kt)("td",{parentName:"tr",align:null},"10/30/2020")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'D'"),(0,i.kt)("td",{parentName:"tr",align:null},"Long date"),(0,i.kt)("td",{parentName:"tr",align:null},"Friday, October 30, 2020")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'m'/'M'"),(0,i.kt)("td",{parentName:"tr",align:null},"Month Day"),(0,i.kt)("td",{parentName:"tr",align:null},"October 30")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'y'/'Y'"),(0,i.kt)("td",{parentName:"tr",align:null},"Year Month"),(0,i.kt)("td",{parentName:"tr",align:null},"October 2020")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'t'"),(0,i.kt)("td",{parentName:"tr",align:null},"Short time"),(0,i.kt)("td",{parentName:"tr",align:null},"2:15 PM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'T'"),(0,i.kt)("td",{parentName:"tr",align:null},"Long time"),(0,i.kt)("td",{parentName:"tr",align:null},"2:15:30 PM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'g'"),(0,i.kt)("td",{parentName:"tr",align:null},"General short time"),(0,i.kt)("td",{parentName:"tr",align:null},"10/30/2020 2:15 PM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'G'"),(0,i.kt)("td",{parentName:"tr",align:null},"General long time"),(0,i.kt)("td",{parentName:"tr",align:null},"10/30/2020 2:15:30 PM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'f'"),(0,i.kt)("td",{parentName:"tr",align:null},"Full short time"),(0,i.kt)("td",{parentName:"tr",align:null},"Friday, October 30, 2020 2:15 PM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'F'"),(0,i.kt)("td",{parentName:"tr",align:null},"Full long time"),(0,i.kt)("td",{parentName:"tr",align:null},"Friday, October 30, 2020 2:15:30 PM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'r'/'R'"),(0,i.kt)("td",{parentName:"tr",align:null},"RFC1123"),(0,i.kt)("td",{parentName:"tr",align:null},"Fri, 30 Oct 2020 14:15:30 GMT")))),(0,i.kt)("p",null,"As highlighted in the table header - the examples are for the SFMC default US culture formating. If you add a specific culture code as a third parameter, the outcome will be different, as various countries have different defaults of elements order and separator style."),(0,i.kt)("p",null,"You can find the complete list of standard date format specifiers on ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings"},"Microsoft .Net Doc Pages"),"."),(0,i.kt)("h3",{id:"custom-date-formats"},"Custom date formats"),(0,i.kt)("p",null,"Of course, you are not limited to the formats shown above. Whenever you want something different, you can create a custom format by just providing a full pattern instead of a short specifier by using those elements:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Format specifier"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Example (for US culture)"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'d'"),(0,i.kt)("td",{parentName:"tr",align:null},"Day of the month"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'dd'"),(0,i.kt)("td",{parentName:"tr",align:null},"Zero-based day of the month"),(0,i.kt)("td",{parentName:"tr",align:null},"01")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'ddd'"),(0,i.kt)("td",{parentName:"tr",align:null},"Abbreviated day of the month"),(0,i.kt)("td",{parentName:"tr",align:null},"Mon")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'dddd'"),(0,i.kt)("td",{parentName:"tr",align:null},"Full day of the month"),(0,i.kt)("td",{parentName:"tr",align:null},"Monday")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'M'"),(0,i.kt)("td",{parentName:"tr",align:null},"Month"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'MM'"),(0,i.kt)("td",{parentName:"tr",align:null},"Zero-based month"),(0,i.kt)("td",{parentName:"tr",align:null},"01")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'MMM'"),(0,i.kt)("td",{parentName:"tr",align:null},"Abbreviated month"),(0,i.kt)("td",{parentName:"tr",align:null},"Jan")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'MMMM'"),(0,i.kt)("td",{parentName:"tr",align:null},"Full month"),(0,i.kt)("td",{parentName:"tr",align:null},"January")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'yy'"),(0,i.kt)("td",{parentName:"tr",align:null},"Last two digits of the year"),(0,i.kt)("td",{parentName:"tr",align:null},"20")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'yyyy'"),(0,i.kt)("td",{parentName:"tr",align:null},"Four digits year"),(0,i.kt)("td",{parentName:"tr",align:null},"2020")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'h'"),(0,i.kt)("td",{parentName:"tr",align:null},"Hour (12-hour clock)"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'hh'"),(0,i.kt)("td",{parentName:"tr",align:null},"Zero-based hour (12-hour clock)"),(0,i.kt)("td",{parentName:"tr",align:null},"01")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'tt'"),(0,i.kt)("td",{parentName:"tr",align:null},"AM/PM designator"),(0,i.kt)("td",{parentName:"tr",align:null},"AM")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'H'"),(0,i.kt)("td",{parentName:"tr",align:null},"Hour (24-hour clock)"),(0,i.kt)("td",{parentName:"tr",align:null},"13")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'HH'"),(0,i.kt)("td",{parentName:"tr",align:null},"Zero-based hour (24-hour clock)"),(0,i.kt)("td",{parentName:"tr",align:null},"01")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'m'"),(0,i.kt)("td",{parentName:"tr",align:null},"Minute"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'mm'"),(0,i.kt)("td",{parentName:"tr",align:null},"Zero-based minute"),(0,i.kt)("td",{parentName:"tr",align:null},"01")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'s'"),(0,i.kt)("td",{parentName:"tr",align:null},"Seconds"),(0,i.kt)("td",{parentName:"tr",align:null},"1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'ss'"),(0,i.kt)("td",{parentName:"tr",align:null},"Zero-based seconds"),(0,i.kt)("td",{parentName:"tr",align:null},"01")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"':'"),(0,i.kt)("td",{parentName:"tr",align:null},"Time separator"),(0,i.kt)("td",{parentName:"tr",align:null},"':'")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"'/'"),(0,i.kt)("td",{parentName:"tr",align:null},"Date separator"),(0,i.kt)("td",{parentName:"tr",align:null},"'/'")))),(0,i.kt)("p",null,"Again, the examples are for the default US culture formatting and might look different for different cultures (for example, the hour separator might be changed automatically to ",(0,i.kt)("inlineCode",{parentName:"p"},".")," for Italy)."),(0,i.kt)("p",null,"You can use the above format specifiers to obtain the exact format needed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT FORMAT(GETUTCDATE(), 'dddd (dd MMMM yyyy) - HH:mm', 'en-GB') AS FormattedDate\n")),(0,i.kt)("p",null,"The above query will return ",(0,i.kt)("inlineCode",{parentName:"p"},"Saturday (30 October 2020) - 02:15"),"."),(0,i.kt)("p",null,"You can find the complete list of custom date format specifiers on ",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings"},"Microsoft .Net Doc Pages"),"."),(0,i.kt)("admonition",{title:"You Should Know",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"AMPScript uses very similar custom formatting with ",(0,i.kt)("inlineCode",{parentName:"p"},"FORMAT()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"FORMATDATE()")," functions. Depending on the use case, consider whether you want to manipulate the date visual representation in the Data Extension or only in the communication.")))}u.isMDXComponent=!0}}]);