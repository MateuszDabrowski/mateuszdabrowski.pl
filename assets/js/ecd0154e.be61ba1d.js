"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[9304],{25579:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"js/js-dom","title":"JS Document Object Model","description":"Explore, traverse and modify web pages with the power of JavaScript DOM properties and methods.","source":"@site/docs/js/js-dom.mdx","sourceDirName":"js","slug":"/js/js-dom","permalink":"/docs/js/js-dom","draft":false,"unlisted":false,"editUrl":"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/js/js-dom.mdx","tags":[{"inline":true,"label":"JavaScript","permalink":"/docs/tags/java-script"},{"inline":true,"label":"Cloud Page","permalink":"/docs/tags/cloud-page"},{"inline":true,"label":"Personalisation","permalink":"/docs/tags/personalisation"}],"version":"current","lastUpdatedBy":"Mateusz D\u0105browski","lastUpdatedAt":1756767167000,"frontMatter":{"id":"js-dom","title":"JS Document Object Model","sidebar_label":"DOM","description":"Explore, traverse and modify web pages with the power of JavaScript DOM properties and methods.","image":"img/og/og-image-js-dom.png","tags":["JavaScript","Cloud Page","Personalisation"]},"sidebar":"docs","previous":{"title":"Loops","permalink":"/docs/js/js-loops"},"next":{"title":"\u203a JS Snippets","permalink":"/docs/category/javascript/snippets"}}');var i=n(74848),l=n(28453),r=n(46748);const o={id:"js-dom",title:"JS Document Object Model",sidebar_label:"DOM",description:"Explore, traverse and modify web pages with the power of JavaScript DOM properties and methods.",image:"img/og/og-image-js-dom.png",tags:["JavaScript","Cloud Page","Personalisation"]},a=void 0,c={},d=[{value:"What is Document Object Model?",id:"what-is-document-object-model",level:2},{value:"Accessing the DOM",id:"accessing-the-dom",level:2},{value:"Should you use getElement or querySelector?",id:"should-you-use-getelement-or-queryselector",level:3},{value:"Exploring the DOM",id:"exploring-the-dom",level:2},{value:"attributes",id:"attributes",level:3},{value:"classList and className",id:"classlist-and-classname",level:3},{value:"id and tagName",id:"id-and-tagname",level:3},{value:"innerText and innerHTML",id:"innertext-and-innerhtml",level:3},{value:"hidden and style",id:"hidden-and-style",level:3},{value:"Traversing the DOM",id:"traversing-the-dom",level:2},{value:"parentElement",id:"parentelement",level:3},{value:"previousElementSibling and nextElementSibling",id:"previouselementsibling-and-nextelementsibling",level:3},{value:"All things children",id:"all-things-children",level:3},{value:"The power of DOM traversing",id:"the-power-of-dom-traversing",level:3},{value:"Manipulating the DOM",id:"manipulating-the-dom",level:2},{value:"addEventListener",id:"addeventlistener",level:3},{value:"Event types",id:"event-types",level:4},{value:"click",id:"click",level:5},{value:"submit",id:"submit",level:5},{value:"focus &amp; blur",id:"focus--blur",level:5},{value:"mouseenter &amp; mouseleave",id:"mouseenter--mouseleave",level:5},{value:"Changing attributes",id:"changing-attributes",level:3},{value:"Marketing Cloud Use Cases",id:"marketing-cloud-use-cases",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.U,{content:"Explore, traverse and modify web pages with the power of JavaScript DOM properties and methods."}),"\n",(0,i.jsx)(t.h2,{id:"what-is-document-object-model",children:"What is Document Object Model?"}),"\n",(0,i.jsx)(t.p,{children:"The Document Object Model (DOM) represents the structure of a web document and serves as its programming interface. In simpler words, it lets JavaScript talk with the HTML of the page. And that is huge, especially in the Marketing Automation world."}),"\n",(0,i.jsx)(t.p,{children:"Why? Because it lets you manipulate your website in many ways - visible and not. Dynamic forms adapting to user actions, pages changing in real-time and enhanced data capture. All that (and so much more) is possible thanks to DOM access. So let's dive into details."}),"\n",(0,i.jsx)(t.h2,{id:"accessing-the-dom",children:"Accessing the DOM"}),"\n",(0,i.jsxs)(t.p,{children:["To start working with Document Object Model in JavaScript, you need to use one of the special objects - ",(0,i.jsx)(t.code,{children:"window"})," (browser tab) or ",(0,i.jsx)(t.code,{children:"document"})," (page within that tab). Each of those objects offers many methods that let you interact with a webpage."]}),"\n",(0,i.jsxs)(t.p,{children:["JavaScript lets you capture specific parts of your website and make them accessible for all your scripting needs with the help of ",(0,i.jsx)(t.code,{children:"document"})," object methods:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"getElementById"}),": returns an element with matching id attribute (for example, elemnt with ",(0,i.jsx)(t.code,{children:'id="emailAddressField"'})," using ",(0,i.jsx)(t.code,{children:"document.getElementById('emailAddressField')"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"getElementsByTagName"}),": returns a collection of matching HTML tags (for example, all ",(0,i.jsx)(t.code,{children:"<p>"})," tags using ",(0,i.jsx)(t.code,{children:"document.getElementByTagName('p')"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"getElementsByName"}),": returns a collection of elements with matching name attribute (for example, all inputs with ",(0,i.jsx)(t.code,{children:'name="email"'})," using ",(0,i.jsx)(t.code,{children:"document.getElementByName('email')"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"getElementsByClassName"}),": returns a collection of elements with matching class attribute (for example, all elements with ",(0,i.jsx)(t.code,{children:'class="hiddenContent"'})," using ",(0,i.jsx)(t.code,{children:"document.getElementByClassName('hiddenContent')"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"querySelector"}),": returns an element with a matching CSS3 selector (for example, ",(0,i.jsx)(t.code,{children:"<h2>"})," element that is within ",(0,i.jsx)(t.code,{children:'<p class="hiddenContent">'})," using ",(0,i.jsx)(t.code,{children:"document.querySelector(p.hiddenContent h2')"})," - notice the ",(0,i.jsx)(t.code,{children:"."})," prefix for a class). If there are multiple matching elements - it will return the first one."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"querySelectorAll"}),": returns a collection of elements matching CSS3 selector (for example, all ",(0,i.jsx)(t.code,{children:"<tr>"})," elements that are within elements with ",(0,i.jsx)(t.code,{children:'class=".DataCell"'})," that are within an element with ",(0,i.jsx)(t.code,{children:'id="attributes-repeater"'})," using ",(0,i.jsx)(t.code,{children:"document.querySelectorAll('#attributes-repeater .DataCell tr')"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"querySelector"})," and ",(0,i.jsx)(t.code,{children:"querySelectorAll"})," allow you to select elements using the power of CSS3. It means that you can go really specific with the proper syntax."]}),(0,i.jsx)(t.p,{children:"You can select:"}),(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Tag by its name: ",(0,i.jsx)(t.code,{children:"document.querySelector('body')"})]}),"\n",(0,i.jsxs)(t.li,{children:["Id with ",(0,i.jsx)(t.code,{children:"#"})," prefix: ",(0,i.jsx)(t.code,{children:"document.querySelector('#idName')"})]}),"\n",(0,i.jsxs)(t.li,{children:["Class with ",(0,i.jsx)(t.code,{children:"."})," prefix: ",(0,i.jsx)(t.code,{children:"document.querySelector('.className')"})]}),"\n",(0,i.jsxs)(t.li,{children:["Tag with specific class by chaining: ",(0,i.jsx)(t.code,{children:"document.querySelector('div.className')"})]}),"\n",(0,i.jsxs)(t.li,{children:["Element with two classes: ",(0,i.jsx)(t.code,{children:"document.querySelector('.className1.className2')"})," (notice lack of space between classes)"]}),"\n",(0,i.jsxs)(t.li,{children:["Element that is direct child of another element: ",(0,i.jsx)(t.code,{children:"document.querySelector('div > h2')"})," (notice the ",(0,i.jsx)(t.code,{children:">"})," symbol between tags)"]}),"\n",(0,i.jsxs)(t.li,{children:["Element that is any child another element: ",(0,i.jsx)(t.code,{children:"document.querySelector('div h2')"})]}),"\n",(0,i.jsxs)(t.li,{children:["Element that is any sibling (has the same parent): ",(0,i.jsx)(t.code,{children:"document.querySelector('p.className ~ h2')"})," (this will capture ",(0,i.jsx)(t.code,{children:"h2"})," that is under the same parent as ",(0,i.jsx)(t.code,{children:"p.className"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:["Element that is adjecent sibling (has the same parent): ",(0,i.jsx)(t.code,{children:"document.querySelector('p.className + h2')"})," (this will capture ",(0,i.jsx)(t.code,{children:"h2"})," that is under the same parent as ",(0,i.jsx)(t.code,{children:"p.className"})," and after that paragraph)"]}),"\n",(0,i.jsxs)(t.li,{children:["Element with specific attribute: ",(0,i.jsx)(t.code,{children:"document.querySelector('[href]')"})]}),"\n",(0,i.jsxs)(t.li,{children:["Element with specific value of attribute: ",(0,i.jsx)(t.code,{children:"document.querySelector('input[type=\"checkbox\"]')"})]}),"\n",(0,i.jsxs)(t.li,{children:["One of the listed elements: ",(0,i.jsx)(t.code,{children:"document.querySelector('ul, ol')"})]}),"\n",(0,i.jsxs)(t.li,{children:["All of the listed elements: ",(0,i.jsx)(t.code,{children:"document.querySelectorAll('ul, ol')"})]}),"\n",(0,i.jsxs)(t.li,{children:["Elements targetet by ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes",children:"pseudo-class"}),": ",(0,i.jsx)(t.code,{children:"document.querySelectorAll('a:visited')"})]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements",children:"Pseudo-element"}),": ",(0,i.jsx)(t.code,{children:"document.querySelectorAll('h1::first-letter')"})]}),"\n",(0,i.jsxs)(t.li,{children:["Element with negated selection: ",(0,i.jsx)(t.code,{children:"document.querySelector('.className:not(div)')"})]}),"\n"]}),(0,i.jsx)(t.p,{children:"Sky is the limit, especially as you can chain all of the above into super query:"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('#content > article > div:nth-child(20) a:nth-child(1) > code');\n"})}),(0,i.jsx)(t.p,{children:"However, whenever possible, optimise. Either by finding a better way to select the element or by adding an easily selectable attribute to that element in the page HTML."})]}),"\n",(0,i.jsx)(t.p,{children:"As you can see, there are many options you can leverage."}),"\n",(0,i.jsx)(t.h3,{id:"should-you-use-getelement-or-queryselector",children:"Should you use getElement or querySelector?"}),"\n",(0,i.jsxs)(t.p,{children:["It depends on the purpose. The rule of thumb is that if one of the ",(0,i.jsx)(t.code,{children:"getElement"})," selectors can do the job, it's a better choice performance-wise (the longer HTML, the bigger difference). However, for complex selections, the newer ",(0,i.jsx)(t.code,{children:"querySelector"})," family might be better or the only possible choice."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Good use cases for the querySelector family"',children:"// Instead of using three getElement selectors (that wouldn't even work in this example, more on that in the next paragraph)\ndocument.getElementById('attributes-repeater').getElementsByClassName('DataCell').getElementsByTagName('tr');\n// you should use a single querySelectorAll selector\ndocument.querySelectorAll('#attributes-repeater .DataCell tr');\n\n// There are also cases where querySelector is the only choice\ndocument.querySelectorAll('input[type=\"checkbox\"]');\n"})}),"\n",(0,i.jsxs)(t.p,{children:["As always, the devil lies in the details. While chained ",(0,i.jsx)(t.code,{children:"getElement"})," selectors will have better performance than clean ",(0,i.jsx)(t.code,{children:"querySelector"}),", there are three issues with the former:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Readability: after two or three chained selectors, the ",(0,i.jsx)(t.code,{children:"getElement"})," chain gets really hard to read and debug; the natural CSS3 style of ",(0,i.jsx)(t.code,{children:"querySelector"})," is straightforward."]}),"\n",(0,i.jsxs)(t.li,{children:["Flexibility: you can only chain ",(0,i.jsx)(t.code,{children:"getElements"})," on single element. Refering to the previous code sample, while the ",(0,i.jsx)(t.code,{children:".getElementsByClassName('DataCell')"})," called on single outcome of ",(0,i.jsx)(t.code,{children:".getElementById('attributes-repeater')"})," works, the collection it will return would crash the ",(0,i.jsx)(t.code,{children:".getElementsByTagName('tr')"})," as the chaining works only on single element scope."]}),"\n",(0,i.jsxs)(t.li,{children:["Loopability: outcomes of ",(0,i.jsx)(t.code,{children:"getElements"})," selection cannot be looped using ",(0,i.jsx)(t.a,{href:"/docs/js/js-loops#foreach",children:(0,i.jsx)(t.code,{children:"forEach()"})}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["My approach is to use the more flexible and readable ",(0,i.jsx)(t.code,{children:"querySelector"})," whenever performance is not a dealbreaker and switch where possible to the ",(0,i.jsx)(t.code,{children:"getElement"})," toolset for use cases where the performance is crucial."]}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsx)(t.p,{children:"You can assign your DOM selection to a variable. It allows you to reuse it in multiple places of your script and lets you limit the scope of the selection."}),(0,i.jsxs)(t.p,{children:["You can do the latter by replacing the ",(0,i.jsx)(t.code,{children:"document"})," object with your variable - it will look for matching DOM elements only within the outcome of the previous selection."]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const form = document.querySelector('form');\nconst divsInForm = form.querySelectorAll('div.legalNotice'); // Returns only div tags with legalNotice class that are within your form\n"})}),(0,i.jsx)(t.p,{children:"It works like chaining selectors and with the same limitation - you can chain only if the previous outcome is a single element."}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"/* \u2705 Chain from a single element to a collection - same outcome as previous code snippet */\ndocument.querySelector('form').querySelectorAll('div.legalNotice');\n\n/* \u274c Chain from a collection to a collection - will throw TypeError */\ndocument.querySelectorAll('form').querySelectorAll('div.legalNotice');\n\n/* \u2705 Chain from a single element (thanks to index) to a collection */\ndocument.querySelectorAll('form')[0].querySelectorAll('div.legalNotice');\n\n/* Of course, in real scenario, you should use a compound selector for the same result */\ndocument.querySelectorAll('form div.legalNotice');\n"})})]}),"\n",(0,i.jsxs)(t.p,{children:["Selecting elements is just the beginning. Once you pick them, you can ",(0,i.jsx)(t.a,{href:"#exploring-the-dom",children:"explore"}),", ",(0,i.jsx)(t.a,{href:"#traversing-the-dom",children:"traverse"})," and ",(0,i.jsx)(t.a,{href:"#manipulating-the-dom",children:"manipulate"})," the DOM. You can check what is available for the selected element with ",(0,i.jsx)(t.code,{children:"console.dir(selectedElement)"})," in the developer console."]}),"\n",(0,i.jsx)(t.h2,{id:"exploring-the-dom",children:"Exploring the DOM"}),"\n",(0,i.jsxs)(t.p,{children:["Once you select a page element, you can learn more about it, thanks to properties. There is a ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Element%5D",children:"long list"})," of available features, so let's focus on the ones most useful in marketing automation and real-time personalisation world."]}),"\n",(0,i.jsx)(t.h3,{id:"attributes",children:"attributes"}),"\n",(0,i.jsxs)(t.p,{children:["With ",(0,i.jsx)(t.code,{children:".attributes"})," property you can list all HTML attributes on selected element in a NamedNodeMap. What is more, you can drill down on those details to get specific values:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"/* <main id=\"content\" class=\"main-content\" role=\"main\">\u2026</main> */\ndocument.querySelector('#content').attributes;              // returns a Map with id, class and role\ndocument.querySelector('#content').attributes.class.value;  // returns 'main-content'\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can also list the names of all available attributes using ",(0,i.jsx)(t.code,{children:".getAttributesNames()"}),". With ",(0,i.jsx)(t.code,{children:"getAttrubute()"})," method you can pull a value of a specific attribute. Finally, there is a pair of condition checking methods: ",(0,i.jsx)(t.code,{children:"hasAttributes()"})," that checks whether the selected element has any attribute and ",(0,i.jsx)(t.code,{children:"hasAttribute()"})," that tells you if the selected element has a specified attribute."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"/* <main id=\"content\" class=\"main-content\" role=\"main\">\u2026</main> */\ndocument.querySelector('#content').getAttributesNames();    // returns ['id', 'class', 'role']\ndocument.querySelector('#content').getAttribute('role');    // returns 'main'\ndocument.querySelector('#content').hasAttributes();         // returns true\ndocument.querySelector('#content').hasAttribute('role');    // returns true\n"})}),"\n",(0,i.jsx)(t.p,{children:"Those methods are helpful for non-standard attributes that don't have a dedicated shorthand."}),"\n",(0,i.jsx)(t.h3,{id:"classlist-and-classname",children:"classList and className"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:".classList"})," property lets you directly list all classes assigned to the selected element (in the form of DOMTokenList). It is excellent when you want to ",(0,i.jsx)(t.a,{href:"/docs/js/js-loops",children:"loop"})," through to find a specific class or ",(0,i.jsx)(t.a,{href:"#manipulating-the-dom",children:"manipulate the DOM"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["On the other hand, when you want to do a simple ",(0,i.jsx)(t.a,{href:"/docs/js/js-if-and-switch",children:"check or condition"}),", ",(0,i.jsx)(t.code,{children:".className"})," is a great shorthand returning all classes as a string."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"/* <div class=\"page-wrapper category-api document-page\">\u2026</div> */\ndocument.querySelector('div.page-wrapper').classList;                           // returns an object with all the classes, length and value\ndocument.querySelector('div.page-wrapper').classList.contains('document-page'); // returns true\ndocument.querySelector('div.page-wrapper').classList.value;                     // returns 'page-wrapper category-api document-page'\ndocument.querySelector('div.page-wrapper').className;                           // shorthand of the previous, returns 'page-wrapper category-api document-page'\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:".classList"})," property is the bread and butter of page manipulation, as it allows you to add, remove, replace and toggle classes on an element. Think of hiding and displaying elements, changing the styles and other dynamic scenarios. More on that, in the ",(0,i.jsx)(t.a,{href:"#changing-attributes",children:"changing attributes"})," section."]}),"\n",(0,i.jsx)(t.h3,{id:"id-and-tagname",children:"id and tagName"}),"\n",(0,i.jsxs)(t.p,{children:["Similarly to class-related properties, ",(0,i.jsx)(t.code,{children:".id"})," property returns the value of the id attribute and ",(0,i.jsx)(t.code,{children:".tagName"})," property outputs the selected tag's name."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"/* <main id=\"content\" class=\"main-content\" role=\"main\">\u2026</main> */\ndocument.querySelector('.main-content').id;      // returns 'content'\ndocument.querySelector('.main-content').tagName; // returns 'main'\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Those two are less frequently used and mostly have some value when ",(0,i.jsx)(t.a,{href:"#traversing-the-dom",children:"travelling through the DOM"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"innertext-and-innerhtml",children:"innerText and innerHTML"}),"\n",(0,i.jsxs)(t.p,{children:["Another extremely important properties are ",(0,i.jsx)(t.code,{children:".innerText"})," and ",(0,i.jsx)(t.code,{children:".innerHTML"}),". They allow you to look into what is within the selected element."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:".innerText"})," returns a plain text version of element content (including all child tags). Think copy-pasting fragment of the page into a chat."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Example output for the header of this section"',children:"document.querySelector('#innertext-and-innerhtml').innerText;\n// returns \".innerText and .innerHTML\"\n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:".innerHTML"}),", on the other hand, will return a full-blown HTML code of the selected element (including all child tags within). However, keep in mind that it will be the rendered HTML, not the original HTML (so the version adapted to your screen, your device, your context)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Example output for the header of this section"',children:'document.querySelector(\'#innertext-and-innerhtml\').innerHTML;\n// returns ".innerText and .innerHTML<a class=\\"hash-link\\" href=\\"#innertext-and-innerhtml\\" title=\\"Direct link to heading\\"></a>"\n'})}),"\n",(0,i.jsxs)(t.p,{children:["While those are already useful for exploration,they shine when you want to ",(0,i.jsx)(t.a,{href:"#changing-attributes",children:"manipulate your page"}),". More on that later."]}),"\n",(0,i.jsx)(t.h3,{id:"hidden-and-style",children:"hidden and style"}),"\n",(0,i.jsxs)(t.p,{children:["Finally, there are landing page must-haves: ",(0,i.jsx)(t.code,{children:".hidden"})," and ",(0,i.jsx)(t.code,{children:".style"}),". Those two properties describe the CSS of the selected element."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:".hidden"})," is straightforward. It returns a boolean telling you whether the element is hidden from the frontend of the page."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:".style"})," is much deeper, as it returns an object with all possible ",(0,i.jsx)(t.strong,{children:"inline"})," CSS declarations for the element. You can then drill down to return a value of a specific declaration."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Example output for header of this section"',children:"document.querySelector('#hidden-and-style').hidden;         // returns false\ndocument.querySelector('#hidden-and-style').style.display;  // returns ''\n"})}),"\n",(0,i.jsxs)(t.p,{children:["As with properties mentioned previously, ",(0,i.jsx)(t.code,{children:".style"})," and ",(0,i.jsx)(t.code,{children:".hidden"})," truly shine when ",(0,i.jsx)(t.a,{href:"#changing-attributes",children:"manipulating the DOM"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"traversing-the-dom",children:"Traversing the DOM"}),"\n",(0,i.jsx)(t.p,{children:"Think about the DOM as a complex hierarchy of elements. When you select a specific element, it is located somewhere within that hierarchy. And with the help of the properties, you can learn more about structure of that web and travel through it."}),"\n",(0,i.jsx)(t.p,{children:"Before jumping to the how-to guide, let's first settle the DOM hierarchy naming convention."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",metastring:'title="HTML snippet"',children:'<article class="main-page-content">\n    <h1>Main Header</h1>\n    <div>\n        <p>\n            <strong>Example paragraph</strong> with some written content and a <a href="https://mateuszdabrowski.pl">link</a>.\n        </p>\n        <p>\n            Yet another paragraph of this article.\n        </p>\n    </div>\n</article>\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Let's select the ",(0,i.jsx)(t.code,{children:"div"})," tag from the above structure using:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div'); // selects <div>\n"})}),"\n",(0,i.jsx)(t.p,{children:"There are three relationships between the selected element and the rest of the code above:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["The selected ",(0,i.jsx)(t.code,{children:"div"})," tag is enclosed within ",(0,i.jsx)(t.code,{children:'<article class="main-page-content">'}),". The tag higher in the DOM hierarchy is called a ",(0,i.jsx)(t.strong,{children:"parent"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["The selected ",(0,i.jsx)(t.code,{children:"div"})," tag is not alone within the ",(0,i.jsx)(t.code,{children:'<article class="main-page-content">'})," parent tag. There is also ",(0,i.jsx)(t.code,{children:"h1"}),". The tags at the same level of the DOM hierarchy are called ",(0,i.jsx)(t.strong,{children:"siblings"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["The selected ",(0,i.jsx)(t.code,{children:"div"})," tag has two ",(0,i.jsx)(t.code,{children:"p"})," tags within itself. The tags lower in the DOM hierarchy are called ",(0,i.jsx)(t.strong,{children:"children"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["To sum up, our ",(0,i.jsx)(t.code,{children:"div"})," tag has an ",(0,i.jsx)(t.code,{children:"article"})," as a parent, ",(0,i.jsx)(t.code,{children:"h1"})," as a sibling, and two ",(0,i.jsx)(t.code,{children:"p"})," as children. Then, the first ",(0,i.jsx)(t.code,{children:"p"})," has two inline children: ",(0,i.jsx)(t.code,{children:"strong"})," and ",(0,i.jsx)(t.code,{children:"a"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Let's leverage all this information."}),"\n",(0,i.jsx)(t.h3,{id:"parentelement",children:"parentElement"}),"\n",(0,i.jsxs)(t.p,{children:["If you want to go up in the hierarchy from your selection, you can just use ",(0,i.jsx)(t.code,{children:".parentElement"})," (or ",(0,i.jsx)(t.code,{children:".parentNode"}),", which is nearly the same now)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div').parentElement; // selects <article class=\"main-page-content\">\n"})}),"\n",(0,i.jsx)(t.h3,{id:"previouselementsibling-and-nextelementsibling",children:"previousElementSibling and nextElementSibling"}),"\n",(0,i.jsxs)(t.p,{children:["For traversing the sibling elements, you can use either ",(0,i.jsx)(t.code,{children:".previousElementSibling"})," or ",(0,i.jsx)(t.code,{children:".nextElementSibling"})," to jump to the previous or next element. If there is no such element, you will get ",(0,i.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div').previousElementSibling;   // selects <h1>\ndocument.querySelector('article.main-page-content > div').nextElementSibling;       // returns null\n"})}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["You can also encounter similar properties: ",(0,i.jsx)(t.code,{children:".previousSibling"})," and ",(0,i.jsx)(t.code,{children:".nextSibling"}),". That pair is operating on HTML Nodes and will return more then you might expect. For example, whitespace between the elements (",(0,i.jsx)(t.code,{children:"#text"})," node) or HTML comments. Unless you are sure you need it, ",(0,i.jsx)(t.code,{children:".previousElementSibling"})," or ",(0,i.jsx)(t.code,{children:".nextElementSibling"})," are better choice."]})}),"\n",(0,i.jsx)(t.h3,{id:"all-things-children",children:"All things children"}),"\n",(0,i.jsxs)(t.p,{children:["When you want to go down in the hierarchy, you can use ",(0,i.jsx)(t.code,{children:".children"})," to get a collection of HTML elements."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div').children; // returns collection of two <p> tags\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can either ",(0,i.jsx)(t.a,{href:"/docs/js/js-loops",children:"loop"})," through those or pick a specific child with an index. Helpful here can be ",(0,i.jsx)(t.code,{children:".childElementCount"}),", which will show you the number of elements selected."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div').childElementCount; // returns 2\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The nice thing is that for the most popular selections - the first and last child - you can use a clean shorthands ",(0,i.jsx)(t.code,{children:".firstElementChild"})," and ",(0,i.jsx)(t.code,{children:".lastElementChild"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"/* \u274c Unnecessary complex selection of the first and last child */\ndocument.querySelector('article.main-page-content > div').children[0]; // selects first child\ndocument.querySelector('article.main-page-content > div').children[document.querySelector('article.main-page-content > div').childElementCount - 1]; // selects last child\n\n/* \u2705 Optimised and readable selection of first and last child */\ndocument.querySelector('article.main-page-content > div').firstElementChild; // selects first child\ndocument.querySelector('article.main-page-content > div').lastElementChild;  // selects last child\n"})}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["Like with sibling selection, here also you have set of similar properties - ",(0,i.jsx)(t.code,{children:".childNodes"}),", ",(0,i.jsx)(t.code,{children:".firstChild"}),", ",(0,i.jsx)(t.code,{children:".lastChild"}),". All three work on Nodes, so those will pick up not only elements but also text (whitespace) and comments. Unless you are sure you need it, ",(0,i.jsx)(t.code,{children:".children"}),", ",(0,i.jsx)(t.code,{children:".firstElementChild"})," and ",(0,i.jsx)(t.code,{children:".lastElementChild"})," are better choice."]})}),"\n",(0,i.jsx)(t.h3,{id:"the-power-of-dom-traversing",children:"The power of DOM traversing"}),"\n",(0,i.jsxs)(t.p,{children:["Ok, we know how to traverse the DOM, but why should we? Because sometimes you have to deal with a dynamic DOM and with traversing you can still leverage all ",(0,i.jsx)(t.a,{href:"#exploring-the-dom",children:"exploratory properties"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div').parentElement.className; // returns \"main-page-content\"\n"})}),"\n",(0,i.jsx)(t.p,{children:"You can also mix and match the traversing properties to jump multiple hierarchy levels."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div').firstElementChild.lastElementChild.href // returns \"https://mateuszdabrowski.pl/\"\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Finally, you are not limited by the need to know the exact path from the currently selected element to another one ",(0,i.jsx)(t.strong,{children:"higher in the hierarchy"})," that you are interested in. You can leverage the ",(0,i.jsx)(t.code,{children:".closest"})," method to find it using the same CCS3 selection as with ",(0,i.jsx)(t.a,{href:"#accessing-the-dom",children:(0,i.jsx)(t.code,{children:"querySelector"})}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div').closest('.main-page-content'); // selects <article class=\"main-page-content\">\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Remember that ",(0,i.jsx)(t.code,{children:".closest"})," can return the initially selected element if it fulfils the new selection. If you want to stop it from happening, you can just chain it after ",(0,i.jsx)(t.a,{href:"#parentelement",children:(0,i.jsx)(t.code,{children:".parentElement"})}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('article.main-page-content > div').parentElement.closest('.main-page-content'); // selects <article class=\"main-page-content\">\n"})}),"\n",(0,i.jsx)(t.h2,{id:"manipulating-the-dom",children:"Manipulating the DOM"}),"\n",(0,i.jsx)(t.p,{children:"Everything discussed up to this point is nice but not breathtaking. Time to change it and jump straight into the real reason it is worth learning about the DOM. The ins and outs of manipulating it with JavaScript methods."}),"\n",(0,i.jsx)(t.h3,{id:"addeventlistener",children:"addEventListener"}),"\n",(0,i.jsxs)(t.p,{children:["One of the critical manipulation methods for marketing automation is adding events with ",(0,i.jsx)(t.code,{children:".addEventListener"}),". This method lets you perform some actions (a function) given a specific behaviour (event)."]}),"\n",(0,i.jsx)(t.p,{children:"In simpler words, you can tell the browser to execute a JavaScript function when the user clicks a button. Or moves the mouse out of the page to close it or change a tab. Or perform any event you configure. You do it by attaching an Event Listener to a document, window or selected element:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Example of attaching Click-based Event Listener on a <button> that logs click details to console"',children:"document.querySelector('button').addEventListener('click', event => console.log(event));\n"})}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["Using anonymous functions, like in the example above, is ",(0,i.jsx)(t.strong,{children:"not recommended"}),". Each anonymous function is unique for JavaScript, even if it has the same code within. This leads to two issues:"]}),(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"You may add multiple instances of the same anonymous function to a single element (no deduplication possible). It will lead to a negative performance impact and the function being triggered numerous times per single event."}),"\n",(0,i.jsx)(t.li,{children:"You cannot remove anonymous Event Listener."}),"\n"]}),(0,i.jsx)(t.p,{children:"In real-world scenarios, use named functions (unless you are absolutely sure what you are doing and have booked some time for debugging in the future):"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const logEvent = event => console.log(event);\ndocument.querySelector('button').addEventListener('click', logEvent);\n"})}),(0,i.jsx)(t.p,{children:"It will allow you to easily remove Event Listener (by referencing the target, event type and named function) once it is no longer needed:"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"document.querySelector('button').removeEventListener('click', logEvent);\n"})})]}),"\n",(0,i.jsx)(t.h4,{id:"event-types",children:"Event types"}),"\n",(0,i.jsx)(t.p,{children:"There are over a hundred available events that you can use, so I will focus only on the most useful for our Marketing Automation needs."}),"\n",(0,i.jsx)(t.h5,{id:"click",children:"click"}),"\n",(0,i.jsxs)(t.p,{children:["Capturing a ",(0,i.jsx)(t.code,{children:"click"})," event is probably the most popular event in the world wide web. Technically, it's a shorthand for two separate events (that you can listen for separately) - ",(0,i.jsx)(t.code,{children:"mousedown"})," and ",(0,i.jsx)(t.code,{children:"mouseup"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"The interesting tidbit is that the event captures the number of consecutive clicks happening in short timeframe, so you can distinguish single, double, tripleclicks:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const logClickCount = event => console.log(`Click count: ${event.detail}`);\ndocument.querySelector('button').addEventListener('click', logClickCount);\n"})}),"\n",(0,i.jsx)(t.h5,{id:"submit",children:"submit"}),"\n",(0,i.jsxs)(t.p,{children:["Another marketing must-have is the ",(0,i.jsx)(t.code,{children:"submit"})," event. It is triggered on the valid submission of a form."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const logSubmissionTimestamp = event => console.log(`Submission timestamp: ${event.timeStamp}`); // miliseconds since the page/script load\ndocument.querySelector('form').addEventListener('submit', logSubmissionTimestamp);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The key feature with submit events is possibility to stop the default form processing with ",(0,i.jsx)(t.code,{children:".preventDefault"})," method:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:"{3}",children:"document.querySelector('form').addEventListener('submit',\n    event => {\n        event.preventDefault();\n        const formData = Object.fromEntries(new FormData(event.target));\n        console.log(formData);\n    }\n);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This approach allows you to implement custom validation or data processing while benefiting from the HTML5 form backbone. Perfect when you want to push your form submission to a ",(0,i.jsx)(t.a,{href:"/docs/salesforce/marketing-cloud-engagement/config/code-resource#good-form-backend-with-code-resource",children:"Code Resource"})," asynchronously."]}),"\n",(0,i.jsx)(t.h5,{id:"focus--blur",children:"focus & blur"}),"\n",(0,i.jsxs)(t.p,{children:["Other events that are very useful for forms (and more) are ",(0,i.jsx)(t.code,{children:"focus"})," and ",(0,i.jsx)(t.code,{children:"blur"}),". The first one is triggered when an element gets into focus; the other on the opposite. What does it mean? Let's say you have a form. When the user clicks on the input, that element gets focused. When he clicks on something else (another input, submit button, or just anywhere else), it triggers a ",(0,i.jsx)(t.code,{children:"blur"})," event."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const logInputValue = event => console.log(event.target.value);\ndocument.querySelector('input[type=\"email\"]').addEventListener('blur', logInputValue);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Using ",(0,i.jsx)(t.code,{children:"blur"})," events can be great for triggering asynchronous checks on the provided data. For example, when the user finishes writing the email and goes to the following field, the Event Listener can then make an asynchronous call to the ",(0,i.jsx)(t.a,{href:"/docs/salesforce/marketing-cloud-engagement/config/code-resource#good-form-backend-with-code-resource",children:"Code Resource backend"}),". It will look up whether the email is used by an existing contact or new record needs to be created in Salesforce Sales Cloud to generate the Contact ID and return it back to the form's hidden field."]}),"\n",(0,i.jsx)(t.h5,{id:"mouseenter--mouseleave",children:"mouseenter & mouseleave"}),"\n",(0,i.jsxs)(t.p,{children:["With ",(0,i.jsx)(t.code,{children:"mouseenter"})," and ",(0,i.jsx)(t.code,{children:"mouseleave"}),", you can trigger events when the user moves the pointer in or out of a specific element. The caveat - there needs to be a pointer, so the solution is not working for touchscreen users."]}),"\n",(0,i.jsx)(t.p,{children:"Still, it can be used to capture which part of the website is getting hovered over with a mouse (and for how long) or to create those annoying pop-ups trying to guilt-trip you into staying on the page:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const onLeavePopUp = alert('Sad Alert');\ndocument.documentElement.addEventListener('mouseleave', onLeavePopUp);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Those are just a few key events that you can capture with ",(0,i.jsx)(t.code,{children:".addEventListener"}),". There is much more available, like ",(0,i.jsx)(t.code,{children:"keydown"})," & ",(0,i.jsx)(t.code,{children:"keyup"}),", ",(0,i.jsx)(t.code,{children:"select"}),", ",(0,i.jsx)(t.code,{children:"scroll"}),", ",(0,i.jsx)(t.code,{children:"paste"}),", ",(0,i.jsx)(t.code,{children:"error"}),". Check out the complete list on the ",(0,i.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Events#event_listing",children:"MDN"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"changing-attributes",children:"Changing attributes"}),"\n",(0,i.jsx)(t.p,{children:"Events are fantastic, but there is something even better. Attribute manipulation. With it, you can change your website in real-time according to your logic. How? By going one step further with what you have already learned."}),"\n",(0,i.jsxs)(t.p,{children:["For example, you can add, remove and toggle (add if it wasn't there or remove if it was) CSS classes with ",(0,i.jsx)(t.a,{href:"#classlist-and-classname",children:(0,i.jsx)(t.code,{children:".classlist"})}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"/* <div class=\"page-wrapper category-api document-page\">\u2026</div> */\ndocument.querySelector('div.page-wrapper').classList.remove('category-api');    // removes .categori-api\ndocument.querySelector('div.page-wrapper').classList.add('category-api');       // adds .categori-api back\ndocument.querySelector('div.page-wrapper').classList.toggle('category-api');    // removes .categori-api as it is on the element\n"})}),"\n",(0,i.jsxs)(t.p,{children:["And just like you could get custom ",(0,i.jsx)(t.a,{href:"#attributes",children:"attributes"}),", you can also create them with ",(0,i.jsx)(t.code,{children:".setAttribute"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:'/* <main id="content" class="main-content" role="main">\u2026</main> */\ndocument.querySelector(\'#content\').setAttribute(\'data-columns\', \'3\'); // adds data-columns="3" attribute\n'})}),"\n",(0,i.jsx)(t.p,{children:"Probably the most useful manipulation feature is possibility to alter the properties:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"/* <input type=\"checkbox\" id=\"isOptedIn\" name=\"isOptedIn\"> */\ndocument.querySelector('#isOptedIn').required;          // returns false, as checkbox is not required\ndocument.querySelector('#isOptedIn').required = true;   // makes the checkbox required\n\ndocument.querySelector('#isOptedIn').checked;           // returns false, as checkbox is not checked\ndocument.querySelector('#isOptedIn').checked = true;    // checks the checkbox\n\ndocument.querySelector('#isOptedIn').hidden;            // returns false, as checkbox is not hidden\ndocument.querySelector('#isOptedIn').hidden = true;     // hides the checkbox\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can do the same with ",(0,i.jsxs)(t.a,{href:"#innertext-and-innerhtml",children:[(0,i.jsx)(t.code,{children:".innerText"}),"/",(0,i.jsx)(t.code,{children:".innerHTML"})]}),", ",(0,i.jsx)(t.a,{href:"#hidden-and-style",children:(0,i.jsx)(t.code,{children:".style.display"})})," and more."]}),"\n",(0,i.jsxs)(t.p,{children:["Finally, you can mix DOM manipulation methods and change attributes in response to specific ",(0,i.jsx)(t.a,{href:"#event-types",children:"events"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:"{5}",children:"document.querySelector('form').addEventListener('submit',\n    event => {\n        event.preventDefault();\n        const formData = Object.fromEntries(new FormData(event.target));\n        event.target.innerText = 'Submitted!'; // Replaces whole form with \"Submitted!\"\n    }\n);\n"})}),"\n",(0,i.jsx)(t.p,{children:"Document Object Model can be used to adapt your website in real-time, fill in hidden fields with backend calls or even automate your processes through developer console. You are only limited by your imagination (and website performance)."}),"\n",(0,i.jsx)(t.h2,{id:"marketing-cloud-use-cases",children:"Marketing Cloud Use Cases"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/js/snippets/tailor-with-data",children:"Tailor with Data"})," - leverage DOM manipulation and personalisation strings to create dynamic experiences for your customers."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/docs/salesforce/marketing-cloud-engagement/config/export-import-document-sfmc-roles",children:"Export, Import & Document SFMC Roles"})," - Backup, clone and move cross-account the Salesforce Marketing Cloud roles. In seconds, thanks to DOM."]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},l=s.createContext(i);function r(e){const t=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(l.Provider,{value:t},e.children)}},46748:(e,t,n)=>{n.d(t,{U:()=>l});const s="leadText_qzwo";var i=n(74848);const l=({content:e})=>(0,i.jsx)(i.Fragment,{children:(0,i.jsx)("p",{id:s,children:e})})}}]);