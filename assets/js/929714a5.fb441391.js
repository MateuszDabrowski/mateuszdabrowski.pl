"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[2493],{7083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=n(5893),s=n(1151),r=n(1872);const o={id:"mcp-serverside-code-context",title:"MCP Serverside Code Context",sidebar_label:"Serverside Code Context",description:"Context is king. Also when writing MCP Template Serverside Code.",image:"img/og/og-image-mcp-serverside-code-context.png",tags:["Marketing Cloud","Marketing Cloud Personalization","Interaction Studio","Personalisation","TypeScript"]},a=void 0,c={id:"interaction-studio/mcp-serverside-code-context",title:"MCP Serverside Code Context",description:"Context is king. Also when writing MCP Template Serverside Code.",source:"@site/docs/interaction-studio/mcp-serverside-code-context.mdx",sourceDirName:"interaction-studio",slug:"/interaction-studio/mcp-serverside-code-context",permalink:"/docs/interaction-studio/mcp-serverside-code-context",draft:!1,unlisted:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/interaction-studio/mcp-serverside-code-context.mdx",tags:[{label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{label:"Marketing Cloud Personalization",permalink:"/docs/tags/marketing-cloud-personalization"},{label:"Interaction Studio",permalink:"/docs/tags/interaction-studio"},{label:"Personalisation",permalink:"/docs/tags/personalisation"},{label:"TypeScript",permalink:"/docs/tags/type-script"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1708642896,formattedLastUpdatedAt:"Feb 22, 2024",frontMatter:{id:"mcp-serverside-code-context",title:"MCP Serverside Code Context",sidebar_label:"Serverside Code Context",description:"Context is king. Also when writing MCP Template Serverside Code.",image:"img/og/og-image-mcp-serverside-code-context.png",tags:["Marketing Cloud","Marketing Cloud Personalization","Interaction Studio","Personalisation","TypeScript"]},sidebar:"docs",previous:{title:"Serverside Code Properties",permalink:"/docs/interaction-studio/mcp-serverside-code-properties"},next:{title:"Open Time Email",permalink:"/docs/interaction-studio/mcp-open-time-email"}},d={},l=[{value:"campaignId &amp; experienceId",id:"campaignid--experienceid",level:2},{value:"userGroup",id:"usergroup",level:2},{value:"beaconVersion",id:"beaconversion",level:2},{value:"event",id:"event",level:2},{value:"event methods",id:"event-methods",level:3},{value:"context.event.ipAddress()",id:"contexteventipaddress",level:4},{value:"context.event.itemId()",id:"contexteventitemid",level:4},{value:"context.event.itemType()",id:"contexteventitemtype",level:4},{value:"event.fields",id:"eventfields",level:3},{value:"context.event.fields.pageType",id:"contexteventfieldspagetype",level:4},{value:"context.event.fields.action",id:"contexteventfieldsaction",level:4},{value:"context.event.fields.url",id:"contexteventfieldsurl",level:4},{value:"context.event.fields.customAttribute",id:"contexteventfieldscustomattribute",level:4},{value:"contentZone",id:"contentzone",level:2},{value:"trigger",id:"trigger",level:2},{value:"locale",id:"locale",level:2},{value:"services",id:"services",level:2},{value:"services.catalog",id:"servicescatalog",level:3},{value:"services.recommendations",id:"servicesrecommendations",level:3},{value:"services.smartTrends",id:"servicessmarttrends",level:3},{value:"services.surveys",id:"servicessurveys",level:3},{value:"services.decisions",id:"servicesdecisions",level:3},{value:"services.corvus",id:"servicescorvus",level:3},{value:"services.promotionCatalog",id:"servicespromotioncatalog",level:3},{value:"user",id:"user",level:2},{value:"user methods",id:"user-methods",level:3},{value:"context.user.actionCount()",id:"contextuseractioncount",level:4},{value:"context.user.actionCountPerItem()",id:"contextuseractioncountperitem",level:4},{value:"context.user.getDimensionActivity()",id:"contextusergetdimensionactivity",level:4},{value:"context.user.getDimensionActivityByDay()",id:"contextusergetdimensionactivitybyday",level:4},{value:"context.user.getEmailSendHistory()",id:"contextusergetemailsendhistory",level:4},{value:"context.user.getLatestOrderByStatus()",id:"contextusergetlatestorderbystatus",level:4},{value:"context.user.getSegmentJoinDate()",id:"contextusergetsegmentjoindate",level:4},{value:"context.user.itemStatTotal()",id:"contextuseritemstattotal",level:4},{value:"context.user.itemStatTotalPerItem()",id:"contextuseritemstattotalperitem",level:4},{value:"context.user.pageViewCount()",id:"contextuserpageviewcount",level:4},{value:"context.user.visitCount()",id:"contextuservisitcount",level:4},{value:"context.user.visitDurationMilis()",id:"contextuservisitdurationmilis",level:4},{value:"user.attributes",id:"userattributes",level:3},{value:"user.profileObjects",id:"userprofileobjects",level:3},{value:"user.visits",id:"uservisits",level:3},{value:"user.orderHistory",id:"userorderhistory",level:3},{value:"user.location",id:"userlocation",level:3},{value:"user.currentCart",id:"usercurrentcart",level:3},{value:"user.segmentMembership",id:"usersegmentmembership",level:3},{value:"accountId &amp; datasetId",id:"accountid--datasetid",level:2},{value:"configuration",id:"configuration",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.m,{content:"Context is king. Also when coding MCP Campaign Templates. Read about all its undocumented tricks."}),"\n",(0,i.jsxs)(t.p,{children:["Marketing Cloud Personalization offers a flexible campaign template creation tooling with multiple ",(0,i.jsx)(t.a,{href:"/docs/interaction-studio/mcp-serverside-code-properties",children:"properties"})," and imports that help you fulfil business needs with a pleasant user experience for the marketer. There is also one more - undocumented - feature that can change your template from good to outstanding. The CampaignComponentContext object."]}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["In this article, I'm covering the main ",(0,i.jsx)(t.code,{children:"CampaignComponentContext"})," object that is passed as a ",(0,i.jsx)(t.code,{children:"context"})," argument to the ",(0,i.jsxs)(t.a,{href:"/docs/interaction-studio/mcp-serverside-code-basics#writing-serverside-code",children:[(0,i.jsx)(t.code,{children:"run"})," method"]})," in the Serverside Code of every campaign template."]}),(0,i.jsxs)(t.p,{children:["Some other contexts (like ",(0,i.jsx)(t.code,{children:"GearLifecycleContext"})," passed to search methods) have different structures and are out of the scope of this article."]})]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"CampaignComponentContext"})," object is available in the Serverside Code of the Web, Serverside and Triggered Campaign Templates and provides extensive details about triggering event, user and delivered experience."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context object"',children:'{\n    "campaignId": string,\n    "experienceId": string,\n    "userGroup": string,\n    "beaconVersion": number,\n    "event": Object,\n    "contentZone": string,\n    "trigger": Object,\n    "locale": string,\n    "services": Object,\n    "user": Object,\n    "accountId": string,\n    "datasetId": string,\n    "configuration": Object\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"It's straightforward to use once you know what's in there. For example, you can pull product ID stored with Sitemap in a User Attribute and leverage it to pull complete data about that product for personalisation:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{2-3} title="Leverage context in the run method of your Serverside Code"',children:"    run(context: CampaignComponentContext) {\n        const lastAddedToCartProductId = context.user.attributes?.lastAddedToCartProduct?.value;\n        const lastAddedToCartProductDetails = context.services.catalog.findItem('Product', lastAddedToCartProductId);\n        return { lastATCDetails: lastAddedToCartProductDetails };\n    }\n"})}),"\n",(0,i.jsxs)(t.p,{children:["And that's just a basic usage. The key to unlocking the power of a context object is knowing what is stored there and how you can use it. So let's dive in, property by property (hint, the fun part starts at ",(0,i.jsx)(t.a,{href:"#event",children:(0,i.jsx)(t.code,{children:"event"})}),")."]}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsx)(t.p,{children:"This article is in a work-in-progress state - I'm ongoingly extending details about various parts of the context object as I can use it in real life."})}),"\n",(0,i.jsx)(t.h2,{id:"campaignid--experienceid",children:"campaignId & experienceId"}),"\n",(0,i.jsxs)(t.p,{children:["The first two string properties of the context object are ",(0,i.jsx)(t.code,{children:"campaignId"})," and ",(0,i.jsx)(t.code,{children:"experienceId"}),", and their purpose is very straightforward. They provide the five-character, case-sensitive, alphanumerical IDs for the campaign and experience selected for a user (for example, ",(0,i.jsx)(t.code,{children:"vALdQ"})," for Campaign ID and ",(0,i.jsx)(t.code,{children:"f3WpK"})," for Experience ID)."]}),"\n",(0,i.jsxs)(t.p,{children:["Both those values are passed by default from serverside to clientside and handlebars (as ",(0,i.jsx)(t.code,{children:"campaign"})," and ",(0,i.jsx)(t.code,{children:"experience"})," accordingly), so there is not much added value in the two unless you want to append those values as query strings to the links for tracking purposes."]}),"\n",(0,i.jsx)(t.p,{children:"However, for Web Campaigns, you can do it easily within the handlebars tab, and for Serverside and Triggered Campaigns, you can do it on the receiving system side."}),"\n",(0,i.jsx)(t.h2,{id:"usergroup",children:"userGroup"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"userGroup"})," string property should tell you the group assigned to the user. Well, it should. In practice, you will see there one of the two values: ",(0,i.jsx)(t.code,{children:"Test"})," for users that got an A/B Test or Rule-Based experience and ",(0,i.jsx)(t.code,{children:"testUserGroup"})," for those that are in the Control group (or in the Template preview pane within MCP UI)."]}),"\n",(0,i.jsxs)(t.p,{children:["However, you will see better values in the out-of-the-box serverside payload ",(0,i.jsx)(t.code,{children:"userGroup"})," property that correctly shows values like ",(0,i.jsx)(t.code,{children:"Test"}),", ",(0,i.jsx)(t.code,{children:"Default"}),", and ",(0,i.jsx)(t.code,{children:"Control"})," and only displays ",(0,i.jsx)(t.code,{children:"testUserGroup"})," during preview."]}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["The control group creates more problems for the context, as it keeps displaying the payload preview version of it. So you will also see only the placeholder values for ",(0,i.jsxs)(t.a,{href:"#campaignid--experienceid",children:[(0,i.jsx)(t.code,{children:"campaignId"})," and ",(0,i.jsx)(t.code,{children:"experienceId"})]}),", ",(0,i.jsx)(t.a,{href:"#beaconversion",children:(0,i.jsx)(t.code,{children:"beaconVersion"})})," and skip other datapoints like ",(0,i.jsx)(t.a,{href:"#event",children:(0,i.jsx)(t.code,{children:"event.fields"})}),"."]}),(0,i.jsxs)(t.p,{children:["In short, don't use ",(0,i.jsx)(t.code,{children:"context"})," for custom payload dedicated to control group users."]})]}),"\n",(0,i.jsx)(t.h2,{id:"beaconversion",children:"beaconVersion"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"beaconVersion"})," number property will display the current Web SDK version (f.e. ",(0,i.jsx)(t.code,{children:"16"})," at the moment of writing it) or ",(0,i.jsx)(t.code,{children:"0"})," for the preview/control group. Not really useful."]}),"\n",(0,i.jsx)(t.h2,{id:"event",children:"event"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"event"})," object property is where the magic of the ",(0,i.jsx)(t.code,{children:"context"})," object starts. It stores information about the event that triggered the campaign - the data you can see when you leverage the ",(0,i.jsx)(t.code,{children:".setLoggingLevel('debug')"})," method in your Sitemap."]}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"context.event"})," object won't work correctly in the Template Preview sidebar, as there is no valid event in that mode. Use an active campaign directly on the website to preview the actual output during development. Just make sure you use the campaign targeting to limit execution just to you."]})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.event object"',children:'{\n    "time": datetime,\n    "fields": Object,\n    "ipAddress": (): string,\n    "itemId": (): string,\n    "itemType": (): string\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["While the ",(0,i.jsx)(t.code,{children:"context.event.time"})," is not that useful (unless you want to make some time-dependent changes to the campaign payload), the three available methods are much more practical."]}),"\n",(0,i.jsx)(t.h3,{id:"event-methods",children:"event methods"}),"\n",(0,i.jsx)(t.h4,{id:"contexteventipaddress",children:"context.event.ipAddress()"}),"\n",(0,i.jsx)(t.p,{children:"Returns an IP address of the user visiting your website. You might use it to blocklist specific IP ranges (internal or competitors) from seeing your campaigns. It's not a clean solution (as the campaign needs to be executed to get this far), but this might be your best bet, as there is no MCP-level IP blocklist. Of course, a much better solution would be to build such logic on the website side to block IPs already on the Web SDK import step conditionally, but that might not always be possible."}),"\n",(0,i.jsx)(t.h4,{id:"contexteventitemid",children:"context.event.itemId()"}),"\n",(0,i.jsxs)(t.p,{children:["Returns the ID of the Catalog Item the user viewed in the event. It pairs perfectly with the following method: ",(0,i.jsx)(t.code,{children:"context.event.itemType()"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"contexteventitemtype",children:"context.event.itemType()"}),"\n",(0,i.jsxs)(t.p,{children:["Returns the Catalog of the Item viewed (f.e. ",(0,i.jsx)(t.code,{children:"'Product'"})," for Product View)."]}),"\n",(0,i.jsxs)(t.p,{children:["The pair of ",(0,i.jsx)(t.code,{children:"itemId"})," and ",(0,i.jsx)(t.code,{children:"itemType"})," is handy, as those two details are precisely what MCP requires for a ",(0,i.jsx)(t.a,{href:"#servicescatalog",children:(0,i.jsx)(t.code,{children:"context.services.catalog.findItem()"})})," call that lets you get complete details about the currently displayed item. It enables use cases where you want to change the campaign payload based on displayed item attributes, related catalog objects, or other information on the item details. For example, access to ",(0,i.jsx)(t.a,{href:"#locale",children:"localized item data"}),"."]}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["Event is not only an excellent data point that you can access through ",(0,i.jsx)(t.code,{children:"context"}),". It is also the basis for the anchor in Einstein Recipes. You can leverage it (in a filthy way) to create fake anchors and deploy recommendations for products related to the one currently viewed."]})}),"\n",(0,i.jsxs)(t.p,{children:["On top of the above, ",(0,i.jsx)(t.code,{children:"context.event"})," also contains the ",(0,i.jsx)(t.code,{children:"context.event.fields"})," subobject, capturing even more details about the triggering event."]}),"\n",(0,i.jsx)(t.h3,{id:"eventfields",children:"event.fields"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.event.fields object"',children:'{\n    ".anonId": string,\n    ".bv": string,\n    ".pv": boolean,\n    ".scv": number,\n    ".skipProcessing": boolean,\n    "action": string,\n    "channel": string,\n    "clientIp": string,\n    "contentZones": string[],\n    "pageType": string,\n    "url": string,\n    "urlref": string,\n    "userAgent": string,\n    "_anon": boolean,\n    "_debug": boolean,\n    "customAttribute1": any,\n    "customAttribute2": any\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.event.fields"})," subobject groups multiple data points, many of which are very technical and not really useful for us. But some can open exciting use cases - let's dive in."]}),"\n",(0,i.jsx)(t.h4,{id:"contexteventfieldspagetype",children:"context.event.fields.pageType"}),"\n",(0,i.jsxs)(t.p,{children:["Returns the name of the currently viewed page type as configured in the Sitemap (f.e. ",(0,i.jsx)(t.code,{children:"'Home'"}),"). It is useful when you want to adapt the serverside payload of the campaign based on page type when the content zone is shared across many sites."]}),"\n",(0,i.jsx)(t.h4,{id:"contexteventfieldsaction",children:"context.event.fields.action"}),"\n",(0,i.jsxs)(t.p,{children:["Returns the name of the currently pushed action as configured in the Sitemap (f.e. ",(0,i.jsx)(t.code,{children:"'Viewed Home'"}),"). It shines for custom action names that can drive different campaign experiences - despite being triggered on the same page type."]}),"\n",(0,i.jsx)(t.h4,{id:"contexteventfieldsurl",children:"context.event.fields.url"}),"\n",(0,i.jsx)(t.p,{children:"Returns the URL where the event originated. The cool part is that it contains the hash and query strings, so you can drive use cases using those elements (f.e. change the experience based on the query string values you set in the email campaign using SFMC data)."}),"\n",(0,i.jsx)(t.h4,{id:"contexteventfieldscustomattribute",children:"context.event.fields.customAttribute"}),"\n",(0,i.jsxs)(t.p,{children:["Apart from those always-there properties, you will also see custom attributes you passed along with the event. For example, if in the Sitemap you are passing SFMC Contact Key along with the event: ",(0,i.jsx)(t.code,{children:"actionEvent.user.attributes.sfmcContactKey = queryParameters.get('sk');"})," you will have ",(0,i.jsx)(t.code,{children:"context.event.fields.sfmcContactKey"})," property available with that value. This is huge - it enables us to build campaigns leveraging real-time data. Use cases? Sure! Create an ",(0,i.jsx)(t.code,{children:"hasAddedInsurance"})," attribute filled out by the Add to Cart event to determine whether you want to promote a cross-sell. Add the ",(0,i.jsx)(t.code,{children:"hasMetFreeDeliveryThershold"})," boolean field to conditionally trigger recommendations of products that will help the customer get over the line of free delivery. The sky is the limit with those."]}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["If you need some data only for the specific event purpose and don't want to store it in an attribute (be it due to limits or because Sitemap cannot remove the attribute value later), you can still use the ",(0,i.jsx)(t.code,{children:"actionEvent.user.attributes.customAttribute = 'value'"})," approach to pass that information. It won't be stored on the user attribute (if there isn't one matching the name) but will still be available on the Event Stream and in the ",(0,i.jsx)(t.code,{children:"context"})," object as ",(0,i.jsx)(t.code,{children:"context.event.fields.customAttribute"}),". Works also for pushing custom events:"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'{5} title="Pushing custom event with a custom attribute that does not exist as a user attribute"',children:"Evergage.sendEvent({\n    action: 'Custom Event',\n    user: {\n        attributes: {\n            customAttribute: 'value', // You can make up any property name you want\n        },\n    },\n    source: {\n        contentZones: [{ name: 'virtual_for_global_control' }],\n    }\n})\n"})})]}),"\n",(0,i.jsx)(t.h2,{id:"contentzone",children:"contentZone"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"contentZone"})," string property returns the Content Zone selected for the Campaign. It might be helpful if your campaign supports multiple content zones and you want to alter some payload elements based on the one selected (f.e. change the number of returned recommendations):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{2} title="Leverage context.contentZone to change the serverside payload"',children:"// Limit the number of recommendations to the first four for smaller placements\nif (['search_see-more', 'listing_see-more'].includes(context.contentZone)) {\n    recommendations = recommendations.slice(0,4);\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"trigger",children:"trigger"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"trigger"})," object property is filled only for the Triggered Campaign Templates."]}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h2,{id:"locale",children:"locale"}),"\n",(0,i.jsxs)(t.p,{children:["If you have switched on Locale support in your Marketing Cloud Personalization, the ",(0,i.jsx)(t.code,{children:"locale"})," string will return a five-character long combination of ISO language code and ISO country code (",(0,i.jsx)(t.code,{children:"language_COUNTRY"}),", for example: ",(0,i.jsx)(t.code,{children:"en_US"})," for American English)."]}),"\n",(0,i.jsx)(t.p,{children:"You can use it to return the campaign content based on the most recent user locale (be it based on manually entered variations in the Campaign configuration or by pulling directly from the localized Catalog):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{7} title="Leverage context.locale to pull localized product details"',children:"const recommendedIds = recommendIdsOnly(context, recipeConfig);\n// Return localized recommendations with key data points needed for the campaign\nlet localisedRecommendations = context.services.catalog\n    .findItems('Product', recommendedIds)\n    .map(product => product.toFlatJSON(\n        ['id', 'name,' 'imageUrl', 'url', 'price'],\n        context.locale || ''\n    ))\n"})}),"\n",(0,i.jsx)(t.h2,{id:"services",children:"services"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.services"})," is the most potent part of the ",(0,i.jsx)(t.code,{children:"context"})," object - packed to the brim with methods that give you access to Marketing Cloud Personalization data or let you create new recommendations."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.services object"',children:'{\n    "catalog": Object,\n    "recommendations": Object,\n    "smartTrends": Object,\n    "surveys": Object,\n    "decisions": Object,\n    "corvus": Object,\n    "promotionCatalog": Object\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"It's a nested object, so let's go through it property by property to discuss each group of methods."}),"\n",(0,i.jsx)(t.h3,{id:"servicescatalog",children:"services.catalog"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.services.catalog object"',children:'{\n    "dimensionFilter": (dimension: string): ItemFilter<any>,\n    "findClosestItems": (request: ClosestItemsRequest): Item[],\n    "findItem": (type: string, id: string): Item,\n    "findItems": (type: string, ids: string[]): Item[] || (type: ItemFilter<any>, ids: ItemSort<any>): Item[] || (type: ItemFilter<any>): Item[]\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h3,{id:"servicesrecommendations",children:"services.recommendations"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.services.recommendations object"',children:'{\n    "recommend": (request: RecommendationsRequest): Item[],\n    "recommendIdsOnly":  (request: RecommendationsRequest): Item[],\n    "smartSearch": (request: SmartSearchRequest): Item[],\n    "smartSort": (request: SmartSort): Item[]\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h3,{id:"servicessmarttrends",children:"services.smartTrends"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.services.smartTrends object"',children:'{\n     "smartTrends": (request: SmartTrendsRequest): ItemTrends[]\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h3,{id:"servicessurveys",children:"services.surveys"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.services.surveys object"',children:'{\n     "getSurey": (surveyId: string): Survey\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h3,{id:"servicesdecisions",children:"services.decisions"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.services.decisions object"',children:'{\n     "decide": (request: ContextualBanditRequest): Item[]\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h3,{id:"servicescorvus",children:"services.corvus"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.services.corvus object"',children:'{\n    "contextualBandit": {\n        "decide": (request: ContextualBanditRequest, filter: PromotionFilter): Item[]\n    }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h3,{id:"servicespromotioncatalog",children:"services.promotionCatalog"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.services.promotionCatalog object"',children:'{\n    "findPromotions": (filter: ItemFilter<any>, context: CampaignComponentContext): Promotion: [],\n    "promotionFilter": (contentZone: string): PromotionFilter\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h2,{id:"user",children:"user"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.user"})," is the most significant property covering tons of information about the user that triggered the campaign. It contains multiple subobjects and methods perfect for statistics-based use cases within the serverside code."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.user object"',children:'{\n    "attributes": Object,\n    "profileObjects": Object,\n    "visits": [Object],\n    "orderHistory": [Object],\n    "location": Object,\n    "currentCart": Object,\n    "anonymous": boolean,\n    "segmentMembership": [Object],\n    "id": string,\n    actionCount: (request: ActionStatsRequest): number,\n    actionCountPerItem:  (request: ActionStatsRequest): Object,\n    getDimensionActivity: (dimension: string, start: Date, end: Date): {\n        [itemId: string]: ItemActionStats\n    },\n    getDimensionActivityByDay: (dimension: string, start: Date, end: Date): {\n        [date: string] : ItemActionStats\n    },\n    getEmailSendHistory: (start: Date, end: Date): EmailSendActivity[] || (): EmailSendActivity[],\n    getLatestOrderByStatus: (status: \'Open\' | \'Purchased\' | \'Cancelled\'): Order,\n    getSegmentJoinDate: (segmentId: string): Date,\n    itemStatTotal: (request: ItemStatsRequest): number,\n    itemStatTotalPerItem: (request: ItemStatsRequest): ItemStat[],\n    pageViewCount: (request: StatsRequest): number,\n    visitCount: (request: StatsRequest): number,\n    visitDurationMillis: (request: StatsRequest): number,\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Let's start our discovery of ",(0,i.jsx)(t.code,{children:"context.user"})," with the methods."]}),"\n",(0,i.jsx)(t.h3,{id:"user-methods",children:"user methods"}),"\n",(0,i.jsx)(t.h4,{id:"contextuseractioncount",children:"context.user.actionCount()"}),"\n",(0,i.jsxs)(t.p,{children:["Requires an ActionStatsRequest (",(0,i.jsx)(t.code,{children:"{actionName: 'Name of the action'}"}),") and returns the total of provided action triggers for the current user. You can also extend ActionStatsRequest with ",(0,i.jsx)(t.code,{children:"start"})," or ",(0,i.jsx)(t.code,{children:"end"})," (but not both) date properties to limit the timeframe of the action count."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3} title="Check how many times customer viewed cart within the last day"',children:"const today = new Date();\nconst yesterday = new Date(today.setDate(today.getDate() - 1));\nconst homeViewCount = context.user.actionCount({actionName: 'Viewed Cart', start: yesterday}); // Returns: 4\n"})}),"\n",(0,i.jsx)(t.h4,{id:"contextuseractioncountperitem",children:"context.user.actionCountPerItem()"}),"\n",(0,i.jsxs)(t.p,{children:["In theory, it should be able to return the action count per item (after passing a ",(0,i.jsx)(t.code,{children:"'Viewed Product'"})," action in ActionStatsRequest, it should show the counts per each product where that action triggered). But it doesn't. It returns the same information as ",(0,i.jsx)(t.a,{href:"#contextuseractioncount",children:(0,i.jsx)(t.code,{children:"actionCount()"})})," method, but instead of doing it directly as a number, it does it as an object with an action name. Unless I'm missing something - useless."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Full on promise, null on delivery actionCountPerItem method"',children:"const homeViewCount = context.user.actionCountPerItem({actionName: 'Viewed Product'}); // Returns: {'Viewed Product': 5}\n"})}),"\n",(0,i.jsx)(t.h4,{id:"contextusergetdimensionactivity",children:"context.user.getDimensionActivity()"}),"\n",(0,i.jsxs)(t.p,{children:["Requires a dimension (a Catalog, like ",(0,i.jsx)(t.code,{children:"'Product'"}),", '",(0,i.jsx)(t.code,{children:"Category"}),"' or ",(0,i.jsx)(t.code,{children:"'CustomCatalog'"}),") and start + end date boundaries. This time, you must always provide both in that exact order. The significant difference with this method is that you pass direct arguments, not a grouping Stat object. It returns an object with Item IDs and related activity data from the selected Dimension with which the user interacted during the timeframe."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3,5} title="Find the activity in a specified catalog"',children:'const today = new Date();\nconst yesterday = new Date(today.setDate(today.getDate() - 1));\nconst brandActivity = context.user.getDimensionActivity(\'Brand\', yesterday, today); // Returns:\n// {\n//   "Apple": {\n//     "view": 2,\n//     "viewOutOfStock": 0,\n//     "viewDetail": 0,\n//     "viewTime": 43339,\n//     "cart": 1,\n//     "cartValue": 215,\n//     "purchase": 1,\n//     "purchaseValue": 215,\n//     "review": 0,\n//     "share": 0,\n//     "comment": 0,\n//     "favorite": 0\n//   }\n// }\n'})}),"\n",(0,i.jsx)(t.p,{children:"That's an excellent set of data to calculate the most viewed Category, longest viewed Product or most purchased Brand by that specific user. Unfortunately, it's still just a proxy for the actual affinity data that is unavailable."}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["While you can work on the returned object, you cannot directly pass it to the serverside payload. You can output the final value (f.e. ",(0,i.jsx)(t.code,{children:"brandActivity.Apple.view"}),"), but both ",(0,i.jsx)(t.code,{children:"brandActivity"})," and ",(0,i.jsx)(t.code,{children:"brandActivity.Apple"})," will break it."]}),(0,i.jsxs)(t.p,{children:["You can perform calculations in serverside code on any level, but if you need to output it directly in the payload, there is a trick: ",(0,i.jsx)(t.code,{children:"JSON.parse(JSON.strinify(brandActivity))"}),"."]})]}),"\n",(0,i.jsx)(t.h4,{id:"contextusergetdimensionactivitybyday",children:"context.user.getDimensionActivityByDay()"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"getDimensionActivityByDay"})," method works nearly the same as ",(0,i.jsx)(t.a,{href:"#contextusergetdimensionactivity",children:(0,i.jsx)(t.code,{children:"getDimensionActivity"})}),". There are two key differences:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"It requires additional argument - right after selecting the Dimension, you must also pass the specific Item ID for which you want to see the activity."}),"\n",(0,i.jsx)(t.li,{children:"The returned Object will have epoch properties for each activity day within the selected period."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3,5} title="Find the activity in a specified catalog"',children:'const today = new Date();\nconst yesterday = new Date(today.setDate(today.getDate() - 1));\nconst brandActivity = context.user.getDimensionActivityByDay(\'Brand\', \'Apple\', yesterday, today); // Returns:\n// {\n//   "1707782400000": {\n//     "view": 2,\n//     "viewOutOfStock": 0,\n//     "viewDetail": 0,\n//     "viewTime": 43339,\n//     "cart": 1,\n//     "cartValue": 215,\n//     "purchase": 1,\n//     "purchaseValue": 215,\n//     "review": 0,\n//     "share": 0,\n//     "comment": 0,\n//     "favorite": 0\n//   }\n// }\n'})}),"\n",(0,i.jsxs)(t.p,{children:["It also has the same payload limitation as ",(0,i.jsx)(t.a,{href:"#contextusergetdimensionactivity",children:(0,i.jsx)(t.code,{children:"getDimensionActivity"})}),", and the same workaround is available."]}),"\n",(0,i.jsx)(t.h4,{id:"contextusergetemailsendhistory",children:"context.user.getEmailSendHistory()"}),"\n",(0,i.jsxs)(t.p,{children:["Requires either nothing or start/end data boundary and returns... nothing. At least I couldn't get it to work with the ",(0,i.jsx)(t.a,{href:"/docs/interaction-studio/mcp-open-time-email",children:"OTE Campaign"})," data. It may leverage the barely working ",(0,i.jsx)(t.a,{href:"../../../sites/ideas/mc-personalization-ideas#external-email-campaign-etl-send-segmentation",children:"External Email Campaign ETL"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"contextusergetlatestorderbystatus",children:"context.user.getLatestOrderByStatus()"}),"\n",(0,i.jsxs)(t.p,{children:["Requires an order status (",(0,i.jsx)(t.code,{children:"'Open'"}),", ",(0,i.jsx)(t.code,{children:"'Purchased'"})," or ",(0,i.jsx)(t.code,{children:"'Cancelled'"}),") and returns the most recent Order object in the selected state. The data structure and content are the same as in the ",(0,i.jsx)(t.a,{href:"#userorderhistory",children:(0,i.jsx)(t.code,{children:"user.orderHistory"})}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"contextusergetsegmentjoindate",children:"context.user.getSegmentJoinDate()"}),"\n",(0,i.jsxs)(t.p,{children:["Requires Segment ID (you can view it in User Segments after you add the ID column or by opening a specific segment and copying five alphanumerical characters from URL: ",(0,i.jsx)(t.code,{children:".../segment/{SegmentID}/members..."}),") and returns an epoch with join date. It's a fantastic way to capture additional context for the user (f.e. how many days ago he joined the Gold Tier segment)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Segment join epoch fun"',children:"const segmentJoinEpoch = context.user.getSegmentJoinDate('qWeR1'); // Returns: 1695796858287\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If the Segment ID is incorrect or the user has not joined the provided segment, it will return ",(0,i.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsx)(t.p,{children:"You can easily convert epoch to date to simplify date calculations:"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{2,7} title="Perform date comparisons on epoch"',children:"const segmentJoinEpoch = context.user.getSegmentJoinDate('qWeR1'); // Returns: 1695796858287\nconst segmentJoinDate = new Date(segmentJoinEpoch);\n\nconst today = new Date();\nconst lastWeek = new Date(today.setDate(today.getDate() - 7));\n\nconst hasJoinedLastWeek = segmentJoinDate > lastWeek;\n"})})]}),"\n",(0,i.jsx)(t.h4,{id:"contextuseritemstattotal",children:"context.user.itemStatTotal()"}),"\n",(0,i.jsxs)(t.p,{children:["Requires an ItemStatsRequest (",(0,i.jsx)(t.code,{children:"{itemType: 'CatalogName', statType: 'StatTypeName'}"}),") and returns the count for that stat for a given Catalog. You can also extend ItemStatsRequest with another optional property ",(0,i.jsx)(t.code,{children:"itemId: 'id'"})," to limit the result to a specific Item within a given Catalog (itemType). Finally, as with ",(0,i.jsx)(t.a,{href:"#contextuseractioncount",children:"actionCount()"}),", you can also use ",(0,i.jsx)(t.code,{children:"start"})," or ",(0,i.jsx)(t.code,{children:"end"})," timeframe boundaries - but not both."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3-8} title="Time spent by the user on Laptop Category within the last day in milliseconds"',children:"const today = new Date();\nconst yesterday = new Date(today.setDate(today.getDate() - 1));\nconst itemViewTime = context.user.itemStatTotal({\n    itemId: 'Laptop',\n    itemType: 'Category',\n    statType: 'ViewTime',\n    start: yesterday\n}); // Returns: 98663\n"})}),"\n",(0,i.jsx)(t.p,{children:"Available statTypes: 'View', 'ViewOutOfStock', 'ViewValue', 'ViewDetail', 'QuickView', 'ViewTime', 'Cart', 'CartValue', 'Purchase', 'Visit', 'PurchaseValue', 'Review', 'Share', 'Comment', 'Favorite', 'Searches', 'SearchClicks', 'ClickThrough', 'RemoveFromCart', 'RemoveFromCartValue', 'RecommendedCount', 'PageLoadTime', 'PageLoadTimeCount', 'DomLoadTime', 'DomLoadTimeCount', 'TwReceiverTime', 'TwReceiverTimeCount', 'NumErrorEvents', 'TriggeredCount', 'RequestedForServing', 'EligibleForServing', 'Served'."}),"\n",(0,i.jsx)(t.p,{children:"Remember that the meaning of the returned value will differ depending on the selected statType - it can be count, milliseconds or money."}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["This method works perfectly with the ",(0,i.jsx)(t.a,{href:"#contexteventitemid",children:(0,i.jsx)(t.code,{children:"context.event.itemId()"})})," and ",(0,i.jsx)(t.a,{href:"#contexteventitemtype",children:(0,i.jsx)(t.code,{children:"context.event.itemType()"})})," as with those, you can pull relevant stats for a currently viewed Item and adapt payload for it (f.e. adapt Exit Intent incentive based on the number of visits or time spent on currently viewed product)."]})}),"\n",(0,i.jsx)(t.h4,{id:"contextuseritemstattotalperitem",children:"context.user.itemStatTotalPerItem()"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"itemStatsPerItem()"})," works in a very similar manner to ",(0,i.jsx)(t.a,{href:"#contextuseritemstattotal",children:(0,i.jsx)(t.code,{children:"itemStatsTotal()"})})," and accepts the same ItemStatsRequest. The key difference is that instead of a single value, it will return an array of objects, each containing an itemId and value specific to that item."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3-7} title="Time spent by the user on Products within the last day in milliseconds"',children:"const today = new Date();\nconst yesterday = new Date(today.setDate(today.getDate() - 1));\nconst itemViewTime = context.user.itemStatPerItem({\n    itemType: 'Product',\n    statType: 'ViewTime',\n    start: yesterday\n}); // Returns: [{itemId: '123', value: 9238}, {itemId: '456', value: 26651}]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["While you can pass ",(0,i.jsx)(t.code,{children:"itemId: 'id'"})," in the ItemStatsRequest, it will limit the outputted array to a single object for that item, making it not useful vs ",(0,i.jsx)(t.a,{href:"#contextuseritemstattotal",children:(0,i.jsx)(t.code,{children:"itemStatsTotal()"})}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"contextuserpageviewcount",children:"context.user.pageViewCount()"}),"\n",(0,i.jsxs)(t.p,{children:["Requires StatsRequest (",(0,i.jsx)(t.code,{children:"{start: Date, end: Date}"})," - use either start or end; using both will always return 0) and returns the count of pages viewed in that timeframe. Both timeframe bounds are required."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3-6} title="Pages viewed within the last day"',children:"const today = new Date();\nconst yesterday = new Date(today.setDate(today.getDate() - 1));\nconst itemViewTime = context.user.pageViewCount({\n    start: yesterday\n}); // Returns: 9\n"})}),"\n",(0,i.jsx)(t.h4,{id:"contextuservisitcount",children:"context.user.visitCount()"}),"\n",(0,i.jsxs)(t.p,{children:["Similar to ",(0,i.jsx)(t.a,{href:"#contextuserpageviewcount",children:"pageViewCount()"}),", it requires StatsRequest (",(0,i.jsx)(t.code,{children:"{start: Date, end: Date}"})," - use either start or end; using both will always return 0) but returns the count of visits instead of specific pages."]}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsx)(t.p,{children:"Visit for Marketing Cloud Personalization starts from the first page view and ends after the user reaches 30 minutes of inactivity on the site. So if a user goes to your website to view a few pages, leaves and then returns after 40 minutes - it will be counted as a separate visit."})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3-6} title="Visits within the last day"',children:"const today = new Date();\nconst yesterday = new Date(today.setDate(today.getDate() - 1));\nconst itemViewTime = context.user.visitCount({\n    start: yesterday\n}); // Returns: 2\n"})}),"\n",(0,i.jsx)(t.h4,{id:"contextuservisitdurationmilis",children:"context.user.visitDurationMilis()"}),"\n",(0,i.jsxs)(t.p,{children:["Similar to ",(0,i.jsx)(t.a,{href:"#contextuserpageviewcount",children:"pageViewCount()"}),", it requires StatsRequest (",(0,i.jsx)(t.code,{children:"{start: Date, end: Date}"})," - use either start or end, using both will always return 0) but returns the number of milliseconds the user spent on your website in a specified timeframe."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3-6} title="Visits within the last day"',children:"const today = new Date();\nconst yesterday = new Date(today.setDate(today.getDate() - 1));\nconst itemViewTime = context.user.visitDurationMilis({\n    start: yesterday,\n    end: today\n}); // Returns: 98663\n"})}),"\n",(0,i.jsx)(t.h3,{id:"userattributes",children:"user.attributes"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.user.attributes"})," object contains out-of-the-box, custom and hidden attributes with respective values for the user. It's an instrumental part of the ",(0,i.jsx)(t.code,{children:"context"})," as it allows you to pull user-specific data not only from the triggering event (like it is also possible with ",(0,i.jsx)(t.a,{href:"#contexteventfieldscustomattribute",children:(0,i.jsx)(t.code,{children:"context.event.fields.customAttribute"})}),") but also from past events. This enables fun use cases like saving in custom attributes the last viewed Product and Category with Sitemap and then leveraging that information when the user is on the non-product page of your website to bring them back onto the funnel. It's also great to personalize your campaign (f.e. with the first name in the info banner or overlay)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.user.attributes object"',children:'{\n    "created": {\n        "value": number // epoch\n    },\n    "customAttribute": {\n        "value": any\n    },\n    "originatingReferrer": {\n        "value": "{\\"medium\\":\\"Direct\\",\\"source\\":null,\\"terms\\":null,\\"domain\\":null,\\"subdomainReversed\\":null,\\"url\\":null,\\"landingUrl\\":\\"https://www.mateuszdabrowski.pl/\\"}"\n    },\n    "firstName": {\n        "value": string\n    },\n    "lastViewedCartAt": {\n        "value": number // epoch\n    },\n    "firstActivity": {\n        "value": number // epoch\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"userprofileobjects",children:"user.profileObjects"}),"\n",(0,i.jsx)(t.p,{children:"\ud83d\udea7 Work in progress \ud83d\udea7"}),"\n",(0,i.jsx)(t.h3,{id:"uservisits",children:"user.visits"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.user.visits"})," is an Array with user visits. Remember that the Marketing Cloud Personalization visit starts from the first page view and ends after the user reaches 30 minutes of inactivity on the site. So if a user goes to your website to view a few pages, leaves and then returns after 40 minutes - it will be counted as a separate visit. It is critical - there is no way to access the history of each page the user visits. You can only see the visit (session start data) with a ",(0,i.jsx)(t.code,{children:"pageViewIndex"})," with a count of page views during that visit."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.user.visits array"',children:'[\n    {\n        "start": number, // epoch\n        "lastEventTime": number, // epoch\n        "timeSinceLastVisit": number, // milliseconds\n        "referrer": { // || null\n            "medium": "Direct",\n            "source": null,\n            "terms": null,\n            "domain": null,\n            "subdomainReversed": null,\n            "url": null,\n            "landingUrl": "https://www.mateuszdabrowski.pl/"\n        },\n        "deviceType": "Computer",\n        "browser": "Chrome",\n        "platform": "Web",\n        "operatingSystem": "Windows",\n        "weather": { // || null\n            "temperature": 71,\n            "humidity": 67,\n            "windSpeed": 7,\n            "rain3h": 0,\n            "snow3h": 0,\n            "cloudCoverage": 0,\n            "condition": {\n                "id": 800,\n                "name": "clear sky",\n                "icon": "01d",\n                "category": "Clear"\n            }\n        },\n        "pageViewIndex": 9\n    }\n]\n'})}),"\n",(0,i.jsx)(t.p,{children:"While there are a few attributes here, I would like to focus on two that enable exciting use cases:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"referrer"})," can contain data of the website that led the user to you. If this is the case, you can create a dedicated campaign focusing on the source (f.e. small vouchers to convert people coming from voucher-gathering websites) or terms (f.e. changing the experience based on social ad terms passed)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"weather"})," can provide you with details about temperature, rain and snow, unlocking like-magic use cases, f.e. if it is cold and showers for your customer, display a campaign with a dedicated message promoting a sunny and hot travel destination."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"userorderhistory",children:"user.orderHistory"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.user.orderHistory"})," is an array with past orders in any status (open, purchased or cancelled) for the user. It contains everything - timeframes, order value and currency and even a list of all products in that order."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.user.orderHistory array"',children:'[\n     {\n        "id": null,\n        "created": number, // epoch\n        "updated": number, // epoch\n        "purchaseDate": null,\n        "visitAgeAtPurchase": number, // milliseconds\n        "totalValue": number,\n        "totalValueCurrency": null,\n        "status": "Open",\n        "metadata": null,\n        "lineItems": [\n            {\n                "quantity": number,\n                "price": number,\n                "itemId": string,\n                "attributes": {}\n            },\n        ],\n        "attributes": {}\n    }\n]\n'})}),"\n",(0,i.jsx)(t.h3,{id:"userlocation",children:"user.location"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.user.location"})," can be magic or trash - depending on the Internet Service Providers of your audience. The rule of thumb is good data for B2B and mixed data for B2C. It's worth checking because if you can trust/clean this data, you can do astounding things with it."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.user.location object"',children:'{\n    "geographicPoint": {\n        "latitude": number,\n        "longitude": number\n    },\n    "timeZoneId": "Europe/Warsaw",\n    "continentKey": "EU",\n    "countryCode": "PL",\n    "countryNumericCode": 616,\n    "stateProvinceCode": "14",\n    "city": "Warsaw",\n    "postalCode": "00-633",\n    "organization": "Pwc Polska Sp. Z O.o.",\n    "naicsCode": "517311"\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Firstly, ",(0,i.jsx)(t.code,{children:"context.user.location.geographicPoint"})," contains latitude and longitude that can be perfect for ",(0,i.jsx)(t.a,{href:"#servicescatalog",children:(0,i.jsx)(t.code,{children:"context.services.catalog.findClosestItems()"})})," call."]}),"\n",(0,i.jsxs)(t.p,{children:["Secondly, if you target B2B customers and get organisation details (the example above is real - it returned all those details when I checked it from the PwC Poland office), it can help you get precious information about your known ",(0,i.jsx)(t.strong,{children:"and anonymous"})," visitors! However, a (big) grain of salt is needed - the NAICS Code (2017 NAICS Definition) returned for me Wired Telecommunications Carriers, which looks like code for Internet Services Provider, not PwC. For B2C, the ",(0,i.jsx)(t.code,{children:"organisation"})," field will return the Internet Service Provider name in most cases."]}),"\n",(0,i.jsx)(t.h3,{id:"usercurrentcart",children:"user.currentCart"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.user.currentCart"})," is a single object with the same structure as each of the orders stored in ",(0,i.jsx)(t.a,{href:"#userorderhistory",children:(0,i.jsx)(t.code,{children:"context.user.orderHistory"})}),". But because it is still a cart, not an order, most fields will be ",(0,i.jsx)(t.code,{children:"null"}),"/",(0,i.jsx)(t.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.user.currentCart object"',children:'{\n    "id": null,\n    "created": number, // epoch\n    "updated": number, // epoch\n    "purchaseDate": null,\n    "visitAgeAtPurchase": 0,\n    "totalValue": 0,\n    "totalValueCurrency": null,\n    "status": "Open",\n    "metadata": null,\n    "lineItems": [\n        {\n            "quantity": number,\n            "price": number,\n            "itemId": string,\n            "attributes": {}\n        },\n    ],\n    "attributes": {}\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"The fun use case here is checking when the user updated the cart and, if enough time has passed, leveraging the lineItems to deploy an abandoned basket Web Campaign."}),"\n",(0,i.jsx)(t.h3,{id:"usersegmentmembership",children:"user.segmentMembership"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"context.user.segmentMembership"})," is an array with segments the user is a member of. With a good segmentation naming convention, the ",(0,i.jsx)(t.code,{children:"segmentName"})," and ",(0,i.jsx)(t.code,{children:"joined"})," can capture valuable additional context for the user (f.e. how many days ago he joined the Gold Tier segment or became an at-risk customer)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:'title="Structure of the context.user.segmentMembership array"',children:'[\n     {\n        "segmentId": string,\n        "segmentName": string,\n        "joined": number, // epoch\n        "createIfMissing": boolean,\n        "removal": boolean,\n        "userId": string,\n        "customerId": string,\n        "customerType": "User"\n    }\n]\n'})}),"\n",(0,i.jsx)(t.h2,{id:"accountid--datasetid",children:"accountId & datasetId"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"accountId"})," and ",(0,i.jsx)(t.code,{children:"datasetId"})," are string properties that contain information about the Marketing Cloud Personalization account and dataset that generated the event. It is only handy if you want environment-aware debug log visibility logic."]}),"\n",(0,i.jsx)(t.h2,{id:"configuration",children:"configuration"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"configuration"})," object property contains information about the campaign properties (fields you expect the marketer to fill in when configuring the campaign) in the experience for a given user. Not really useful, as in the serverside code, you can access the same information using the ",(0,i.jsx)(t.code,{children:"this"})," keyword (f.e. ",(0,i.jsx)(t.code,{children:"this.campaignPropertyName"}),")."]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1872:(e,t,n)=>{n.d(t,{m:()=>r});n(7294);const i="leadText_qzwo";var s=n(5893);const r=e=>{let{content:t}=e;return(0,s.jsx)(s.Fragment,{children:(0,s.jsx)("p",{id:i,children:t})})}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>o});var i=n(7294);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);