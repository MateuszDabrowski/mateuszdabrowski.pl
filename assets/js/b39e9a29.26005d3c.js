"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[441],{5968:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var t=s(4848),i=s(8453),r=s(6748);const o={id:"sfmc-sql-select",title:"SFMC SQL Select",sidebar_label:"Select",description:"Selected information on the SELECT statement in SFMC SQL.",image:"img/og/og-image-sql-select.png",tags:["Marketing Cloud","SQL"]},l=void 0,c={id:"sql/sfmc-sql-select",title:"SFMC SQL Select",description:"Selected information on the SELECT statement in SFMC SQL.",source:"@site/docs/sql/sfmc-sql-select.mdx",sourceDirName:"sql",slug:"/sql/sfmc-sql-select",permalink:"/docs/sql/sfmc-sql-select",draft:!1,unlisted:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/sql/sfmc-sql-select.mdx",tags:[{label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{label:"SQL",permalink:"/docs/tags/sql"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1708642896e3,frontMatter:{id:"sfmc-sql-select",title:"SFMC SQL Select",sidebar_label:"Select",description:"Selected information on the SELECT statement in SFMC SQL.",image:"img/og/og-image-sql-select.png",tags:["Marketing Cloud","SQL"]},sidebar:"docs",previous:{title:"SQL Basics",permalink:"/docs/sql/sfmc-sql-basics"},next:{title:"From",permalink:"/docs/sql/sfmc-sql-from"}},a={},d=[{value:"Aliasing with AS",id:"aliasing-with-as",level:2},{value:"Custom values",id:"custom-values",level:3},{value:"TOP",id:"top",level:2},{value:"TOP PERCENT",id:"top-percent",level:3},{value:"TOP with ORDER BY",id:"top-with-order-by",level:3},{value:"TOP WITH TIES",id:"top-with-ties",level:3},{value:"DISTINCT",id:"distinct",level:2},{value:"DISTINCT with TOP",id:"distinct-with-top",level:3},{value:"Table Prefixes",id:"table-prefixes",level:2},{value:"Flow control",id:"flow-control",level:2},{value:"Variables &amp; Functions",id:"variables--functions",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.U,{content:"Selected information on the SELECT statement in SFMC SQL"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"SELECT"})," statement opens each query. It picks the columns from the source data extensions and system data views and allows you to create entirely new data points."]}),"\n",(0,t.jsxs)(n.p,{children:["The simplest version of this statement is ",(0,t.jsx)(n.code,{children:"SELECT *"}),", which targets all available columns from the source. I do not recommend this approach, as it is terrible for your query's readability and performance. As Salesforce Marketing Cloud caches the source Data Extension column names when you save SQL Query Activity, you won't have added value of flexible selection. You will still have to edit and save the activity. Also, ",(0,t.jsx)(n.a,{href:"/docs/config/sfmc-appexchange-solutions#query-studio",children:"Query Studio"})," does not support this shortcut. Don't use ",(0,t.jsx)(n.code,{children:"*"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The prefered method is targeting columns explicitly by their names:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'title="Select ContactKey and EmailAddress columns"',children:"SELECT\n      ContactKey\n    , EmailAddres\n"})}),"\n",(0,t.jsx)(n.p,{children:"If a column name contains a space, hyphen or is a SQL's reserved keyword, you need to capture it with squared brackets:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{4} title="Let\'s add another column with whitespace in its name"',children:"SELECT\n      ContactKey\n    , EmailAddres\n    , [External Contact Id]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["There are also some exceptional cases related to selected ",(0,t.jsx)(n.a,{href:"/docs/config/sfmc-system-data-views",children:"System Data Views"})," in Salesforce Marketing Cloud, where you need to use an underscore prefix before a name (for example, when taking Subscriber ID from Enterprise Attributes):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'title="There are some special column names with an underscore prefix"',children:"SELECT _SubscriberId\n"})}),"\n",(0,t.jsx)(n.h2,{id:"aliasing-with-as",children:"Aliasing with AS"}),"\n",(0,t.jsxs)(n.p,{children:["You can also utilise ",(0,t.jsx)(n.code,{children:"SELECT"})," as a tool to rename the source columns to match your needs in an outcome data extension. It is especially useful when pulling the data from Synchronized Data Extension with names coming from Salesforce custom fields."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{4-5} title="Improve readability and consistency with aliasing"',children:"SELECT\n      ContactKey\n    , EmailAddress\n    , [External Contact Id] AS ExternalContactId\n    , Gender__c             AS Gender\n"})}),"\n",(0,t.jsx)(n.h3,{id:"custom-values",children:"Custom values"}),"\n",(0,t.jsx)(n.p,{children:"Use aliases also for passing new values directly from your query. Need to add a custom string to outcome data extension? Or maybe synchronisation timestamp for debugging purposes? You can leverage SQL for it."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:"{6-7} title=\"Add custom column aliased 'ImportDate' with a value equal to the UTC of the script execution for each record\"",children:"SELECT\n      ContactKey\n    , EmailAddress\n    , [External Contact Id] AS ExternalContactId\n    , Gender__c             AS Gender\n    , 'Lead'                AS RecordType\n    , GETUTCDATE()          AS ImportDate\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"You Should Know",type:"note",children:[(0,t.jsx)(n.p,{children:"You can even go further by creating new values by leveraging existing data! For example, if you have a first name and last name, you can use SQL to create a FullName column from scratch:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{4} title="Let\'s create a concatenated column for easier personalisation"',children:"SELECT\n      SubscriberKey\n    , EmailAddress\n    , FirstName + ' ' + LastName AS FullName\n"})}),(0,t.jsxs)(n.p,{children:["It becomes mighty with the ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-string-functions",children:"SQL String functions"}),"."]})]}),"\n",(0,t.jsx)(n.h2,{id:"top",children:"TOP"}),"\n",(0,t.jsxs)(n.p,{children:["You can add a ",(0,t.jsx)(n.code,{children:"TOP"})," clause to your ",(0,t.jsx)(n.code,{children:"SELECT"})," statement to limit the number of rows returned by your query."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{1} title="Returns 10 rows"',children:"SELECT TOP 10\n      SubscriberKey\n    , PreferredChannel\n    , IIF(PreferredChannel = 'Email', EmailAddress, MobileNumber) AS PointOfContact\n"})}),"\n",(0,t.jsx)(n.h3,{id:"top-percent",children:"TOP PERCENT"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"TOP"})," clause is not limited to an integer; you can also ask for a specific per cent of rows with ",(0,t.jsx)(n.code,{children:"PERCENT"})," modifier:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:"{1}",children:"SELECT TOP 10 PERCENT\n      SubscriberKey\n    , PreferredChannel\n    , IIF(PreferredChannel = 'Email', EmailAddress, MobileNumber) AS PointOfContact\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The number of rows will be rounded up to the nearest integer (so ",(0,t.jsx)(n.code,{children:"TOP 50 PERCENT"})," from Data Extension with 101 rows will return 51 rows)."]}),"\n",(0,t.jsx)(n.admonition,{title:"You Should Know",type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"PERCENT"})," modifier doesn't work in Query Studio and will produce an error there. However, it works perfectly in Automation Studio Query Activity."]})}),"\n",(0,t.jsx)(n.h3,{id:"top-with-order-by",children:"TOP with ORDER BY"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"TOP"})," clause best practice is to always use it with ",(0,t.jsx)(n.code,{children:"ORDER BY"}),". Only with sorted data, you will understand rows selection logic."]}),"\n",(0,t.jsxs)(n.p,{children:["To sort outcomes of your query, add ",(0,t.jsx)(n.code,{children:"ORDER BY"})," at the end - along with column(s) that used for sorting."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{4} title="Top 10% with the lowest Quiz Score"',children:"SELECT TOP 10 PERCENT\n      SubscriberKey\n    , QuizScore\nORDER BY QuizScore\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can control the sort order by applying ",(0,t.jsx)(n.code,{children:"ASC"})," (default) and ",(0,t.jsx)(n.code,{children:"DESC"})," after the column."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{4} title="Top 10% with highest Quiz Score"',children:"SELECT TOP 10 PERCENT\n      SubscriberKey\n    , QuizScore\nORDER BY QuizScore DESC\n"})}),"\n",(0,t.jsxs)(n.admonition,{title:"You Should Know",type:"note",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ORDER BY"})," sorts Text fields alphabetically. It might surprise you if you store numbers in such field type, as it will order ",(0,t.jsx)(n.code,{children:"10"})," before ",(0,t.jsx)(n.code,{children:"2"}),"."]}),(0,t.jsxs)(n.p,{children:["The best solution is to use the appropriate field type for numbers. However, if for whatever reason you cannot do it, leverage ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-conversion-functions#convert",children:(0,t.jsx)(n.code,{children:"CONVERT"})}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{4} title="Top 10% with highest Quiz Score if QuizScore is a Text field"',children:"SELECT TOP 10 PERCENT\n      SubscriberKey\n    , QuizScore\nORDER BY CONVERT(INT, QuizScore) DESC\n"})}),(0,t.jsxs)(n.p,{children:["For example, it will be needed when you ",(0,t.jsx)(n.code,{children:"ORDER BY"})," ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-aggregate-functions#count",children:(0,t.jsx)(n.code,{children:"COUNT"})})," within ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-aggregate-functions#group-by",children:(0,t.jsx)(n.code,{children:"GROUP BY"})}),"."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ORDER BY"})," will also sort dates in Marketing Cloud alphabetically using month(start with ",(0,t.jsx)(n.code,{children:"Apr"}),", follow up with ",(0,t.jsx)(n.code,{children:"Aug"})," and so on). You can fix it by using ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-conversion-functions#convert",children:(0,t.jsx)(n.code,{children:"CONVERT"})})," to ",(0,t.jsx)(n.code,{children:"DATE"})," (if you to order only by date) or ",(0,t.jsx)(n.code,{children:"DATETIME2"})," (if time is important for ordering as well), just as in previous example."]})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ORDER BY"})," can operate not only on the selected column. You already saw above that you can use expression (even ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-case#conditional-values-with-case",children:(0,t.jsx)(n.code,{children:"CASE"})}),"!) to calculate the sorting value, but it's much more flexible."]}),"\n",(0,t.jsxs)(n.p,{children:["You can sort using a column not picked in ",(0,t.jsx)(n.code,{children:"SELECT"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{3} title="Top 10% with highest Quiz Score, without returning the score"',children:"SELECT TOP 10 PERCENT\n      SubscriberKey\nORDER BY QuizScore DESC\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can sort using an ",(0,t.jsx)(n.a,{href:"#aliasing-with-as",children:"alias"})," defined in the ",(0,t.jsx)(n.code,{children:"SELECT"})," statement:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{3-4} title="Top 10% with highest Quiz Score, using an alias"',children:"SELECT TOP 10 PERCENT\n      SubscriberKey\n    , QuizScore AS Points\nORDER BY Points DESC\n"})}),"\n",(0,t.jsx)(n.p,{children:"And you can even sort using multiple values - each can have different sorting order."}),"\n",(0,t.jsx)(n.p,{children:"SQL will sort using the first provided column and then, while maintaining the order of the previous column, will sort again using the next value. Let's jump to an example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{4} title="Top 10% with highest Quiz Score, first to solve"',children:"SELECT TOP 10 PERCENT\n      SubscriberKey\n    , QuizScore\nORDER BY QuizScore DESC, QuizFilledDate ASC\n"})}),"\n",(0,t.jsx)(n.p,{children:"The query will first sort using QuizScore to find people with the most points. Next, it will apply the second sort on the date of quiz completion. As an outcome, we will have the highest scorers sorted from first to last within each high score."}),"\n",(0,t.jsx)(n.h3,{id:"top-with-ties",children:"TOP WITH TIES"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes even such complex sorting might not be enough."}),"\n",(0,t.jsx)(n.p,{children:"For example, let's capture three top scorers of our quiz:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'title="Three top scorers"',children:"SELECT TOP 3\n    SubscriberKey\n    , QuizScore\nORDER BY QuizScore DESC\n"})}),"\n",(0,t.jsx)(n.p,{children:"As an outcome, we got:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"SubscriberKey"}),(0,t.jsx)(n.th,{children:"QuizScore"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"XYZ"}),(0,t.jsx)(n.td,{children:"97"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ACE"}),(0,t.jsx)(n.td,{children:"97"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PIL"}),(0,t.jsx)(n.td,{children:"96"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"However, if we check our Data Extension, we could see more people with the same score:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"SubscriberKey"}),(0,t.jsx)(n.th,{children:"QuizScore"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"XYZ"}),(0,t.jsx)(n.td,{children:"97"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ACE"}),(0,t.jsx)(n.td,{children:"97"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PIL"}),(0,t.jsx)(n.td,{children:"96"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"UDO"}),(0,t.jsx)(n.td,{children:"96"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"SDJ"}),(0,t.jsx)(n.td,{children:"96"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["What can we do to capture everyone with a score good enough for the Top 3 status? ",(0,t.jsx)(n.code,{children:"WITH TIES"})," will help:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'title="Despite asking for TOP 3, it will return 5 rows due to ties"',children:"SELECT TOP 3 WITH TIES\n    SubscriberKey\n    , QuizScore\nORDER BY QuizScore DESC\n"})}),"\n",(0,t.jsxs)(n.p,{children:["With those two words added after the ",(0,t.jsx)(n.code,{children:"TOP"})," clause, our query will return all rows that match the sorted value in the last row. It, however, means that the number of outcomes is not set in stone, so be sure to prepare your next steps for that uncertainty."]}),"\n",(0,t.jsx)(n.admonition,{title:"You Should Know",type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"WITH TIES"})," modifier doesn't work in Query Studio and will produce an error there. However, it works perfectly in Automation Studio Query Activity."]})}),"\n",(0,t.jsx)(n.h2,{id:"distinct",children:"DISTINCT"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"DISTINCT"})," clause is the most straightforward deduplication tool."]}),"\n",(0,t.jsxs)(n.p,{children:["When added to the ",(0,t.jsx)(n.code,{children:"SELECT"})," statement, it will check all available values and leave unique ones."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{1} title="Unique domains in your database sorted alphabetically"',children:"SELECT DISTINCT\n      Domain\nORDER BY Domain\n"})}),"\n",(0,t.jsx)(n.p,{children:"It's perfect for single-column deduplication. However, when you apply it to a select with multiple columns, it will leverage all of them for deduplication."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:'{1} title="One row for each SubscriberKey - Domain pair, sorted alphabetically by domain"',children:"SELECT DISTINCT\n      SubscriberKey\n    , Domain\nORDER BY Domain\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the above case, you will get a separate row for each Subscriber Key - Domain pair. It means that you might receive multiple rows with the same Subscriber Key (but each with a different Domain). And you will undoubtedly see numerous rows with the same domain (but each with a different Subscriber key)."}),"\n",(0,t.jsx)(n.h3,{id:"distinct-with-top",children:"DISTINCT with TOP"}),"\n",(0,t.jsxs)(n.p,{children:["You can use both ",(0,t.jsx)(n.code,{children:"DISTINCT"})," and ",(0,t.jsx)(n.code,{children:"TOP"})," in the same query."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:"{1}",children:"SELECT DISTINCT TOP 10 PERCENT\n      Domain\nORDER BY Domain\n"})}),"\n",(0,t.jsxs)(n.p,{children:["SQL will first deduplicate the results using ",(0,t.jsx)(n.code,{children:"DISTINCT"})," and then limit output with ",(0,t.jsx)(n.code,{children:"TOP"}),"."]}),"\n",(0,t.jsx)(n.admonition,{title:"You Should Know",type:"note",children:(0,t.jsxs)(n.p,{children:["There is an important exception from stadard rules if you are using ",(0,t.jsx)(n.code,{children:"DISTINCT"})," and ",(0,t.jsx)(n.code,{children:"ORDER BY"})," in the same query. You have to add all columns used for sorting to the ",(0,t.jsx)(n.code,{children:"SELECT"}),", which might have painful impact on your deduplication rules."]})}),"\n",(0,t.jsx)(n.h2,{id:"table-prefixes",children:"Table Prefixes"}),"\n",(0,t.jsx)(n.p,{children:"Additional elements that you will be using in many of your queries are table prefixes for selecting columns from multiple joined Data Extensions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT\n      _Subscriber.SubscriberKey\n    , _EnterpriseAttribute.LastName\n"})}),"\n",(0,t.jsxs)(n.p,{children:["I'm covering this topic in-depth in ",(0,t.jsxs)(n.a,{href:"/docs/sql/sfmc-sql-join#table-name-prefix",children:[(0,t.jsx)(n.code,{children:"JOIN"})," statement documentation"]}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"flow-control",children:"Flow control"}),"\n",(0,t.jsxs)(n.p,{children:["Despite official ",(0,t.jsx)(n.a,{href:"https://help.salesforce.com/articleView?id=mc_as_sql_reference.htm&type=5",children:"SFMC SQL documentation"})," stating that it supports the ",(0,t.jsx)(n.code,{children:"IF"})," constructs, I could not make it work."]}),"\n",(0,t.jsx)(n.h2,{id:"variables--functions",children:"Variables & Functions"}),"\n",(0,t.jsx)(n.p,{children:"Unfortunately, SFMC SQL does not support variables."}),"\n",(0,t.jsxs)(n.p,{children:["Fortunately, it does support (selected) functions. Learn more about them in SFMC SQL Functions documentation pages related to ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-string-functions",children:"Strings"}),", ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-date-functions",children:"Dates"}),", ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-numeric-functions",children:"Numbers"}),", ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-conversion-functions",children:"Conversion"}),", ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-aggregate-functions",children:"Aggregation"}),", ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-case",children:(0,t.jsx)(n.code,{children:"CASE"})})," and ",(0,t.jsx)(n.a,{href:"/docs/sql/sfmc-sql-like",children:(0,t.jsx)(n.code,{children:"LIKE"})}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},6748:(e,n,s)=>{s.d(n,{U:()=>r});s(6540);const t="leadText_qzwo";var i=s(4848);const r=e=>{let{content:n}=e;return(0,i.jsx)(i.Fragment,{children:(0,i.jsx)("p",{id:t,children:n})})}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);