"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[1691],{4759:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var i=o(4848),t=o(8453),s=o(6748);const r={id:"js-loops",title:"JS Loops",sidebar_label:"Loops",description:"JavaScript offers four for loops and two while loops. What's the difference?",image:"img/og/og-image-js-loops.png",tags:["JavaScript"]},l=void 0,a={id:"js/js-loops",title:"JS Loops",description:"JavaScript offers four for loops and two while loops. What's the difference?",source:"@site/docs/js/js-loops.mdx",sourceDirName:"js",slug:"/js/js-loops",permalink:"/docs/js/js-loops",draft:!1,unlisted:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/js/js-loops.mdx",tags:[{inline:!0,label:"JavaScript",permalink:"/docs/tags/java-script"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1649279138e3,frontMatter:{id:"js-loops",title:"JS Loops",sidebar_label:"Loops",description:"JavaScript offers four for loops and two while loops. What's the difference?",image:"img/og/og-image-js-loops.png",tags:["JavaScript"]},sidebar:"docs",previous:{title:"If & Switch",permalink:"/docs/js/js-if-and-switch"},next:{title:"DOM",permalink:"/docs/js/js-dom"}},c={},d=[{value:"For Loops",id:"for-loops",level:2},{value:"For",id:"for",level:3},{value:"For of",id:"for-of",level:3},{value:"Key-Value Pair of Object",id:"key-value-pair-of-object",level:4},{value:"Index-Value Pair of Array",id:"index-value-pair-of-array",level:4},{value:"In-place Destructuring",id:"in-place-destructuring",level:4},{value:"Iterating over Function Arguments",id:"iterating-over-function-arguments",level:4},{value:"For in",id:"for-in",level:3},{value:"forEach",id:"foreach",level:3},{value:"While Loops",id:"while-loops",level:2},{value:"While",id:"while",level:3},{value:"Do While",id:"do-while",level:3}];function h(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.U,{content:"JavaScript offers four for loops and two while loops. What's the difference?"}),"\n",(0,i.jsx)(n.h2,{id:"for-loops",children:"For Loops"}),"\n",(0,i.jsx)(n.h3,{id:"for",children:"For"}),"\n",(0,i.jsxs)(n.p,{children:["The classic ",(0,i.jsx)(n.code,{children:"for"})," loop might be a bit long to write, but it has a lot of excellent properties:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Available in each JavaScript version."}),"\n",(0,i.jsxs)(n.li,{children:["Works with ",(0,i.jsx)(n.code,{children:"break"})," and ",(0,i.jsx)(n.code,{children:"continue"})," statements for better looping control."]}),"\n",(0,i.jsx)(n.li,{children:"Both initial and increment expressions can do multiple things."}),"\n",(0,i.jsx)(n.li,{children:"Condition is not limited to iterable size."}),"\n",(0,i.jsx)(n.li,{children:"Fast across various scenarios."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{1} title="Example of for loop iterating over an array"',children:"for (let i = 0; i < array.length; i++) {\n    console.log(array[i]);\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Let's break the script down to five steps each ",(0,i.jsx)(n.code,{children:"for"})," loop follows:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Execute initial expression (",(0,i.jsx)(n.code,{children:"let i = 0"})," in the above example)."]}),"\n",(0,i.jsxs)(n.li,{children:["Evaluate the condition (",(0,i.jsx)(n.code,{children:"i < array.length"}),"). If it is false - the loop terminates. If true:"]}),"\n",(0,i.jsxs)(n.li,{children:["The statement within the loop is executed (",(0,i.jsx)(n.code,{children:"console.log(array[i])"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Finally, the increment expression will evaluate (",(0,i.jsx)(n.code,{children:"i++"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"The loop goes back to step 2 until it is false."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If in doubt of which loop to use, pick the classic. To optimize speed, cache the length used for condition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{1} title="Initial expression assigns array.length to a variable to cache it"',children:"for (let i = 0, arrayLength = array.length; i < arrayLength; i++) {\n    console.log(array[i]);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"for-of",children:"For of"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"For...of"})," loop came to JavaScript in ES6 (as many good things have). It loops over iterables: strings, arrays, NodeLists, maps, sets and other array-like objects."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{1} title="Example of for...of loop iterating over letters of a string"',children:"for (const letter of name) {\n    console.log(letter);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This loop is blazing fast for very small iterables. From martech perspective, it is a fantastic tool to iterate over NodeLists/HTMLCollections when working with DOM. Works great for working with outputs of API calls. Worth also using for operating on split-string-arrays (for example comma-separated strings)."}),"\n",(0,i.jsxs)(n.p,{children:["It has many qualities that set it apart from the classic ",(0,i.jsx)(n.code,{children:"for"})," loop:"]}),"\n",(0,i.jsx)(n.h4,{id:"key-value-pair-of-object",children:"Key-Value Pair of Object"}),"\n",(0,i.jsxs)(n.p,{children:["It can iterate over key-value paired iterators (for example map or even object - thanks to ",(0,i.jsx)(n.code,{children:"Object.entries()"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"{1}",children:"for (const [key, value] of Object.entries(object)) {\n    console.log(key, value);\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"index-value-pair-of-array",children:"Index-Value Pair of Array"}),"\n",(0,i.jsx)(n.p,{children:"It can catch array values along with indexes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"{1}",children:"for (const [index, value] of array.entries()) {\n    console.log(index, value);\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"in-place-destructuring",children:"In-place Destructuring"}),"\n",(0,i.jsx)(n.p,{children:"It can destructure object on the go:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"{3}",children:"const persons = [{ name: 'John Smith' }, { name: 'Jane Doe' }];\n\nfor (const { name } of persons) {\n    console.log(name); // returns: 'John Smith' \\n 'Jane Doe'\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, ",(0,i.jsx)(n.code,{children:"for...of"})," loop not only iterates over objects within an array but also automatically destructures them by getting the value of the ",(0,i.jsx)(n.code,{children:"name"})," key. Thanks to it, the ",(0,i.jsx)(n.code,{children:"console.log"})," will be printing the names in one line."]}),"\n",(0,i.jsx)(n.h4,{id:"iterating-over-function-arguments",children:"Iterating over Function Arguments"}),"\n",(0,i.jsxs)(n.p,{children:["Thanks to existance of special function variable ",(0,i.jsx)(n.code,{children:"arguments"}),", ",(0,i.jsx)(n.code,{children:"for...of"})," can loop over undefined amount of arguments."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{3} title="Function will return sum of any number of integers provided thanks to for-of loop"',children:"function sum() {\n  let sum = 0;\n  for (const number of arguments) {\n    sum += number;\n  }\n  return sum;\n}\n\nsum(1, 2, 3); // returns: 6\n"})}),"\n",(0,i.jsx)(n.h3,{id:"for-in",children:"For in"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"for...in"})," loop is a good idea when you want to loop over object prototype methods and properties. Any other scenario? Not worth it. Don't use it. Just don't."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"{1}",children:"for (const key in object) {\n    console.log(key);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"foreach",children:"forEach"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"forEach"})," iterates directly over an array. It applies function to each item but does not return anything."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"{1}",children:"array.forEach((item, index, array) => {\n    console.log(`${item} has index ${index}`);\n    if (index === array.length - 1) {\n        console.log('Last iteration!');\n    }\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"It differs from other loops:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No need to define an iteration variable."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"continue"})," or ",(0,i.jsx)(n.code,{children:"break"})," won't work."]}),"\n",(0,i.jsx)(n.li,{children:"In the callback function, we can leverage up to three optional parameters for an array: item, index, array."}),"\n",(0,i.jsx)(n.li,{children:"Because it uses a callback function, the logic is block scoped."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In most scenarios, the ",(0,i.jsx)(n.code,{children:"for...of"})," loop will be a better choice."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"while-loops",children:"While Loops"}),"\n",(0,i.jsx)(n.h3,{id:"while",children:"While"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"while"})," loop executes its statement as long as the condition evaluates to true."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{2} title="Infinite while loop"',children:"let run = true\nwhile (run === true) {\n    console.log('To the infinity and beyond!');\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To break out of ",(0,i.jsx)(n.code,{children:"while"})," loop, there must be logic within it that will change the condition to false (or a ",(0,i.jsx)(n.code,{children:"break"})," statement):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"{3}",children:"let run = true;\nlet i = 0;\nwhile (run === true) {\n    console.log('To the infinity and beyond!');\n    i++;\n    if (i > 10) {\n        run = false;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"or just:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{3} title="This loop has the same outcome as the one above"',children:"let run = true;\nlet i = 0;\nwhile (i <= 10) {\n    console.log('To the infinity and beyond!');\n    i++;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"while"})," loop is the best option for iterating over ",(0,i.jsx)(n.strong,{children:"big"})," arrays."]}),"\n",(0,i.jsx)(n.h3,{id:"do-while",children:"Do While"}),"\n",(0,i.jsxs)(n.p,{children:["Same as ",(0,i.jsx)(n.code,{children:"while"}),", but the code runs once before evaluating the condition."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"{1,3}",children:"do {\n    console.log('Running!');\n} while (run === true)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Perfect when you need to run an API call, check whether there are more pages of outcomes and act accordingly."}),"\n",(0,i.jsxs)(n.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(n.p,{children:["JavaScript support labels for loops. It allows you to name each loop for even better control with both ",(0,i.jsx)(n.code,{children:"continue"})," and ",(0,i.jsx)(n.code,{children:"break"})," statements."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'{1,8} title="Labelled loop example using a nested for loops"',children:"MainLoopLabel:\nfor (let i = 0; i < array.length; i++) {\n    // Logic\n    SecondaryLoopLabel:\n    for (let j = 0; j < array[i].length; j++) {\n        // Logic\n        if (array[i][j] === 'important') {\n            break MainLoopLabel;\n        };\n    };\n};\n"})}),(0,i.jsxs)(n.p,{children:["As you can see, in the first line we added a label for the first ",(0,i.jsx)(n.code,{children:"for"})," loop. Then, in the statement within the second ",(0,i.jsx)(n.code,{children:"for"})," loop, we used ",(0,i.jsx)(n.code,{children:"break"})," followed by the label. Once executed, it will break both for loops, even if there were still iterations in the main one. The same approach works with the ",(0,i.jsx)(n.code,{children:"continue"})," statement."]})]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},6748:(e,n,o)=>{o.d(n,{U:()=>s});o(6540);const i="leadText_qzwo";var t=o(4848);const s=e=>{let{content:n}=e;return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("p",{id:i,children:n})})}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var i=o(6540);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);