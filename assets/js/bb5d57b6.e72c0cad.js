"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[8773],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2043:function(e,t,n){n.d(t,{m:function(){return o}});var a=n(7294),r="leadText_16va",o=function(e){var t=e.content;return a.createElement(a.Fragment,null,a.createElement("p",{id:r},t))}},383:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return m},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(4137)),i=n(2043),l=["components"],s={id:"sfmc-sql-numeric-functions",title:"SFMC SQL Numeric Functions",sidebar_label:"Numeric Functions",description:"Take control over numbers with built-in SQL functions. Let the query do the job.",image:"img/og/og-image-sql-numeric-functions.png"},u=void 0,c={unversionedId:"sql/sfmc-sql-numeric-functions",id:"sql/sfmc-sql-numeric-functions",isDocsHomePage:!1,title:"SFMC SQL Numeric Functions",description:"Take control over numbers with built-in SQL functions. Let the query do the job.",source:"@site/docs/sql/sfmc-sql-numeric-functions.mdx",sourceDirName:"sql",slug:"/sql/sfmc-sql-numeric-functions",permalink:"/docs/sql/sfmc-sql-numeric-functions",editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/sql/sfmc-sql-numeric-functions.mdx",tags:[],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1628717576,formattedLastUpdatedAt:"8/11/2021",frontMatter:{id:"sfmc-sql-numeric-functions",title:"SFMC SQL Numeric Functions",sidebar_label:"Numeric Functions",description:"Take control over numbers with built-in SQL functions. Let the query do the job.",image:"img/og/og-image-sql-numeric-functions.png"},sidebar:"snippets",previous:{title:"Date Functions",permalink:"/docs/sql/sfmc-sql-date-functions"},next:{title:"Conversion Functions",permalink:"/docs/sql/sfmc-sql-conversion-functions"}},m=[{value:"MIN and MAX",id:"min-and-max",children:[]},{value:"AVG",id:"avg",children:[]},{value:"SUM",id:"sum",children:[]},{value:"FORMAT with Numbers",id:"format-with-numbers",children:[{value:"Standard number formats",id:"standard-number-formats",children:[]},{value:"Custom number formats",id:"custom-number-formats",children:[]}]}],p={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.m,{content:"Take control over numbers with built-in SQL functions. Let the query do the job.",mdxType:"LeadText"}),(0,o.kt)("p",null,"Salesforce Marketing Cloud SQL implementation does not support user-defined functions. There are, however, multiple built-in functions that are useful on a day-to-day basis when working with queries."),(0,o.kt)("p",null,"Here, I will cover only selected numeric functions that I find most useful for Marketing Automation purposes. They will help you do the necessary calculations or format the numbers to match your needs."),(0,o.kt)("h2",{id:"min-and-max"},"MIN and MAX"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MIN")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX")," functions allow you to find the minimum and maximum values of column(s) in the selected data extension."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{1} title="What is your highest subscriber bounce count?"',"{1}":!0,title:'"What',is:!0,your:!0,highest:!0,subscriber:!0,bounce:!0,'count?"':!0},"SELECT MAX(s.BounceCount) AS HighestBounceCount\nFROM _Subscribers AS s\n")),(0,o.kt)("p",null,"Will you use it frequently? Probably not. Is it useless? Oh no."),(0,o.kt)("p",null,"Let's say you have a data extension storing information about a competition - including the number of points that participants gathered. Now it is time to send congratulations to the winner. ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX")," function will make it easy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{7-8} title="Get a Subscriber Key and Points of all the customers that have the biggest amount of points"',"{7-8}":!0,title:'"Get',a:!0,Subscriber:!0,Key:!0,and:!0,Points:!0,of:!0,all:!0,the:!0,customers:!0,that:!0,have:!0,biggest:!0,amount:!0,'points"':!0},"SELECT\n      comp.SubscriberKey\n    , comp.CompetitionPoints\nFROM CompetitionDataExtension AS comp\nWHERE\n    comp.CompetitionPoints = (\n        SELECT MAX(comp2.CompetitionPoints)\n        FROM CompetitionDataExtension AS comp2\n    )\n")),(0,o.kt)("p",null,"However, my favourite use case for ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX")," is debugging Data Extensions and their values. Especially useful when working with data imports from external systems \u2014 for example, pulling data from Sales Cloud via Marketing Cloud Connect."),(0,o.kt)("p",null,"You might frequently encounter a situation where your automations responsible for moving data from Synchronized Data Extensions to standard Data Extensions crashes with cryptic information about truncated data. In most cases, the reason is a value exceeding the maximum length you set for the column in your local Data Extension."),(0,o.kt)("p",null,"How to find the culprit? With ",(0,o.kt)("inlineCode",{parentName:"p"},"MAX")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-string-functions#len"},(0,o.kt)("inlineCode",{parentName:"a"},"LEN"))," functions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",19:!0,className:"language-sql",metastring:'{2-3} title="For Datetime values, it will output 19 characters"',"{2-3}":!0,title:'"For',Datetime:!0,"values,":!0,it:!0,will:!0,output:!0,'characters"':!0},"SELECT\n      MAX(LEN(c.Id))    AS SubscriberKey\n    , MAX(LEN(c.Email)) AS EmailAddress\n    /* Rest of the Contact fields you synchronized from Contact object */\nFROM Contact_Salesforce AS c\n")),(0,o.kt)("p",null,"This query can be used ",(0,o.kt)("em",{parentName:"p"},"ad hoc")," in ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-basics#query-studio"},"Query Studio")," to quickly show your current maximum lengths of the values coming from Sales Cloud. Compare them to the length of your fields in the destination data extension to see which column is crashing your automation."),(0,o.kt)("p",null,"You can also extend it with ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,o.kt)("inlineCode",{parentName:"a"},"WHERE"))," containing current lengths of fields in that data extension and make it part of your automation. It will find the records too long for the data extension, log them into data extension and allow you to leverage Verification Activity to alert you about the issue. Nice and clean."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MAX")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"MIN")," are also instrumental as a ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-aggregate-functions#min-and-max"},"part of an aggregate query"),"."),(0,o.kt)("h2",{id:"avg"},"AVG"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"AVG")," function returns the average value in a given column (excluding ",(0,o.kt)("inlineCode",{parentName:"p"},"NULL")," values)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{1} title="What is your average subscriber bounce count?"',"{1}":!0,title:'"What',is:!0,your:!0,average:!0,subscriber:!0,bounce:!0,'count?"':!0},"SELECT AVG(s.BounceCount) AS AverageBounceCount\nFROM _Subscribers AS s\n")),(0,o.kt)("p",null,"The above example might not look like much value, but with the help of ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-date-functions#datediff"},(0,o.kt)("inlineCode",{parentName:"a"},"DATEDIFF"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-conversion-functions#convert"},(0,o.kt)("inlineCode",{parentName:"a"},"CONVERT"))," functions you can make it much more interesting:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{1} title="What is the average age of your Subscribers?"',"{1}":!0,title:'"What',is:!0,the:!0,average:!0,age:!0,of:!0,your:!0,'Subscribers?"':!0},"SELECT DATEDIFF(MONTH, CONVERT(DATETIME, AVG(CONVERT(FLOAT, DateJoined))), GETDATE()) AS SubscribersAverageAgeInMonths\nFROM _Subscribers\n")),(0,o.kt)("p",null,"However, ",(0,o.kt)("inlineCode",{parentName:"p"},"AVG")," shows its true power with ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,o.kt)("inlineCode",{parentName:"a"},"WHERE"))," filtering:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{3} title="Let\'s get your above-average spenders for an e-commerce up-sell campaign"',"{3}":!0,title:"\"Let's",get:!0,your:!0,"above-average":!0,spenders:!0,for:!0,an:!0,"e-commerce":!0,"up-sell":!0,'campaign"':!0},"SELECT SubscriberKey\nFROM Purchases\nWHERE Price > AVG(Price)\n")),(0,o.kt)("p",null,"You can mix two previous queries to create separate segments for your fresh and old subscribers."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AVG")," function is also beneficial as a ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-aggregate-functions#avg"},"part of an aggregate query"),"."),(0,o.kt)("h2",{id:"sum"},"SUM"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SUM")," function allows you to calculate the sum of values."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{1} title="What is your total bounce count?"',"{1}":!0,title:'"What',is:!0,your:!0,total:!0,bounce:!0,'count?"':!0},"SELECT SUM(BounceCount) AS AllBouncesCount\nFROM _Subscribers\n")),(0,o.kt)("p",null,"It is helpful nearly only as a ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-aggregate-functions#sum"},"part of an aggregate query"),"."),(0,o.kt)("h2",{id:"format-with-numbers"},"FORMAT with Numbers"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"FORMAT")," works only with datetime and numeric values, outputs a string and requires:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Value to be formatted (can be a column, string or function)"),(0,o.kt)("li",{parentName:"ol"},"Format specifier to be applied"),(0,o.kt)("li",{parentName:"ol"},"Optionally - ISO culture code")),(0,o.kt)("p",null,"It is a perfect tool to manipulate any numbers (or numeric strings with the help of ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-conversion-functions"},"conversion"),") available in your Data Extensions."),(0,o.kt)("h3",{id:"standard-number-formats"},"Standard number formats"),(0,o.kt)("p",null,"Standard formats use one required and one optional element."),(0,o.kt)("p",null,"The required one is the format specifier - which tells what the outcome should be. The optional is precision - it allows you to change the value on the go (for example, round it to two decimal places). If you do not use precision, the value will stay with its current precision."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Precision might lead to rounding. Note also the US thousands separator"',title:'"Precision',might:!0,lead:!0,to:!0,"rounding.":!0,Note:!0,also:!0,the:!0,US:!0,thousands:!0,'separator"':!0},"SELECT\n      FORMAT(1234.56, 'N')  AS WithoutCustomPrecision     /* Output: 1,234.56 */\n    , FORMAT(1234.56, 'N1') AS RoundedWithCustomPrecision /* Output: 1,234.6 */\n")),(0,o.kt)("p",null,"There are nine standard formats available, but only a few are useful on a day-to-day basis in Salesforce Marketing Cloud:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Format specifier"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Example (for US culture)"),(0,o.kt)("th",{parentName:"tr",align:null},"Comment"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'C'/'c'"),(0,o.kt)("td",{parentName:"tr",align:null},"Currency"),(0,o.kt)("td",{parentName:"tr",align:null},"$1,234.56"),(0,o.kt)("td",{parentName:"tr",align:null},"You can pass a culture code as a third argument to format the value straight to needed currency (including currency symbol and appropriate separators)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'D'/'d'"),(0,o.kt)("td",{parentName:"tr",align:null},"Decimal"),(0,o.kt)("td",{parentName:"tr",align:null},"1235"),(0,o.kt)("td",{parentName:"tr",align:null},"Support integers only. Precision enforces a minimum number of digits (great for adding leading zeroes)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'N'/'n'"),(0,o.kt)("td",{parentName:"tr",align:null},"Number"),(0,o.kt)("td",{parentName:"tr",align:null},"1,234.56"),(0,o.kt)("td",{parentName:"tr",align:null},"Precision enforces a number of decimal places. You can pass a culture code as a third argument to format the value to country-specific notation")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'P'/'p'"),(0,o.kt)("td",{parentName:"tr",align:null},"Percent"),(0,o.kt)("td",{parentName:"tr",align:null},"12.34 %"),(0,o.kt)("td",{parentName:"tr",align:null},"Precision enforces a number of decimal places. You can pass a culture code as a third argument to format the value to country-specific notation")))),(0,o.kt)("p",null,"Just as highlighted in the table header - the examples are for the SFMC default US culture formating."),(0,o.kt)("p",null,"You can find the complete list of standard date format specifiers on ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings"},"Microsoft .Net Doc Pages"),"."),(0,o.kt)("h3",{id:"custom-number-formats"},"Custom number formats"),(0,o.kt)("p",null,"Of course, the formats shown above are not the limit of what you can do. Whenever you want something different, you can create a custom format by just providing a pattern:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Format specifier"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Comments"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'0'"),(0,o.kt)("td",{parentName:"tr",align:null},"Zero placeholder"),(0,o.kt)("td",{parentName:"tr",align:null},"Replaces the zero with the digit if available; otherwise, zero appears in the result string.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'#''"),(0,o.kt)("td",{parentName:"tr",align:null},"Number placeholder"),(0,o.kt)("td",{parentName:"tr",align:null},"Replaces the zero with the digit if available; otherwise, no number appears in the result string. It also ignores not significant zeroes (like leading ones)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'.'"),(0,o.kt)("td",{parentName:"tr",align:null},"Leading point"),(0,o.kt)("td",{parentName:"tr",align:null},"Informs the format function about desired decimal separator place")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'%'"),(0,o.kt)("td",{parentName:"tr",align:null},"Percentage placeholder"),(0,o.kt)("td",{parentName:"tr",align:null},"Multiplies the number by 100 and inserts per cent sign in the selected place")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'\\'"),(0,o.kt)("td",{parentName:"tr",align:null},"Escape character"),(0,o.kt)("td",{parentName:"tr",align:null},"Allows you to escape any format specifier symbol if you want it literally in the outcome")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"'string'/\"string\""),(0,o.kt)("td",{parentName:"tr",align:null},"String literal"),(0,o.kt)("td",{parentName:"tr",align:null},"Passes the string straight to the outcome")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"';'"),(0,o.kt)("td",{parentName:"tr",align:null},"Section separator"),(0,o.kt)("td",{parentName:"tr",align:null},"Allows you to pass different custom formats for positive, zero and negative values")))),(0,o.kt)("p",null,"Again, the examples are for the default US culture formatting and might look different for different cultures (for example, hour separator might be changed automatically to ",(0,o.kt)("inlineCode",{parentName:"p"},".")," for Italy)."),(0,o.kt)("p",null,"You can find the complete list of standard date format specifiers on ",(0,o.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings"},"Microsoft .Net Doc Pages"),"."),(0,o.kt)("p",null,"The custom number formats can do wonders for your personalization needs. Example? Sure!"),(0,o.kt)("p",null,"Let's say you want your customers to validate their phone numbers before you leverage the SMS channel. You have them in Mobile Connect compliant format (only digits, no spaces, country code included). ",(0,o.kt)("inlineCode",{parentName:"p"},"48520935815")," is not a very user-friendly format to validate. Let's fix it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",520:!0,935:!0,className:"language-sql",metastring:"{3} title=\"From '48520935815' to '(48) 520 935 815' in one line\"","{3}":!0,title:'"From',"'48520935815'":!0,to:!0,"'(48)":!0,"815'":!0,in:!0,one:!0,'line"':!0},"SELECT\n      s.SubscriberKey\n    , FORMAT(CONVERT(BIGINT, ea.MobileNumber), '(###) ### ### ###') AS FormattedPhone /* Output: (48) 520 935 815 */\nFROM _Subscribers AS s\n    INNER JOIN EnterpriseAttribute AS ea\n        ON ea._SubscriberID = s.SubscriberID\n")),(0,o.kt)("p",null,"As you can see, we had to use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-conversion-functions#case--convert"},(0,o.kt)("inlineCode",{parentName:"a"},"CONVERT"))," function with the ",(0,o.kt)("inlineCode",{parentName:"p"},"BIGINT")," parameter, as the MobileNumber is a Text field. Thanks to conversion, we can use numeric functions to format it quickly. It could get even better with ",(0,o.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-like"},(0,o.kt)("inlineCode",{parentName:"a"},"LIKE")," in ",(0,o.kt)("inlineCode",{parentName:"a"},"CASE"))," used to create different formats depending on the country code."),(0,o.kt)("p",null,"Another use case? Let's assume we have a VIPDiscount field. It contains a number between 0.00 and 0.99 that tells what discount is appropriate for the selected user based on their VIP status. You store it in decimal numeric because it is a much more accessible format for SSJS or AMPScript to calculate the final price of items promoted in communication."),(0,o.kt)("p",null,"However, showing the customer that he has a ",(0,o.kt)("inlineCode",{parentName:"p"},"0.33")," discount is not a good idea. ",(0,o.kt)("inlineCode",{parentName:"p"},"FORMAT")," can help us once more:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Depending on your needs you may use Standard format or a Custom one"',title:'"Depending',on:!0,your:!0,needs:!0,you:!0,may:!0,use:!0,Standard:!0,format:!0,or:!0,a:!0,Custom:!0,'one"':!0},"SELECT\n      FORMAT(VIPDiscount, 'P')       AS StandardFormattedVIPDiscount /* Output: 33.00 % */\n    , FORMAT(VIPDiscount, '-00.##%') AS CustomFormattedVIPDiscount   /* Output: -33% */\n")))}d.isMDXComponent=!0}}]);