"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[1873],{16411:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"interaction-studio/snippets/mcp-catalog-etl-metadata-viewer","title":"MCP Catalog ETL Metadata Viewer","description":"Debug your Marketing Cloud Personalization (Interaction Studio) Catalog Object Item attributes with the power of Serverside Code.","source":"@site/docs/interaction-studio/snippets/mcp-catalog-etl-metadata-viewer.mdx","sourceDirName":"interaction-studio/snippets","slug":"/interaction-studio/snippets/mcp-catalog-etl-metadata-viewer","permalink":"/docs/interaction-studio/snippets/mcp-catalog-etl-metadata-viewer","draft":false,"unlisted":false,"editUrl":"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/interaction-studio/snippets/mcp-catalog-etl-metadata-viewer.mdx","tags":[{"inline":true,"label":"Marketing Cloud","permalink":"/docs/tags/marketing-cloud"},{"inline":true,"label":"Marketing Cloud Personalization","permalink":"/docs/tags/marketing-cloud-personalization"},{"inline":true,"label":"Interaction Studio","permalink":"/docs/tags/interaction-studio"},{"inline":true,"label":"TypeScript","permalink":"/docs/tags/type-script"},{"inline":true,"label":"Data Management","permalink":"/docs/tags/data-management"}],"version":"current","lastUpdatedBy":"Mateusz D\u0105browski","lastUpdatedAt":1709977714000,"frontMatter":{"id":"mcp-catalog-etl-metadata-viewer","title":"MCP Catalog ETL Metadata Viewer","sidebar_label":"Catalog ETL Metadata Viewer","description":"Debug your Marketing Cloud Personalization (Interaction Studio) Catalog Object Item attributes with the power of Serverside Code.","image":"img/og/og-image-mcp-catalog-etl-metadata-viewer.png","tags":["Marketing Cloud","Marketing Cloud Personalization","Interaction Studio","TypeScript","Data Management"]},"sidebar":"docs","previous":{"title":"\u203a MC Personalization Snippets","permalink":"/docs/category/-mc-personalization-snippets"}}');var n=a(74848),o=a(28453),r=a(46748);a(64530);const s={id:"mcp-catalog-etl-metadata-viewer",title:"MCP Catalog ETL Metadata Viewer",sidebar_label:"Catalog ETL Metadata Viewer",description:"Debug your Marketing Cloud Personalization (Interaction Studio) Catalog Object Item attributes with the power of Serverside Code.",image:"img/og/og-image-mcp-catalog-etl-metadata-viewer.png",tags:["Marketing Cloud","Marketing Cloud Personalization","Interaction Studio","TypeScript","Data Management"]},l=void 0,d={},c=[{value:"Problem with debugging Catalog data",id:"problem-with-debugging-catalog-data",level:2},{value:"Solution",id:"solution",level:2},{value:"Implementation Guide",id:"implementation-guide",level:3},{value:"Serverside Code",id:"serverside-code",level:3},{value:"Limitations",id:"limitations",level:2},{value:"Data scope",id:"data-scope",level:3},{value:"Data quality",id:"data-quality",level:3},{value:"Context.event.fields.item",id:"contexteventfieldsitem",level:3},{value:"Options",id:"options",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.U,{content:"Debug your Marketing Cloud Personalization (Interaction Studio) Catalog Object Item attributes with the power of Serverside Code."}),"\n",(0,n.jsx)(t.h2,{id:"problem-with-debugging-catalog-data",children:"Problem with debugging Catalog data"}),"\n",(0,n.jsxs)(t.p,{children:["Marketing Cloud Personalization (Interaction Studio) can pull ",(0,n.jsx)(t.a,{href:"/docs/interaction-studio/mcp-catalog-architecture",children:"product, content and related catalog data"})," from multiple sources and does it continuously. That's perfect when all works great, but debugging features are minimal once you see some data discrepancies."]}),"\n",(0,n.jsx)(t.p,{children:"Sure, SFTP stores processed CSV Feed files, but finding the culprit takes work, especially if you push frequently with delta files."}),"\n",(0,n.jsx)(t.p,{children:"Knowing which exact ETL load introduced problematic attribute values is a tremendous help in finding the root cause of the issue and rectifying the data pipeline. While it is available only for custom attributes (hover over the value to see it), we can:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://ideas.salesforce.com/s/idea/a0B8W00000NWbmJUAT/full-mcp-catalog-metadata-visibility",children:"Vote for IdeaExchange"})," to make it perfect out-of-the-box."]}),"\n",(0,n.jsx)(t.li,{children:"Build a more powerful custom solution for it in the meantime."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"solution",children:"Solution"}),"\n",(0,n.jsxs)(t.p,{children:["Inspired by the excellent User Metadata Serverside template created by ",(0,n.jsx)(t.a,{href:"https://www.linkedin.com/in/christopherlong/",children:"Christopher Long"})," available ",(0,n.jsx)(t.a,{href:"https://github.com/christopher-longSFDC/mcp/wiki/Serverside-Templates",children:"here"})," I decided to create something similar for the Catalog Object data."]}),"\n",(0,n.jsx)(t.p,{children:"A Serverside Template that leverages built-in Simulated Payload Preview available in Template Editor to display hidden changelog for ETL updates: attribute's current value, timeframe it was first introduced and first CSV that provided it to MCP."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-json",metastring:'title="Example response"',children:'"item": {\n    "attributes": {\n        "archived": {\n            "value": false,\n            "addedBySource": "ETL",\n            "addedByFile": "product-2022-12-05_08-19-35.csv",\n            "addedDate": "Dec 05 2022 07:25:30"\n        },\n        "brand":{\n            "value":"Apple",\n            "addedBySource":"Not ETL"\n        }\n    }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"This approach leverages native features of the platform to access unsurfaced data in a techy but easily transferable format."}),"\n",(0,n.jsxs)(t.p,{children:["Additionally, it's a great way to showcase some ",(0,n.jsx)(t.a,{href:"/docs/interaction-studio/mcp-serverside-code-basics",children:"MCP Serverside Code"})," approaches that can be useful for building standard campaign templates."]}),"\n",(0,n.jsx)(t.h3,{id:"implementation-guide",children:"Implementation Guide"}),"\n",(0,n.jsx)(t.p,{children:"Implementation is straightforward, and you can have a working solution within a minute."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Go to SFMC \xbb Personalization"}),"\n",(0,n.jsx)(t.li,{children:"On the left pane, hover over Server-Side and click on Server-Side and Triggered Templates"}),"\n",(0,n.jsx)(t.li,{children:"Click New Template"}),"\n",(0,n.jsx)(t.li,{children:'Provide a meaningful name (for example: "Catalog ETL Metadata Viewer")'}),"\n",(0,n.jsx)(t.li,{children:"Copy-paste the code available below"}),"\n",(0,n.jsx)(t.li,{children:"Save"}),"\n",(0,n.jsx)(t.li,{children:"Use :)"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"You don't need to Publish a template to leverage the Simulated Payload Preview. Keeping it unpublished guarantees no one will use it for a live Campaign."}),"\n",(0,n.jsx)(t.h3,{id:"serverside-code",children:"Serverside Code"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"export class CatalogETLMetadataViewer implements CampaignTemplateComponent {\n\n    @header(' ')\n\n    @markdown(`\n##### How to use\n\nIn the Payload Preview pane on the right:\n\n1. Select catalog object in the Current Item Type\n2. Select item in the Current Item\n3. View the Details in the section below\n\nOptionally, you can modify the scope of returned data in the left Configuration pane.\n`)\n\n    @title('Item attribute metadata to display:')\n    @subtitle('File and Change Date are available only for the ETL Source.')\n    showItemAttributeDetails: ('Value'|'Source'|'File'|'Change Date'|'Locale')[] = ['Value', 'Source', 'File', 'Change Date'];\n\n    @markdown(`Platform displays partially incorrect data when you manually Save Item in the Catalog, learn more [here](https://mateuszdabrowski.pl/docs/interaction-studio/snippets/mcp-catalog-etl-metadata-viewer/).`)\n\n    @title('Item non-attribute values to display:')\n    @subtitle('Only values are available - no Source/File/Change Date/Locale data is exposed by the platform.')\n    showItemContextDetails: ('ID'|'Location'|'Related Catalog Objects'|'Categories'|'SKUs')[];\n\n    run(context: CampaignComponentContext) {\n        // Pulls Catalog Object type from Simulation configuration\n        const itemType = context.event.itemType();\n        // Pulls selected Item ID from Simulation configuration\n        const itemId = JSON.parse(context.event.fields.item as string)._id.value;\n        // Pulls full Item data from the Catalog\n        const itemDetail = context.services.catalog.findItem(itemType, itemId);\n\n        // Prepares the payload response according to Configuration pane\n        function itemProcessor(item, config) {\n            let processedItem = {\n                attributes: {},\n            };\n            const attributes = processedItem.attributes;\n\n            const makeEpochReadableAgain = epoch => String(new Date(epoch)).substring(4, 24);\n\n            // Conditional non-attribute data stuffing\n            if (config.itemContext?.includes('ID')) processedItem['id'] = item.id;\n            if (config.itemContext?.includes('SKUs')) processedItem['skus'] = item.skus;\n            if (config.itemContext?.includes('Categories')) processedItem['categories'] = item.categories;\n            if (config.itemContext?.includes('Related Catalog Objects')) processedItem['relatedCatalogObjects'] = item.dimensions;\n            if (config.itemContext?.includes('Locations')) processedItem['locations'] = item.locations;\n\n            // Conditional attribute data stuffing with processing\n            for (const [attribute, attributeData] of (<any>Object).entries(item.attributes)) {\n                let processedAttributes = {};\n\n                if (config.itemAttributes?.includes('Value')) processedAttributes['value'] = attributeData.value;\n                if (Number.isInteger(attributeData.value) && attributeData.value > 10e10) processedAttributes['readableValue'] = makeEpochReadableAgain(attributeData.value);\n                if (config.itemAttributes?.includes('Source')) processedAttributes['addedBySource'] = attributeData.metadata?.origin || 'Not ETL';\n                if (config.itemAttributes?.includes('File') && attributeData.metadata?.origin === 'ETL' ) processedAttributes['addedByFile'] = attributeData.metadata?.provider.substring(16);\n                if (config.itemAttributes?.includes('Change Date') && attributeData.metadata?.origin === 'ETL' ) processedAttributes['addedDate'] = makeEpochReadableAgain(attributeData.metadata?.lastUpdated);\n                if (config.itemAttributes?.includes('Locale')) processedAttributes['locale'] = attributeData.locale;\n\n                attributes[attribute] = processedAttributes;\n            }\n\n            return processedItem\n        }\n\n        // Outputs final payload to the Payload Preview pane\n        return {\n            item: itemProcessor(itemDetail, {itemAttributes: this.showItemAttributeDetails, itemContext: this.showItemContextDetails}),\n        };\n    }\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"limitations",children:"Limitations"}),"\n",(0,n.jsxs)(t.p,{children:["While this solution can benefit ",(0,n.jsx)(t.a,{href:"/docs/interaction-studio/mcp-catalog-architecture",children:"MCP Catalog Object"})," debugging, there are a few significant limitations."]}),"\n",(0,n.jsx)(t.h3,{id:"data-scope",children:"Data scope"}),"\n",(0,n.jsx)(t.p,{children:"Unfortunately, at the moment, the platform surfaces metadata only for Catalog Items updated using ETL. Any other source (Manual update, Web or Mobile SDK) provides only current value but no information about the last change or the exact Source (apart from it not being an ETL)."}),"\n",(0,n.jsx)(t.p,{children:"Additionally, the metadata returned for the ETL uploads provides only the file name and timestamp that first introduced the current value. There is no option to check what was the previous value."}),"\n",(0,n.jsx)(t.p,{children:"It is still very helpful to understand whether the MC Personalization overwrote the attribute using incorrect ETL data and which CSVs you should check to confirm the pipeline issues."}),"\n",(0,n.jsx)(t.h3,{id:"data-quality",children:"Data quality"}),"\n",(0,n.jsx)(t.p,{children:"Another huge caveat with the metadata is that Manual changes through the Catalog UI create many issues by silently changing attribute values and/or metadata. Example behaviours:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["Manual changes to field value retain metadata information of the previous value source (so values marked as coming from both ",(0,n.jsx)(t.code,{children:"ETL"})," and ",(0,n.jsx)(t.code,{children:"Not ETL"})," Sources could be introduced via UI)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"price"}),", ",(0,n.jsx)(t.code,{children:"listPrice"}),", ",(0,n.jsx)(t.code,{children:"margin"}),", ",(0,n.jsx)(t.code,{children:"published"}),", and ",(0,n.jsx)(t.code,{children:"expiration"})," are being changed from ",(0,n.jsx)(t.code,{children:"ETL"})," to ",(0,n.jsx)(t.code,{children:"Not ETL"})," Source even when manual changes weren't touching those attributes."]}),"\n",(0,n.jsxs)(t.li,{children:["if ",(0,n.jsx)(t.code,{children:"expiration"})," was ",(0,n.jsx)(t.code,{children:"NULL"}),", it gets set to timestamp 100 years in the future"]}),"\n",(0,n.jsxs)(t.li,{children:["if ",(0,n.jsx)(t.code,{children:"margin"})," was ",(0,n.jsx)(t.code,{children:"NULL"}),", it gets set to 0"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"It is awful, but hopefully, only a few manual changes are happening in the production dataset, and this issue will be minimal. Still, it's worth remembering this when the metadata preview doesn't match data in the CSV."}),"\n",(0,n.jsx)(t.h3,{id:"contexteventfieldsitem",children:"Context.event.fields.item"}),"\n",(0,n.jsxs)(t.p,{children:["While ",(0,n.jsx)(t.code,{children:"context.event.fields.item"})," is perfect for the use case described here, don't try to use it in standard Campaigns. Unfortunately, it is filled in only in the Simulation Preview and will not be available when deployed to a website. However, for production purposes you can use ",(0,n.jsxs)(t.a,{href:"/docs/interaction-studio/mcp-serverside-code-context#event-methods",children:[(0,n.jsx)(t.code,{children:"context.event"})," methods"]})," to get the same information dynamically from the item viewed by user."]}),"\n",(0,n.jsx)(t.h2,{id:"options",children:"Options"}),"\n",(0,n.jsx)(t.p,{children:"I created the current version of the solution with an easy-to-use, straightforward interface leveraging out-of-the-box features of the platform. However, you can extend the code with an additional field accepting a list of IDs to return payloads for multiple items in a single run to facilitate faster debugging."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},64530:(e,t,a)=>{a.d(t,{$:()=>n,z:()=>o});var i=a(74848);const n=e=>{let{link:t,text:a,newTab:n=!1}=e;return(0,i.jsx)(i.Fragment,{children:(0,i.jsx)("a",{class:"button button--outline button--lg button--primary col col--6 col--offset-3",href:t,target:n?"_blank":"_self",children:a})})},o=e=>{let{linkLeft:t,textLeft:a,newTabLeft:n=!1,linkRight:o,textRight:r,newTabRight:s=!1}=e;return(0,i.jsx)(i.Fragment,{children:(0,i.jsxs)("div",{class:"col col--12",children:[(0,i.jsx)("a",{class:"button button--outline button--lg button--primary col col--5 col--offset-0",href:t,target:n?"_blank":"_self",children:a}),(0,i.jsx)("a",{class:"button button--outline button--lg button--primary col col--5 col--offset-2",href:o,target:s?"_blank":"_self",children:r})]})})}},46748:(e,t,a)=>{a.d(t,{U:()=>o});const i="leadText_qzwo";var n=a(74848);const o=e=>{let{content:t}=e;return(0,n.jsx)(n.Fragment,{children:(0,n.jsx)("p",{id:i,children:t})})}},28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>s});var i=a(96540);const n={},o=i.createContext(n);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);