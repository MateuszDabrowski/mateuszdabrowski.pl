"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[4817],{17650:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var i=n(74848),o=n(28453),s=n(46748);const a={id:"sfmc-contact-deletion",title:"SFMC Contact Deletion",sidebar_label:"Contact Deletion Process",description:"Marketing Automation is as powerful as the database quality behind it. To make it good you must first remove the bad. Let's do it.",image:"img/og/og-image-sfmc-contact-deletion.png",tags:["Marketing Cloud","Snippet","SSJS","SQL","Data Extensions","Data Management"],toc_max_heading_level:4},l=void 0,r={id:"config/sfmc-contact-deletion",title:"SFMC Contact Deletion",description:"Marketing Automation is as powerful as the database quality behind it. To make it good you must first remove the bad. Let's do it.",source:"@site/docs/config/sfmc-contact-deletion.mdx",sourceDirName:"config",slug:"/config/sfmc-contact-deletion",permalink:"/docs/config/sfmc-contact-deletion",draft:!1,unlisted:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/config/sfmc-contact-deletion.mdx",tags:[{label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{label:"Snippet",permalink:"/docs/tags/snippet"},{label:"SSJS",permalink:"/docs/tags/ssjs"},{label:"SQL",permalink:"/docs/tags/sql"},{label:"Data Extensions",permalink:"/docs/tags/data-extensions"},{label:"Data Management",permalink:"/docs/tags/data-management"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1708642896e3,frontMatter:{id:"sfmc-contact-deletion",title:"SFMC Contact Deletion",sidebar_label:"Contact Deletion Process",description:"Marketing Automation is as powerful as the database quality behind it. To make it good you must first remove the bad. Let's do it.",image:"img/og/og-image-sfmc-contact-deletion.png",tags:["Marketing Cloud","Snippet","SSJS","SQL","Data Extensions","Data Management"],toc_max_heading_level:4},sidebar:"docs",previous:{title:"Power of Code Resources",permalink:"/docs/config/sfmc-code-resource"},next:{title:"Enhanced Send Log",permalink:"/docs/config/sfmc-enhanced-send-log"}},c={},d=[{value:"Outline",id:"outline",level:2},{value:"Contact Deletion in SFMC",id:"contact-deletion-in-sfmc",level:2},{value:"Enable Contact Deletion",id:"enable-contact-deletion",level:3},{value:"Manual Contact Deletion",id:"manual-contact-deletion",level:3},{value:"Delete contacts from All Contacts",id:"delete-contacts-from-all-contacts",level:4},{value:"Delete all contacts from List or Data Extension",id:"delete-all-contacts-from-list-or-data-extension",level:4},{value:"SFMC API Contact Deletion",id:"sfmc-api-contact-deletion",level:3},{value:"Contact Deletion by Contact ID",id:"contact-deletion-by-contact-id",level:4},{value:"Contact Deletion by Contact Key",id:"contact-deletion-by-contact-key",level:4},{value:"Contact Deletion using Data Extension",id:"contact-deletion-using-data-extension",level:4},{value:"Contact Deletion with Automation Studio",id:"contact-deletion-with-automation-studio",level:3},{value:"Contact Deletion Pending Data Extension",id:"contact-deletion-pending-data-extension",level:4},{value:"Contact Deletion Script Activity",id:"contact-deletion-script-activity",level:4},{value:"Monitor Contact Deletion Process",id:"monitor-contact-deletion-process",level:3},{value:"Which contacts should you delete?",id:"which-contacts-should-you-delete",level:2},{value:"Contacts deleted in Salesforce CRM",id:"contacts-deleted-in-salesforce-crm",level:3},{value:"Leads and Users deleted or filtered in Salesforce CRM",id:"leads-and-users-deleted-or-filtered-in-salesforce-crm",level:3},{value:"Contactless Contacts",id:"contactless-contacts",level:3},{value:"Zombie Contacts",id:"zombie-contacts",level:3},{value:"Contact Deletion Archive",id:"contact-deletion-archive",level:2},{value:"Contact Deletion Archive Data Extension",id:"contact-deletion-archive-data-extension",level:3},{value:"Contact Deletion Archive Query Activity",id:"contact-deletion-archive-query-activity",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.U,{content:"Marketing Automation is as powerful as the database quality behind it. To make it good you must first remove the bad. Let's do it."}),"\n",(0,i.jsx)(t.h2,{id:"outline",children:"Outline"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#contact-deletion-in-sfmc",children:"Learn everything about SFMC Contact Deletion Process"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#which-contacts-should-you-delete",children:"Check out sample segments just waiting to be deleted"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"#contact-deletion-archive",children:"Create privacy-focused Contact Deletion Archive"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"contact-deletion-in-sfmc",children:"Contact Deletion in SFMC"}),"\n",(0,i.jsx)(t.p,{children:"Salesforce Marketing Cloud makes Contact Deletion not only easy but also powerful. The out-of-the-box solution does most of the heavy lifting, leaving us the decision of who and when should be deleted from our platform."}),"\n",(0,i.jsx)(t.p,{children:"But before we start the cleanup, let's see why we should do it in the first place. It's not easy to get new opted-in Contacts, so we shouldn't take removal lightly. However, there are multiple good reasons to do that:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Compliance"}),": Many legal systems (like European GDPR) allow subscribers to request contact deletion."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Licensing"}),": A marketing Cloud licence allows you to store a limited number of Contacts."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Performance"}),": The more Contacts you have, the slower will be your Journeys and Automations."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Cost"}),": Sending to dead Contacts means burning SuperMessages without any value in return."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Deliverability"}),": Sending to dead or bad quality Contacts hurts your email deliverability and inbox placement."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Analytics"}),": Bad quality data negatively impacts the quality of your analytics, making it harder to make the right decisions."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Once we know why we should delete, it's time to see what exactly is the built-in SFMC Contact Deletion process doing behind the scenes:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["It manages ",(0,i.jsx)(t.strong,{children:"supression period for contacts"})," requested for deletion:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Suppression in ",(0,i.jsx)(t.strong,{children:"Contact Builder"})," hides the contacts and blocks the possibility to create a new one with the same Contact Key."]}),"\n",(0,i.jsxs)(t.li,{children:["Suppression in ",(0,i.jsx)(t.strong,{children:"Email Studio"})," hides the contacts and blocks them from receiving Emails or interacting with Triggered Sends."]}),"\n",(0,i.jsxs)(t.li,{children:["Suppression in ",(0,i.jsx)(t.strong,{children:"Journey Builder"})," blocks the contacts from entering Journeys and Automations."]}),"\n",(0,i.jsxs)(t.li,{children:["Suppression in ",(0,i.jsx)(t.strong,{children:"Mobile Studio"})," (MobileConnect, MobilePush, GroupConnect) hides the contacts and blocks them from receiving any communication and doing any interactions (exception - block requests are still processed)."]}),"\n",(0,i.jsxs)(t.li,{children:["Suppression in ",(0,i.jsx)(t.strong,{children:"Einstein"})," hides the contacts and blocks both Recommendations and Analytics."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["After the suppression period, it ",(0,i.jsx)(t.strong,{children:"deletes contacts"})," from:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Sendable Data Extensions"}),"\n",(0,i.jsx)(t.li,{children:"Populations"}),"\n",(0,i.jsx)(t.li,{children:"Lists"}),"\n",(0,i.jsx)(t.li,{children:"Groups"}),"\n",(0,i.jsx)(t.li,{children:"Journeys"}),"\n",(0,i.jsx)(t.li,{children:"Automations"}),"\n",(0,i.jsx)(t.li,{children:"Einstein"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"As you can see, a lot out-of-the-box. But what is the purpose of the suppression period when we just want to delete some contacts?"}),"\n",(0,i.jsxs)(t.p,{children:["Contact Deletion is irreversible. Once we remove the contact, it is deleted for good, and there is no option to bring it back. Sure, you can add it again, but it won't have any past data. So, if you are not confident in your Contact Deletion process, you might ",(0,i.jsx)(t.a,{href:"#enable-contact-deletion",children:"configure suppression period"})," to have some time for reflection. That's why it is there by default (currently at two days). If you find a mistake during that period, put a Support ticket as soon as possible with high priority."]}),"\n",(0,i.jsx)(t.p,{children:"There is also a second reason for the suppression period. Depending on the parallel processes run in your Marketing Cloud, the number of contacts requested for deletion, as well as the volume of data in the system, SFMC Contact Deletion can be a very time-consuming process. Suppression makes sure that even if it takes longer than you would like, the Contact will not get any unwanted communication."}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsx)(t.p,{children:"Few places are not targeted by the out-of-the-box Marketing Cloud Contact Deletion process:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Non-Sendable Data Extensions \xbb ",(0,i.jsx)(t.em,{children:"Can be removed with either retention or heavy custom scripting"})]}),"\n",(0,i.jsxs)(t.li,{children:["Synchronized Data Extensions \xbb ",(0,i.jsx)(t.em,{children:"Can be removed in the source system"})]}),"\n",(0,i.jsxs)(t.li,{children:["Triggered Send Lists \xbb ",(0,i.jsxs)(t.em,{children:["Can be removed using ",(0,i.jsx)(t.a,{href:"#sfmc-api-contact-deletion",children:"API method"})]})]}),"\n"]}),(0,i.jsx)(t.p,{children:"It also ignores any data that is not connected to the deleted contact by Contact Key / Subscriber Key / Contact ID, so be sure to have a proper deduplication process in place for compliance."})]}),"\n",(0,i.jsx)(t.h3,{id:"enable-contact-deletion",children:"Enable Contact Deletion"}),"\n",(0,i.jsx)(t.p,{children:"To use the Contact Deletion Process in Salesforce Marketing Cloud, you must enable it first. To do this, you need to have a Marketing Cloud Administrator role."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Go to parent Business Unit."}),"\n",(0,i.jsx)(t.li,{children:"Go to Audience Builder \xbb Contact Builder."}),"\n",(0,i.jsx)(t.li,{children:"Click Contacts Configuration in the top menu."}),"\n",(0,i.jsx)(t.li,{children:"Enable the process in the Contact Delete section."}),"\n",(0,i.jsx)(t.li,{children:"Configure suppression period by clicking Manage Settings (default is two days)."}),"\n",(0,i.jsx)(t.li,{children:"Save."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"If you want the Contact Deletion process to trigger automatically after starting it, set the suppression period to 0 days. It will be added to the processing queue instantly after the request."}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsx)(t.p,{children:"For the most popular SFMC tenant type - Enterprise 2.0 - the deletion must happen at the parent level and automatically apply across all Business Units."}),(0,i.jsxs)(t.p,{children:["If you have a different tenant type, check the official ",(0,i.jsx)(t.a,{href:"https://help.salesforce.com/s/articleView?id=sf.mc_cab_contact_deletion.htm&type=5",children:"documentation"}),"."]})]}),"\n",(0,i.jsx)(t.h3,{id:"manual-contact-deletion",children:"Manual Contact Deletion"}),"\n",(0,i.jsxs)(t.p,{children:["Once the Contact Deletion is ",(0,i.jsx)(t.a,{href:"#enable-contact-deletion",children:"enabled and configured"}),", you can start cleaning. The easiest way is to leverage manual deletion options available in the Contact Builder."]}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["Manual Contact Deletion in Email Studio will remove the contact only from Email Studio. To trigger the Contact Deletion Process, you must leverage Contact Builder or ",(0,i.jsx)(t.a,{href:"#sfmc-api-contact-deletion",children:"API method"}),"."]})}),"\n",(0,i.jsx)(t.h4,{id:"delete-contacts-from-all-contacts",children:"Delete contacts from All Contacts"}),"\n",(0,i.jsx)(t.p,{children:"This method is best if you have just a few contacts you want to delete. It's simple, it's fast, it's constrained."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Go to parent Business Unit."}),"\n",(0,i.jsx)(t.li,{children:"Go to Audience Builder \xbb Contact Builder."}),"\n",(0,i.jsx)(t.li,{children:"Click All Contacts in the top menu."}),"\n",(0,i.jsx)(t.li,{children:"Find a contact(s) you want to delete and click checkboxes next to them."}),"\n",(0,i.jsx)(t.li,{children:"Click the trash icon and select Delete selected contacts."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Using this method, you can delete multiple contacts, but only from a single page of results. If you navigate to the next page of results, previously checked contacts will no longer be part of your selection."}),"\n",(0,i.jsx)(t.p,{children:"If you want to remove more contacts, leverage the Data Extension method shared below."}),"\n",(0,i.jsx)(t.h4,{id:"delete-all-contacts-from-list-or-data-extension",children:"Delete all contacts from List or Data Extension"}),"\n",(0,i.jsxs)(t.p,{children:["This method will be better if you want to remove a significant number of contacts once but don't want the hassle of the most potent ",(0,i.jsx)(t.a,{href:"#sfmc-api-contact-deletion",children:"API method"}),"."]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Go to parent Business Unit."}),"\n",(0,i.jsx)(t.li,{children:"Go to Audience Builder \xbb Contact Builder."}),"\n",(0,i.jsx)(t.li,{children:"Click All Contacts in the top menu."}),"\n",(0,i.jsx)(t.li,{children:"Without selecting any contact, click the trash icon."}),"\n",(0,i.jsx)(t.li,{children:"Click Delete contacts from list / data extension depending on your needs."}),"\n",(0,i.jsx)(t.li,{children:"Select the Sendable Data Extension used for the Contact Deletion process."}),"\n",(0,i.jsx)(t.li,{children:"Decide whether the Data Extension itself should stay in the system after SFMC deletes the contacts."}),"\n",(0,i.jsx)(t.li,{children:"Click Delete Contacts."}),"\n",(0,i.jsx)(t.li,{children:"Review and confirm by clicking Delete."}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["This method allows you to delete up to one million contacts per operation. If you want to remove more than that, you will have to run the above steps multiple times or leverage ",(0,i.jsx)(t.a,{href:"#contact-deletion-with-automation-studio",children:"contact deletion automation"}),"."]})}),"\n",(0,i.jsx)(t.h3,{id:"sfmc-api-contact-deletion",children:"SFMC API Contact Deletion"}),"\n",(0,i.jsx)(t.p,{children:"Previous methods are nice, but they require manual triggering in the Salesforce Marketing cloud each time you run the Contact Deletion Process. There are, however, many use cases where you might want to trigger it automatically - for example, from a different system responsible for managing privacy."}),"\n",(0,i.jsx)(t.p,{children:"Thankfully, SFMC offers a solution for that as well with REST API. To implement it:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Create authentication endpoint with correct permissions with Installed Package","\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Go to Setup in Parent Business Unit."}),"\n",(0,i.jsx)(t.li,{children:"Within the Platform Tools section, roll out Apps and click Installed Packages."}),"\n",(0,i.jsx)(t.li,{children:"Click New in the top right."}),"\n",(0,i.jsx)(t.li,{children:"Provide a meaningful name and description for your Installed Package."}),"\n",(0,i.jsx)(t.li,{children:"Add Component - API Integration."}),"\n",(0,i.jsx)(t.li,{children:"Select the Server-to-Server integration type."}),"\n",(0,i.jsx)(t.li,{children:"Select Read and Write for List and Subscribers within the Contacts section. Write is needed for Deletion. Read - for checking the deletion status."}),"\n",(0,i.jsx)(t.li,{children:"Click Save."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Copy Client Id, Client Secret and Client Base (the unique string in either of the API URIs that is between ",(0,i.jsx)(t.code,{children:"https://"})," and API type)."]}),"\n",(0,i.jsxs)(t.li,{children:["Leverage the contact deletion endpoint in the solution of your choice: ",(0,i.jsx)(t.code,{children:"https://CLIENT_BASE.rest.marketingcloudapis.com/contacts/v1/contacts/actions/delete"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This single endpoint will allow you to trigger the Contact Deletion process in three ways by adding a query string at the end. All scenarios will use the same Method, Content-Type and Authorization, but the endpoint and payload will be different:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Method: POST"}),"\n",(0,i.jsx)(t.li,{children:"Content-Type: application/json"}),"\n",(0,i.jsx)(t.li,{children:"Authorization: Bearer TOKEN"}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"contact-deletion-by-contact-id",children:"Contact Deletion by Contact ID"}),"\n",(0,i.jsxs)(t.p,{children:["Endpoint: ",(0,i.jsx)(t.code,{children:"https://CLIENT_BASE.rest.marketingcloudapis.com/contacts/v1/contacts/actions/delete?type=ids"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",metastring:'title="Delete by Contact ID Payload"',children:'{\n    "values": [1111111, 22222222],\n    "deleteOperationType": "ContactAndAttributes"\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This endpoint's ",(0,i.jsx)(t.code,{children:"values"})," is an array of Contact IDs (integers)."]}),"\n",(0,i.jsx)(t.h4,{id:"contact-deletion-by-contact-key",children:"Contact Deletion by Contact Key"}),"\n",(0,i.jsxs)(t.p,{children:["Endpoint: ",(0,i.jsx)(t.code,{children:"https://CLIENT_BASE.rest.marketingcloudapis.com/contacts/v1/contacts/actions/delete?type=keys"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",metastring:'title="Delete by Contact Key Payload"',children:'{\n    "values": ["A1B2C3D4", "E5F6G7H8"],\n    "deleteOperationType": "ContactAndAttributes"\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This endpoint's ",(0,i.jsx)(t.code,{children:"values"})," is an array of Contact Keys (strings)."]}),"\n",(0,i.jsx)(t.h4,{id:"contact-deletion-using-data-extension",children:"Contact Deletion using Data Extension"}),"\n",(0,i.jsxs)(t.p,{children:["Endpoint: ",(0,i.jsx)(t.code,{children:"https://CLIENT_BASE.rest.marketingcloudapis.com/contacts/v1/contacts/actions/delete?type=listReference"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",metastring:'title="Delete using Data Extension Payload"',children:'{\n    "deleteOperationType": "ContactAndAttributes",\n    "targetList": {\n        "listType": { "listTypeID": 3 },\n        "listKey": "contactDeletionDEKey"\n    },\n    "deleteListWhenCompleted": false,\n    "deleteListContentsWhenCompleted": true\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"In this endpoint, you have control over three values:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"listKey"}),": the external key of the Data Extension you use for the Contact Deletion process."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"deleteListWhenCompleted"}),": when ",(0,i.jsx)(t.code,{children:"true"}),", it will delete the Data Extension during the Contact Deletion process."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"deleteListContentsWhenCompleted"}),": when ",(0,i.jsx)(t.code,{children:"true"})," it will delete records from the Data Extensions during Contact Deletion process."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"contact-deletion-with-automation-studio",children:"Contact Deletion with Automation Studio"}),"\n",(0,i.jsxs)(t.p,{children:["With the ",(0,i.jsx)(t.a,{href:"#sfmc-api-contact-deletion",children:"API Contact Deletion"})," we are not limited to external triggers. We can also leverage AMPScript or SSJS to trigger it directly from Marketing Cloud."]}),"\n",(0,i.jsx)(t.p,{children:"The most popular use case is a Contact Deletion Automation scheduled to clean up the database regularly. It's a great idea to keep your SFMC instance clean without much of a hassle."}),"\n",(0,i.jsx)(t.p,{children:"My recommended approach is to create a dedicated Pending Contact Deletion Shared Data Extension that will store records to be deleted along with some context and remove its content nightly with the Script Activity."}),"\n",(0,i.jsx)(t.h4,{id:"contact-deletion-pending-data-extension",children:"Contact Deletion Pending Data Extension"}),"\n",(0,i.jsx)(t.p,{children:"If you want to capture contacts-to-be-deleted from multiple Business Units, make it Shared Data Extension."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"DataType"}),(0,i.jsx)(t.th,{children:"Default Value"}),(0,i.jsx)(t.th,{children:"Length"}),(0,i.jsx)(t.th,{children:"Nullable"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"\ud83d\udd11 SubscriberKey"}),(0,i.jsx)(t.td,{children:"Text"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"18"}),(0,i.jsx)(t.td,{children:"No"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DeletionReason"}),(0,i.jsx)(t.td,{children:"Text"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"50"}),(0,i.jsx)(t.td,{children:"Yes"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DeletionDate"}),(0,i.jsx)(t.td,{children:"Date"}),(0,i.jsx)(t.td,{children:"Current date"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Yes"})]})]})]}),"\n",(0,i.jsxs)(t.p,{children:["External Key: ",(0,i.jsx)(t.code,{children:"contact-deletion-pending-de"}),"\nSendable: ",(0,i.jsx)(t.code,{children:"true"})]}),"\n",(0,i.jsxs)(t.p,{children:["You don't need anything but the Subscriber Key for essential contact deletion. However, I prefer to add a bit more context that I can leverage in the ",(0,i.jsx)(t.a,{href:"#contact-deletion-archive",children:"Contact Deletion archive"})," described later in this article."]}),"\n",(0,i.jsx)(t.h4,{id:"contact-deletion-script-activity",children:"Contact Deletion Script Activity"}),"\n",(0,i.jsxs)(t.p,{children:["Below you can find ready-to-use SSJS snippet for Script Activity. Change ",(0,i.jsx)(t.code,{children:"clientSecret"}),", ",(0,i.jsx)(t.code,{children:"clientID"})," and ",(0,i.jsx)(t.code,{children:"clientBase"})," variables to data you saved during ",(0,i.jsx)(t.a,{href:"#sfmc-api-contact-deletion",children:"Installed Package configuration"}),". If needed, change also the ",(0,i.jsx)(t.code,{children:"contactDeletionDEKey"}),", ",(0,i.jsx)(t.code,{children:"errorDE"})," and ",(0,i.jsx)(t.code,{children:"automationName"})," variables to reflect your configuration."]}),"\n",(0,i.jsxs)(t.p,{children:["To learn more about ",(0,i.jsx)(t.code,{children:"errorDE"})," check my ",(0,i.jsx)(t.a,{href:"/docs/ssjs/debugging-ssjs#error-logging",children:"debugging guide"}),". You will find there also details about ",(0,i.jsx)(t.a,{href:"/docs/ssjs/debugging-ssjs#error-handler-function",children:"helper functions"})," from the script."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-html",metastring:'title="Contact Deletion Script Activity SSJS Snippet"',children:"<script runat=\"server\">\n    Platform.Load('core', '1')\n\n    /* -------------------------------------------------------------------------\n\n        1. Global Variables\n            1.1. Contact Deletion DE Key\n            1.2. REST API Authorization\n            1.3. Error Handling\n        2. Helper Functions\n            2.1. Debugging\n            2.2. Error handling\n        3. Main Script\n            3.1. REST API Authorization\n            3.2. Contact Deletion Process\n\n    -------------------------------------------------------------------------- */\n\n    /* ----------------------------------------------------------------------- */\n    /* ------------------------- 1. GLOBAL VARIABLES ------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    /* ------------------------ 1.1 Contact Deletion DE Key -------------------------- */\n\n    var contactDeletionDEKey = 'contact-deletion-pending-de';\n\n    /* ------------------------ 1.2 REST API Authorization --------------------------- */\n\n    var payload, endpoint, response;\n\n    var clientSecret = 'clientSecretFromInstalledPackage';\n    var clientID = 'clientIDFromInstalledPackage';\n    var clientBase = 'clientBaseUrl'\n    var contentType = 'application/json';\n    var debugging = false;\n\n\n    /* ------------------------ 1.3 Error Handling --------------------------- */\n\n    var errorDE = 'error-log-de';\n    var automationName = 'contact-deletion-process';\n\n\n    /* ----------------------------------------------------------------------- */\n    /* ------------------------- 2. HELPER FUNCTIONS ------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    /* --------------------------- 2.1. Debugging ---------------------------- */\n\n    /**\n     * @function debugValue\n     * @description Outputs provided description and SSJS value to front-end in a type-safe & consistent way\n     * @param {string} description - Describes meaning of the second parameter in the output\n     * @param {*} value - The value that needs to be debugged\n     */\n    function debugValue(description, value) {\n        Write(description + ': ' + (typeof value == 'object' ? Stringify(value) : value) + '<br><br>');\n    };\n\n    /* -------------------------- 2.2. Error handling ------------------------ */\n\n    /**\n     * @function handleError\n     * @description Adds the error with context to error logging Data Extension and redirects to an error page.\n     * @param {Object} error - The caught error object. It can come from the try/catch block or be manually created.\n     * @param {string} error.message - First error key stores a short error message describing the issue.\n     * @param {string} error.description - Second error key stores detailed error path helping with root cause analysis\n     */\n    function handleError(error) {\n        if (debugging) {\n            debugValue('Found error', error);\n        } else {\n            Platform.Function.InsertData(errorDE, ['ID', 'ErrorSource', 'ErrorMessage', 'ErrorDescription'], [GUID(), automationName, error.message, error.description]);\n        };\n    };\n\n\n    /* ----------------------------------------------------------------------- */\n    /* --------------------------- 3. MAIN SCRIPT ---------------------------- */\n    /* ----------------------------------------------------------------------- */\n\n    /* ------------------- 3.1. REST API Authorization --------------------- */\n\n    endpoint = 'https://' + clientBase + '.auth.marketingcloudapis.com/v2/token';\n    payload = {\n        client_id: clientID,\n        client_secret: clientSecret,\n        grant_type: 'client_credentials'\n    };\n    if (debugging) debugValue('Payload', payload);\n\n    try {\n        response = HTTP.Post(endpoint, contentType, Stringify(payload));\n    } catch (error) {\n        handleError(error);\n    }\n    var accessToken = Platform.Function.ParseJSON(response['Response'][0]).access_token;\n    if (debugging) debugValue('AccessToken', accessToken);\n\n    /* ------------------- 3.2. Contact Deletion Process --------------------- */\n\n    endpoint = 'https://' + clientBase + '.rest.marketingcloudapis.com/contacts/v1/contacts/actions/delete?type=listReference';\n    payload = {\n        deleteOperationType: 'ContactAndAttributes',\n        targetList: {\n            listType: { listTypeID: 3 },\n            listKey: contactDeletionDEKey\n        },\n        deleteListWhenCompleted: false,\n        deleteListContentsWhenCompleted: true\n    };\n    var headerNames = ['Authorization'];\n    var headerValues = ['Bearer ' + accessToken];\n\n    try {\n        response = HTTP.Post(endpoint, contentType, Stringify(payload), headerNames, headerValues);\n        if (debugging) debugValue('Response', response);\n    } catch (error) {\n        handleError(error);\n    }\n<\/script>\n"})}),"\n",(0,i.jsx)(t.h3,{id:"monitor-contact-deletion-process",children:"Monitor Contact Deletion Process"}),"\n",(0,i.jsx)(t.p,{children:"There are three ways to monitor what is happening with your Contact Deletion requests (you should perform all three from the parent Business Unit):"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["In Contact Builder, in the top menu, click All Contacts. Click the trash icon in the top right, and select ",(0,i.jsx)(t.strong,{children:"View Pending Deletions"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["In Contact Builder, in the top menu, click Contact Analytics. You will see a full ",(0,i.jsx)(t.strong,{children:"Contact Deletion Dashboard"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["Request details using ",(0,i.jsx)(t.a,{href:"https://developer.salesforce.com/docs/marketing/marketing-cloud/guide/ContactsDeleteRequestsDetails.html",children:(0,i.jsx)(t.strong,{children:"Contact Deletion Details API"})}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"which-contacts-should-you-delete",children:"Which contacts should you delete?"}),"\n",(0,i.jsx)(t.p,{children:"You should always align this question with the specific business needs of your company. However, there are some very popular segments that may inspire you."}),"\n",(0,i.jsxs)(t.p,{children:["You can add them within the same Automation as the ",(0,i.jsx)(t.a,{href:"#contact-deletion-script-activity",children:"Contact Deletion Script Activity"})," to ensure they are captured right before cleanup. You may also create separate Automations on your child Business Unit to capture BU-specific candidates for cleanup using data available only there."]}),"\n",(0,i.jsxs)(t.p,{children:["Remember to test those recommendations and queries (for example, using ",(0,i.jsx)(t.a,{href:"/docs/config/sfmc-appexchange-solutions#query-studio",children:"Query Studio"}),") before implementing them in your Contact Deletion Process, as even a small mistake might lead to irreversible data loss."]}),"\n",(0,i.jsx)(t.h3,{id:"contacts-deleted-in-salesforce-crm",children:"Contacts deleted in Salesforce CRM"}),"\n",(0,i.jsx)(t.p,{children:"If you use Marketing Cloud Connect to integrate your Salesforce CRM with the Marketing Cloud, you should think about synchronizing deletions between those two systems. It does not happen automatically. By default, contacts deleted in SF CRM are removed from Synchronized Data Extensions and stay in other Marketing Cloud tables."}),"\n",(0,i.jsx)(t.p,{children:"You can, however, add this using Query Activity in Automation Studio. For the email channel, it's straightforward:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",metastring:'title="Find subscribers deleted in SF CRM"',children:"SELECT\n      subscriber.SubscriberKey\n    , 'Deleted in SF CRM'       AS DeletionReason\nFROM _Subscribers                   AS subscriber\n    LEFT JOIN Contact_Salesforce    AS contact\n        ON contact.Id = subscriber.SubscriberKey\nWHERE contact.Id IS NULL\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If you are also using other channels, you can include their ",(0,i.jsx)(t.a,{href:"/docs/config/sfmc-system-data-views",children:"System Data Views"})," to the query."]}),"\n",(0,i.jsx)(t.h3,{id:"leads-and-users-deleted-or-filtered-in-salesforce-crm",children:"Leads and Users deleted or filtered in Salesforce CRM"}),"\n",(0,i.jsx)(t.p,{children:"This method is also great for removing deleted or unused records from other objects counted against your All Contacts licence limits - Leads and Users. There are two caveats, however."}),"\n",(0,i.jsxs)(t.p,{children:["First, to remove unused Leads and Users, you must first stop them from synchronizing via Marketing Cloud Connect. Otherwise, they will come back to SFMC at the next scheduled synchronization. The best way to do it is to create a boolean field on those objects (for example, ",(0,i.jsx)(t.code,{children:"ShouldSyncToSFMC"}),") that would be ",(0,i.jsx)(t.code,{children:"true"})," only for records you need in your system. Depending on your use case, it might be neither (so just set ",(0,i.jsx)(t.code,{children:"false"})," as the default value), or it might be complicated (the calculated field will be your best friend). With such a boolean, you will be able to select it as a filter for your Marketing Cloud Connect object synchronization."]}),"\n",(0,i.jsx)(t.p,{children:"Second is the problem of finding those records in the Marketing Cloud. The easy way is to create a copy of Synchronized Data Extensions before filtering them. However, this will not always be possible, and it won't capture Leads and Users that were removed in the past from CRM."}),"\n",(0,i.jsx)(t.p,{children:"If you have Mobile Studio in your SFMC licence, you have a nice workaround:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Go to Contact Builder."}),"\n",(0,i.jsx)(t.li,{children:"Click All Contacts in the top menu."}),"\n",(0,i.jsx)(t.li,{children:"Select the Mobile List tab."}),"\n",(0,i.jsx)(t.li,{children:"Click Create Mobile List button in the top right."}),"\n",(0,i.jsx)(t.li,{children:"Leave MobileConnect as the channel and select Filtered List as a type. Click Ok."}),"\n",(0,i.jsx)(t.li,{children:"Select All Contacts and click Select."}),"\n",(0,i.jsx)(t.li,{children:"Remove prepopulated Mobile Number filter and on the left pane select System Data \xbb Contact."}),"\n",(0,i.jsxs)(t.li,{children:["Drag and drop Contact Key and configure it to ",(0,i.jsx)(t.code,{children:"is not null"}),". Click Done."]}),"\n",(0,i.jsx)(t.li,{children:"Click the Save as Filter button in the top right."}),"\n",(0,i.jsx)(t.li,{children:'Provide a sensible name (like "AllContactsList") and click Save.'}),"\n"]}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsx)(t.p,{children:"All Contacts view shows many cool data fields, but unfortunately, most are no longer available after the export to the List."}),(0,i.jsxs)(t.p,{children:["Mobile List fields are: ",(0,i.jsx)(t.code,{children:"SubscriberKey"}),", ",(0,i.jsx)(t.code,{children:"CustomerKey"}),", ",(0,i.jsx)(t.code,{children:"AudienceID"}),", ",(0,i.jsx)(t.code,{children:"TrackingCode"}),", ",(0,i.jsx)(t.code,{children:"AudienceCode"}),", ",(0,i.jsx)(t.code,{children:"SegmentCode"}),", ",(0,i.jsx)(t.code,{children:"SegmentName"}),", ",(0,i.jsx)(t.code,{children:"Priority"}),", ",(0,i.jsx)(t.code,{children:"SegmentID"}),", ",(0,i.jsx)(t.code,{children:"SplitID"}),"."]}),(0,i.jsxs)(t.p,{children:["So in nearly every case you will have to take the Subscriber Key and enrich it with ",(0,i.jsx)(t.a,{href:"/docs/sql/sfmc-sql-join",children:(0,i.jsx)(t.code,{children:"JOIN"})})," to other more interesting Data Extensions or ",(0,i.jsx)(t.a,{href:"/docs/config/sfmc-system-data-views",children:"System Data Views"}),"."]})]}),"\n",(0,i.jsx)(t.p,{children:"It will create and populate the list with all your Contacts. Save its name - it will be helpful for the Query."}),"\n",(0,i.jsx)(t.p,{children:"If you want to remove all Leads and Users, you will need only this List:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",metastring:'title="Find all Users and Leads"',children:"SELECT SubscriberKey\nFROM AllContactsList\nWHERE\n    SubscriberKey LIKE '005%'\n    OR SubscriberKey LIKE '00Q%'\n"})}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["You might wonder what is happening within the ",(0,i.jsx)(t.a,{href:"/docs/sql/sfmc-sql-where",children:(0,i.jsx)(t.code,{children:"WHERE"})})," filter above - this is magic that is possible thanks to Salesforce ID structure. The ID is not entirely random. Instead, it has a specific format."]}),(0,i.jsx)(t.p,{children:"For our need here, the key is the three-character prefix that point to a specific Salesforce Object:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"001 = Account"}),"\n",(0,i.jsx)(t.li,{children:"003 = Contact"}),"\n",(0,i.jsx)(t.li,{children:"005 = User"}),"\n",(0,i.jsx)(t.li,{children:"00Q = Lead"}),"\n"]}),(0,i.jsxs)(t.p,{children:["For the complete list, check ",(0,i.jsx)(t.a,{href:"http://www.fishofprey.com/2011/09/obscure-salesforce-object-key-prefixes.html",children:"Daniel Ballinger's cheat sheet"}),"."]})]}),"\n",(0,i.jsx)(t.p,{children:"If you want to remove only those Leads / Users that you no longer synchronize via filtered Marketing Cloud Connect, you will need to add a comparison similar to the Contacts use case."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",metastring:'title="Find all Users and Leads that are no longer synchronized to SFMC"',children:"SELECT contact.SubscriberKey\nFROM AllContactsList                    AS contact\n    LEFT JOIN Leads_Salesforce          AS lead\n        ON contact.SubscriberKey = lead.ID\n    LEFT JOIN Users_Salesforce          AS user\n        ON contact.SubscriberKey = user.ID\nWHERE\n    (\n        SubscriberKey LIKE '005%'\n        AND user.ID IS NULL\n    )\n    OR\n    (\n        SubscriberKey LIKE '00Q%'\n        AND lead.ID IS NULL\n    )\n"})}),"\n",(0,i.jsx)(t.h3,{id:"contactless-contacts",children:"Contactless Contacts"}),"\n",(0,i.jsx)(t.p,{children:"Another group ripe for deletion are Contacts that you cannot contact. Multiple subgroups fill that definition:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Suppressed contacts"}),"\n",(0,i.jsx)(t.li,{children:"Hard bounced contacts"}),"\n",(0,i.jsx)(t.li,{children:"Contacts that do not have any channel information (like an email address or mobile phone)"}),"\n",(0,i.jsx)(t.li,{children:"Bad quality contacts (test records, fake emails, contacts that failed Email Studio List Detective)"}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://help.salesforce.com/s/articleView?id=000381035&type=1",children:"Hidden Triggered Send Managed List Subscribers"})}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Before deletion, it might be worth saving some of this data for the future (especially suppressed contacts for compliance or hard bounced contacts for future deliverability)."}),"\n",(0,i.jsx)(t.h3,{id:"zombie-contacts",children:"Zombie Contacts"}),"\n",(0,i.jsx)(t.p,{children:"Apart from contactless contacts, there are always some zombies in each database. Contacts that you can contact - and you do - but they are not reacting in any way. No opens, no clicks, for months."}),"\n",(0,i.jsx)(t.p,{children:"I know it might be hard to delete opted-in contacts when obtaining new ones is hard work, but you need to finish this toxic relationship after some time. Zombie contacts skew your analytics, put unnecessary strain on your instance, degrade your IP Reputation and create costs without providing any value to your business in return. You will be far better without them."}),"\n",(0,i.jsx)(t.p,{children:"Align with your business the threshold for marking a contact as a zombie. It will be different from company to company, but my starting point recommendation is a contact that (1) Was sent at least six emails, (2) within at least three different months and (3) did not open or click any email."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Makes sure that you tried enough times to make your opinion based on solid facts"}),"\n",(0,i.jsx)(t.li,{children:"Makes sure that it's not a matter of out-of-office period, but a constant issue"}),"\n",(0,i.jsx)(t.li,{children:"Makes sure that temporary problem is not leading to deletion of otherwise valuable contact"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Before making the final decision, I recommend checking a few versions of those rules against your database to see which variation gives you the best results without being too lax."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"contact-deletion-archive",children:"Contact Deletion Archive"}),"\n",(0,i.jsx)(t.p,{children:"Deleting contacts is super fun, but sometimes you might need to know whom you have deleted. Or be able to debug recurring deletions to fix a leak in your data pipeline. Contact Deletion Archive is the way to go - it allows you to keep details of your deletions in a privacy-first way."}),"\n",(0,i.jsx)(t.p,{children:"It is built with two additional elements on top of the standard Contact Deletion process described above."}),"\n",(0,i.jsx)(t.h3,{id:"contact-deletion-archive-data-extension",children:"Contact Deletion Archive Data Extension"}),"\n",(0,i.jsx)(t.p,{children:"It will store the information about past deletions allowing you to check multiple things securely:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Subscriber Key of deleted contacts."}),"\n",(0,i.jsx)(t.li,{children:"Hashed Emails of the deleted contacts."}),"\n",(0,i.jsx)(t.li,{children:"Reason for the deletion."}),"\n",(0,i.jsx)(t.li,{children:"Date of first and last deletion (and, therefore, whether we deleted the SubscriberKey more than once)."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Important"}),": Make sure you configure it as ",(0,i.jsx)(t.strong,{children:"NOT"})," sendable Data Extension. Otherwise, your Contact Deletion Process will remove data also from it."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Name"}),(0,i.jsx)(t.th,{children:"DataType"}),(0,i.jsx)(t.th,{children:"Default Value"}),(0,i.jsx)(t.th,{children:"Length"}),(0,i.jsx)(t.th,{children:"Nullable"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"\ud83d\udd11 SubscriberKey"}),(0,i.jsx)(t.td,{children:"Text"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"18"}),(0,i.jsx)(t.td,{children:"No"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"HashedEmail"}),(0,i.jsx)(t.td,{children:"Text"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"254"}),(0,i.jsx)(t.td,{children:"Yes"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DeletionReason"}),(0,i.jsx)(t.td,{children:"Text"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"50"}),(0,i.jsx)(t.td,{children:"Yes"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"FirstDeletionDate"}),(0,i.jsx)(t.td,{children:"Date"}),(0,i.jsx)(t.td,{children:"Current date"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"Yes"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"LastDeletionDate"}),(0,i.jsx)(t.td,{children:"Date"}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{}),(0,i.jsx)(t.td,{children:"No"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"contact-deletion-archive-query-activity",children:"Contact Deletion Archive Query Activity"}),"\n",(0,i.jsxs)(t.p,{children:["We will need new Query Activity to fill that Archive Data Extension. One that moves the data from the ",(0,i.jsx)(t.a,{href:"#contact-deletion-pending-data-extension",children:"Contact Deletion Pending Data Extension"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["It will leverage the ",(0,i.jsx)(t.code,{children:"HASHBYTES"})," function to hash the Email Address. On the one hand, it will protect the privacy of the deleted contacts and make sure no one will use them for any send. On the other - it allows you to check the list of deleted contacts against known email by hashing it the same way."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sql",metastring:'title="Archive your deletions on schedule"',children:"SELECT\n      pending.SubscriberKey\n    , CONVERT(NVARCHAR(128), HASHBYTES('SHA2_256', sub.EmailAddress), 2)    AS HashedEmail\n    , pending.DeletionReason\n    , pending.DeletionDate                                                  AS LastDeletionDate\nFROM [Contact Deletion Pending DE]  AS pending\n    INNER JOIN _Subscribers         AS sub\n        ON sub.SubscriberKey = pending.SubscriberKey\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This new Query Activity should be put in the Contact Deletion Automation between the ",(0,i.jsx)(t.a,{href:"#which-contacts-should-you-delete",children:"Contact Deletion Query Activity"})," that selects the contacts to-be-deleted and the ",(0,i.jsx)(t.a,{href:"#contact-deletion-script-activity",children:"Contact Deletion Script Activity"})," that does the deed."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},46748:(e,t,n)=>{n.d(t,{U:()=>s});n(96540);const i="leadText_qzwo";var o=n(74848);const s=e=>{let{content:t}=e;return(0,o.jsx)(o.Fragment,{children:(0,o.jsx)("p",{id:i,children:t})})}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var i=n(96540);const o={},s=i.createContext(o);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);