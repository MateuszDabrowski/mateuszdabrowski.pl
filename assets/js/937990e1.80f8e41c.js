"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[354],{359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(4848),r=n(8453),a=n(6748);const o={id:"mcp-serverside-code-properties",title:"MCP Serverside Code Properties",sidebar_label:"Serverside Code Properties",description:"Build your marketers' dream campaign configuration UI in Marketing Cloud Personalization (Interaction Studio). All the input magic in one place.",image:"img/og/og-image-mcp-serverside-code-properties.png",tags:["Marketing Cloud","Marketing Cloud Personalization","Interaction Studio","Personalisation","TypeScript"]},s=void 0,l={id:"interaction-studio/mcp-serverside-code-properties",title:"MCP Serverside Code Properties",description:"Build your marketers' dream campaign configuration UI in Marketing Cloud Personalization (Interaction Studio). All the input magic in one place.",source:"@site/docs/interaction-studio/mcp-serverside-code-properties.mdx",sourceDirName:"interaction-studio",slug:"/interaction-studio/mcp-serverside-code-properties",permalink:"/docs/interaction-studio/mcp-serverside-code-properties",draft:!1,unlisted:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/interaction-studio/mcp-serverside-code-properties.mdx",tags:[{inline:!0,label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{inline:!0,label:"Marketing Cloud Personalization",permalink:"/docs/tags/marketing-cloud-personalization"},{inline:!0,label:"Interaction Studio",permalink:"/docs/tags/interaction-studio"},{inline:!0,label:"Personalisation",permalink:"/docs/tags/personalisation"},{inline:!0,label:"TypeScript",permalink:"/docs/tags/type-script"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1709753756e3,frontMatter:{id:"mcp-serverside-code-properties",title:"MCP Serverside Code Properties",sidebar_label:"Serverside Code Properties",description:"Build your marketers' dream campaign configuration UI in Marketing Cloud Personalization (Interaction Studio). All the input magic in one place.",image:"img/og/og-image-mcp-serverside-code-properties.png",tags:["Marketing Cloud","Marketing Cloud Personalization","Interaction Studio","Personalisation","TypeScript"]},sidebar:"docs",previous:{title:"Serverside Code Basics",permalink:"/docs/interaction-studio/mcp-serverside-code-basics"},next:{title:"Serverside Code Context",permalink:"/docs/interaction-studio/mcp-serverside-code-context"}},d={},c=[{value:"Basic properties",id:"basic-properties",level:2},{value:"Boolean",id:"boolean",level:3},{value:"String",id:"string",level:3},{value:"\u203a Array String",id:"-array-string",level:4},{value:"\u203a Default String",id:"-default-string",level:4},{value:"\u203a Select String",id:"-select-string",level:4},{value:"\u203a Rich Text String",id:"-rich-text-string",level:4},{value:"Number",id:"number",level:3},{value:"\u203a Array Number",id:"-array-number",level:4},{value:"\u203a Default Number",id:"-default-number",level:4},{value:"\u203a Select Number",id:"-select-number",level:4},{value:"Color",id:"color",level:3},{value:"\u203a Default Color",id:"-default-color",level:4},{value:"Datetime",id:"datetime",level:3},{value:"\u203a Datetime Range",id:"-datetime-range",level:4},{value:"Readonly property",id:"readonly-property",level:2},{value:"Complex property",id:"complex-property",level:2},{value:"Complex default values",id:"complex-default-values",level:3},{value:"Complex picklist",id:"complex-picklist",level:3},{value:"Complex tabular view",id:"complex-tabular-view",level:3},{value:"Decorators",id:"decorators",level:2},{value:"@title &amp; @subtitle",id:"title--subtitle",level:3},{value:"@markdown",id:"markdown",level:3},{value:"@header &amp; @headerSubtitle",id:"header--headersubtitle",level:3},{value:"@hidden &amp; @shownIf",id:"hidden--shownif",level:3},{value:"@buttonGroup",id:"buttongroup",level:3},{value:"@optional",id:"optional",level:3}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.U,{content:"Build your marketers' dream campaign configuration UI in Marketing Cloud Personalization (Interaction Studio). All the input magic in one place."}),"\n",(0,i.jsxs)(t.p,{children:["Once you learn the ",(0,i.jsx)(t.a,{href:"/docs/interaction-studio/mcp-serverside-code-basics",children:"very basics of Serverside Code"})," in Marketing Cloud Personalization (Interaction Studio), it is time to start writing code. The easiest way is, to begin with creating the campaign creation UI for the marketer - defining all the inputs they will need to fill in to drive the experience. It will be our focus in this article."]}),"\n",(0,i.jsxs)(t.p,{children:["MCP Serverside Code offers five basic property data types: ",(0,i.jsx)(t.a,{href:"#boolean",children:"Boolean"}),", ",(0,i.jsx)(t.a,{href:"#string",children:"String"}),", ",(0,i.jsx)(t.a,{href:"#number",children:"Number"}),", ",(0,i.jsx)(t.a,{href:"#color",children:"Color"})," and ",(0,i.jsx)(t.a,{href:"#datetime",children:"DateTime"}),". Those, their combinations into ",(0,i.jsx)(t.a,{href:"#complex-property",children:"complex properties"})," and modifications through ",(0,i.jsx)(t.a,{href:"#decorators",children:"decorators"})," enable you to build nearly anything you need for your campaign configuration screen."]}),"\n",(0,i.jsx)(t.p,{children:"Let's dive into how you can make the most of those features."}),"\n",(0,i.jsx)(t.h2,{id:"basic-properties",children:"Basic properties"}),"\n",(0,i.jsxs)(t.p,{children:["Basic properties are the base building blocks of your campaign configuration. They are all you need to make a perfect campaign template, and mastering them will be essential to doing more complex UIs with ",(0,i.jsx)(t.a,{href:"#complex-property",children:"complex properties"})," and ",(0,i.jsx)(t.a,{href:"#decorators",children:"decorators"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"boolean",children:"Boolean"}),"\n",(0,i.jsxs)(t.p,{children:["The boolean property lets you capture a ",(0,i.jsx)(t.code,{children:"true"})," or ",(0,i.jsx)(t.code,{children:"false"})," flag by creating a checkbox input:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Create simple checkbox"',children:"isTextLeftToRight: boolean;\n// Input: Editable unchecked checkbox\n// Output: true or false\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The boolean property is unchecked by default (returns ",(0,i.jsx)(t.code,{children:"false"}),"), but you can change it by passing a ",(0,i.jsx)(t.code,{children:"true"})," value in the code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Checkbox checked by default"',children:"isTextLeftToRight: boolean = true;\n// Input: Editable checked checkbox\n// Output: true or false\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Boolean fields are crucial for template development as they are perfect for building logic, for example, with the ",(0,i.jsxs)(t.a,{href:"#hidden--shownif",children:[(0,i.jsx)(t.code,{children:"@shownIf"})," decorator"]}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"string",children:"String"}),"\n",(0,i.jsx)(t.p,{children:"String property lets you capture a text input:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Create empty text input field"',children:'content: string;\n// Input: Empty text input\n// Output: "Provided text"\n'})}),"\n",(0,i.jsx)(t.p,{children:"However, there is much more to string property than just that."}),"\n",(0,i.jsx)(t.h4,{id:"-array-string",children:"\u203a Array String"}),"\n",(0,i.jsx)(t.p,{children:"You may want to capture more than one string. Easy, you can do it with two characters:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Capture multiple strings"',children:'hashtags: string[];\n// Input: Empty text input with an option for converting entered text into one of the values\n// Output: ["Array", "of", "Strings"]\n'})}),"\n",(0,i.jsxs)(t.p,{children:["By adding ",(0,i.jsx)(t.code,{children:"[]"})," after the type definition, we convert the field to an array of strings. During configuration, you can provide multiple values that, in the payload, will be returned as an array. It doesn't accept duplicate values."]}),"\n",(0,i.jsx)(t.h4,{id:"-default-string",children:"\u203a Default String"}),"\n",(0,i.jsx)(t.p,{children:"To simplify the work for your marketers or to provide recommended examples of expected data, you can easily add a default value to your string by delivering it as a string after the equal sign:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Add default content"',children:"content: string = 'This is default content';\n// Input: Editable prefilled text input\n// Output: \"Provided text\"\n"})}),"\n",(0,i.jsx)(t.p,{children:"It can be freely edited during configuration but will be passed as-is to the payload if no changes are made."}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsx)(t.p,{children:"You can provide default values also for string arrays:"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Default values for array string"',children:'hashtags: string[] = [\'interaction-studio\', \'marketing-cloud-personalization\'];\n// Input: Editable prefilled text input with two deletable values and space to write additional ones\n// Output: ["Array", "of", "Strings"]\n'})})]}),"\n",(0,i.jsx)(t.h4,{id:"-select-string",children:"\u203a Select String"}),"\n",(0,i.jsxs)(t.p,{children:["You can go one step further and lock the string property to only a set of preconfigured values using the ",(0,i.jsx)(t.code,{children:"@options"})," decorator. It is excellent when you need a particular value, for example, for a programmatic logic in other parts of your template."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Limit possible values with select"',children:"@options(['brandA', 'brandB', 'brandC'])\nbrand: string;\n// Input: Empty text input showing dropdown with configured options on click\n// Output: \"Selected text\"\n"})}),"\n",(0,i.jsx)(t.p,{children:"With such code, the campaign configuration will display a picklist with the hardcoded values. It will output a string to the campaign payload."}),"\n",(0,i.jsxs)(t.p,{children:["You can also provide ",(0,i.jsx)(t.a,{href:"#-default-string",children:"default value"})," for your select field:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Provide default select value"',children:"@options(['brandA', 'brandB', 'brandC'])\nbrand: string = 'brandA';\n// Input: Editable prefilled text input showing dropdown with configured options on click\n// Output: \"Selected text\"\n"})}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsx)(t.p,{children:"You can also create a select field without the decorator using literals:"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Literal select field"',children:"brand: 'brandA' | 'brandB' | 'brandC';\n// Input: Empty text input showing dropdown with configured options on click\n// Output: \"Selected text\"\n"})})]}),"\n",(0,i.jsxs)(t.p,{children:["Just as you can capture an array of text inputs, you can do the same for select strings and create a multi-picklist. However, while the preconfigured options will be visible and accessible to pick, new options - outside of what you hardcoded - ",(0,i.jsx)(t.strong,{children:"can"})," be freely added."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Multi-picklist"',children:"@options(['brandA', 'brandB', 'brandC'])\nbrands: string[];\n// Input: Empty text field with picklist and option to create new values. Allows for multiple additions.\n// Output: [\"Array\", \"of\", \"Strings\"]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can also provide ",(0,i.jsx)(t.a,{href:"#-default-string",children:"default value"})," for your multi-select field:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Provide default multi-select values"',children:"@options(['brandA', 'brandB', 'brandC'])\nbrands: string[] = ['brandA', 'brandB'];\n// Input: Editable prefilled text field with picklist and option to create new values. Allows for multiple additions.\n// Output: [\"Array\", \"of\", \"Strings\"]\n"})}),"\n",(0,i.jsx)(t.p,{children:"It will output an array of strings to the campaign payload."}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsx)(t.p,{children:"You can also create a multi-select field without the decorator using literals:"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Literal multi-select field"',children:"brand: ('brandA' | 'brandB' | 'brandC')[];\n// Input: Empty text field with picklist and option to create new values. Allows for multiple additions.\n// Output: [\"Array\", \"of\", \"Strings\"]\n"})})]}),"\n",(0,i.jsx)(t.h4,{id:"-rich-text-string",children:"\u203a Rich Text String"}),"\n",(0,i.jsxs)(t.p,{children:["You can easily convert this simple text input into a rich text field by using a ",(0,i.jsx)(t.code,{children:"@richText"})," decorator:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Capture styling with a single decorator"',children:"@richText(true)\ncontent: string;\n// Input: Text input that adapts to the content size and provides bold, italic, underscore and link WYSIWYG options.\n// Output: \"String with <span style='font-weight:bold;'>optional</span>HTML<br/>Includes multiline\"\n"})}),"\n",(0,i.jsx)(t.p,{children:"This decorator will change the input field to a multiline box with bold, italic, underscore and link features. The payload will return those styles in the form of HTML that can then be used directly, for example, in the Handlebars tab of Web Campaign."}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["While the rich text options are minimal, you can write some other HTML (for example, ",(0,i.jsx)(t.code,{children:"<span>"})," with style attribute) directly in the box, which will be passed to the output correctly. It will even display as a formatted text after you revisit the configuration."]})}),"\n",(0,i.jsx)(t.h3,{id:"number",children:"Number"}),"\n",(0,i.jsxs)(t.p,{children:["Number property lets you capture integer (",(0,i.jsx)(t.code,{children:"3"}),") and decimal (",(0,i.jsx)(t.code,{children:"3.14"}),") values:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Create empty numeric input"',children:"recommendationsCount: number;\n// Input: Empty text (sic!) input\n// Output: 3.14\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Keep in mind that non-numeric values might break the campaign without any error visible in the configuration screen. You can either display a warning using ",(0,i.jsxs)(t.a,{href:"#hidden--shownif",children:[(0,i.jsx)(t.code,{children:"@shownIf"})," decorator"]})," and a ",(0,i.jsx)(t.a,{href:"#string",children:"string field"})," or create sanitization logic in the run block."]}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["You can use ",(0,i.jsx)(t.code,{children:"@unit"})," ",(0,i.jsx)(t.a,{href:"#decorators",children:"decorator"})," to provide a unit description next to the input. It has no impact on the outputted value but gives marketer information about the expected value:"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{1} title="Unit decorator on number"',children:"@unit('ms')\ndelayBeforeDisplay: number;\n"})})]}),"\n",(0,i.jsx)(t.h4,{id:"-array-number",children:"\u203a Array Number"}),"\n",(0,i.jsxs)(t.p,{children:["Just as with strings, you can capture multiple numeric values by adding ",(0,i.jsx)(t.code,{children:"[]"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Capture multiple numbers"',children:"productIds: number[];\n// Input: A plus icon that adds new text inputs with delete buttons\n// Output: [3.14, 3, 5]\n"})}),"\n",(0,i.jsx)(t.p,{children:"It will output an array of numbers to the campaign payload."}),"\n",(0,i.jsx)(t.h4,{id:"-default-number",children:"\u203a Default Number"}),"\n",(0,i.jsx)(t.p,{children:"Again, just as with strings, you can provide an editable default value:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Default numeric value"',children:"recommendationsCount: number = 6;\n// Input: Editable prefilled text input\n// Output: 6\n"})}),"\n",(0,i.jsx)(t.p,{children:"The same can be done for Array Numbers:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Default numeric array value"',children:"productIds: number[] = [123, 456, 789];\n// Input: Editable and deletable prefilled text inputs and a plus icon that can add more\n// Output: [123, 456, 32]\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"-select-number",children:"\u203a Select Number"}),"\n",(0,i.jsxs)(t.p,{children:["As with ",(0,i.jsx)(t.a,{href:"#-select-string",children:"strings"}),", you can create a numeric picklist:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Numeric picklist"',children:"recommendationsCount: 1 | 3 | 6 | 9;\n// Input: Empty text input showing dropdown with configured options on click\n// Output: 1\n"})}),"\n",(0,i.jsx)(t.p,{children:"You can also pass a default value:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Numeric picklist with default value"',children:"recommendationsCount: 1 | 3 | 6 | 9 = 6;\n// Input: Editable prefilled text input showing dropdown with configured options on click\n// Output: 6\n"})}),"\n",(0,i.jsx)(t.p,{children:"You can also create a numeric multi-picklist:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Numeric multi-picklist"',children:"orderOfSections: (1 | 2 | 3 | 4 | 5)[];\n// Input: Empty text field with picklist. Allows for multiple additions.\n// Output: [1, 3, 4, 2, 5]\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Different from ",(0,i.jsx)(t.a,{href:"#-select-string",children:"strings multi-select"}),", with a numeric multi-picklist, the marketer won't be able to add new options outside of what you preconfigured. Yay!"]}),"\n",(0,i.jsx)(t.p,{children:"However, there are three caveats to keep in mind:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["You cannot have ",(0,i.jsx)(t.code,{children:"0"})," as one of the options. The picklist will crash."]}),"\n",(0,i.jsxs)(t.li,{children:["You cannot use ",(0,i.jsx)(t.code,{children:"@options"})," to create the picklist. It will be ignored."]}),"\n",(0,i.jsx)(t.li,{children:"The single-select picklist will always cut the visibility of the last digit in the longest option after selecting it."}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"color",children:"Color"}),"\n",(0,i.jsx)(t.p,{children:"Color property lets you create a color picker with a single line of code:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Create color picker"',children:'backgroundColor: Color;\n// Input: An input pseudo-prefilled with #FFFFFF and a color box that, on click, opens the color selection interface\n// Output: {\n//    "hex": "#da4e55",\n//    "r": 218,\n//    "g": 78,\n//    "b": 85,\n//    "a": 1\n//}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["You will be able to select the color by dragging the selector over a colour palette or by providing hex/rgba/hsl values. The property will output to payload a ",(0,i.jsx)(t.code,{children:"color"})," object with both hex and rgba values."]}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsx)(t.p,{children:"While the property will look like it is prefilled with white color, it will output 'null' until you pick a color in the interface. If you want the white to be a working default option, you must configure it explicitly."})}),"\n",(0,i.jsx)(t.h4,{id:"-default-color",children:"\u203a Default Color"}),"\n",(0,i.jsx)(t.p,{children:"You can provide a default color, but it will be more complex. You cannot just give a single hex value; you need to replicate the whole output object:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title"Default color value"',children:'backgroundColor: Color = {\n    "hex": "#da4e55",\n    "r": 218,\n    "g": 78,\n    "b": 85,\n    "a": 1\n};\n// Input: An input truly prefilled with #FFFFFF and a color box that, on click, opens the color selection interface\n// Output: {\n//    "hex": "#da4e55",\n//    "r": 218,\n//    "g": 78,\n//    "b": 85,\n//    "a": 1\n//}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"datetime",children:"Datetime"}),"\n",(0,i.jsx)(t.p,{children:"Datetime property provides a clean-looking calendar widget that lets the marketer easily pick up a date."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Create datetime picker"',children:'promotionDate: DateTime;\n// Input: Empty input with calendar icon that, on click, opens full calendar for date selection\n// Output: {\n//    "dateTime": [\n//        "2023-10-01T16:00:00.000Z"\n//    ]\n//}\n'})}),"\n",(0,i.jsx)(t.p,{children:"There are two payload-related things to consider:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["The DateTime property always outputs an object with a single ",(0,i.jsx)(t.code,{children:"dateTime"})," property assigned to an array of strings."]}),"\n",(0,i.jsxs)(t.li,{children:["The date-times are returned as ISO 8601 strings (",(0,i.jsx)(t.code,{children:"2023-10-01T16:00:00.000Z"}),")."]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"-datetime-range",children:"\u203a Datetime Range"}),"\n",(0,i.jsxs)(t.p,{children:["While you cannot create a multi-select datetime field, you can use the ",(0,i.jsx)(t.code,{children:"@range"})," decorator to select two dates within a nice UI."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Create range datetime picker"',children:'@range(true)\npromotionDate: DateTime;\n// Input: Empty input with calendar icon that on click opens full calendar for two dates selection with range indicator\n// Output: {\n//    "dateTime": [\n//        "2023-10-01T16:00:00.000Z",\n//        "2023-10-03T16:00:00.000Z"\n//    ]\n//}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The output will return both selected dates in the ",(0,i.jsx)(t.code,{children:"dateTime"})," array of strings."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"readonly-property",children:"Readonly property"}),"\n",(0,i.jsxs)(t.p,{children:["Apart from ",(0,i.jsx)(t.a,{href:"#string",children:"basic string property"})," there is also a very similar readonly string property:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Static readonly property"',children:"readonly templateVersion = \"Version 1.1\"\n// Input: No input, just a readonly text written in the form\n// Output: 'Version 1.1'\n"})}),"\n",(0,i.jsxs)(t.p,{children:["As you can see, the key difference is the ",(0,i.jsx)(t.code,{children:"readonly"})," prefix before defining the property. It also uses the ",(0,i.jsx)(t.a,{href:"#-default-string",children:"default string"})," approach to assign the value."]}),"\n",(0,i.jsx)(t.p,{children:"However, readonly property has one superpower. You can assign an arrow function to it (as long as it will return a string) and use values from other properties to transform them:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{2,5-13} title="Dynamic readonly property"',children:"header: string = 'DEFault heaDER';\nreadonly upperCaseHeader = () => this?.header.toUpperCase() || '';\n// Input: No input, just a readonly text updating real-time based on header input\n// Output: 'DEFAULT HEADER'\nreadonly titleCaseHeader = () => {\n    return this?.header\n            .toLowerCase()\n            .split(' ')\n            .filter(word => word !== '')\n            .map(word => word.replace(word[0], word[0].toUpperCase()))\n            .join(' ')\n        || '';\n}\n// Input: No input, just a readonly text updating real-time based on header input\n// Output: 'Default Header'\n"})}),"\n",(0,i.jsx)(t.p,{children:"With the dynamic readonly property, you can transform string inputs, concatenate multiple inputs into one field or even create a logic based on non-string inputs (as long as the output is a string)."}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["You can do the same things later in the ",(0,i.jsx)(t.a,{href:"/docs/interaction-studio/mcp-serverside-code-basics#2-run-block",children:"run() block"}),". It will be even more powerful there, as you can use the context object. However, you must manually add those calculated values to the ",(0,i.jsx)(t.a,{href:"/docs/interaction-studio/mcp-serverside-code-basics#3-return-statement",children:"return statement"})," to see it in the payload."]}),(0,i.jsx)(t.p,{children:"For simple use cases, the readonly property will be more straightforward and provide a nifty real-time preview of the calculated value for the marketer."})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"complex-property",children:"Complex property"}),"\n",(0,i.jsxs)(t.p,{children:["The input configuration fun starts when you combine ",(0,i.jsx)(t.a,{href:"#basic-properties",children:"basic properties"})," into complex ones. The method is straightforward. Outside the main class that implements CampaignTemplateComponent, create a new class export that contains all the basic inputs you need:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Define complex property"',children:"export class TimeframedColorPicker {\n    @range(true)\n    timeframe: DateTime;\n\n    color: Color;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"With complex property defined, you can leverage it in the main class the same way as you do with basic properties:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Use complex property"',children:'timeframedColor: TimeframedColorPicker;\n// Input: Set of basic properties - datetime range and color pickers, in this case\n// Output: {\n//    timeframedColor: {\n//        timeframe: "dateTime": [\n//            "2023-10-01T16:00:00.000Z",\n//            "2023-10-03T16:00:00.000Z"\n//        ],\n//        color: {\n//            "hex": "#da4e55",\n//            "r": 218,\n//            "g": 78,\n//            "b": 85,\n//            "a": 1\n//        }\n//    }\n//}\n'})}),"\n",(0,i.jsx)(t.p,{children:"What are the benefits of this approach?"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"You can define your complex property class once and then use it multiple times in your form."}),"\n",(0,i.jsx)(t.li,{children:"You can control the structure of the Serverside payload."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"A complex property creates a new nested object assigned to an input property. Let's look at the difference:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Payload using basic properties"',children:'@range(true)\ntimeframe: DateTime;\n\ncolor: Color;\n// Input: Two basic properties - datetime range and color pickers, in this case\n// Output: {\n//    timeframe: "dateTime": [\n//        "2023-10-01T16:00:00.000Z",\n//        "2023-10-03T16:00:00.000Z"\n//    ],\n//    color: {\n//        "hex": "#da4e55",\n//        "r": 218,\n//        "g": 78,\n//        "b": 85,\n//        "a": 1\n//    }\n//}\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{4,16} title="Payload using complex property"',children:'timeframedColor: TimeframedColorPicker;\n// Input: Set of basic properties - datetime range and color pickers in this case\n// Output: {\n//    timeframedColor: {\n//        timeframe: "dateTime": [\n//            "2023-10-01T16:00:00.000Z",\n//            "2023-10-03T16:00:00.000Z"\n//        ],\n//        color: {\n//            "hex": "#da4e55",\n//            "r": 218,\n//            "g": 78,\n//            "b": 85,\n//            "a": 1\n//        }\n//    }\n//}\n'})}),"\n",(0,i.jsx)(t.p,{children:"As you can see, data from basic inputs is assigned as properties to the complex property. This can help with payload readability and might be crucial when adapting your payload to specific requirements (for example, schema expected by a React website or 3rd party system)."}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsx)(t.li,{children:"You can nest complex properties"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Just as you can add a complex property to a field, you can also create a complex property using complex properties. While it can again give you all the benefits mentioned here, be careful not to go overboard. Deep nesting is more challenging to understand and use. There is no perfect rule, but check out ",(0,i.jsx)(t.a,{href:"../../zen-of-sfmc/#simple-is-better-than-complex",children:"Simple/Complex recommendations in Zen of SFMC"}),"."]}),"\n",(0,i.jsxs)(t.ol,{start:"4",children:["\n",(0,i.jsx)(t.li,{children:"You can leverage it to build an Array of complex properties!"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["This is the real game changer - out of the basic properties, only ",(0,i.jsx)(t.a,{href:"#-array-string",children:"Strings"})," and ",(0,i.jsx)(t.a,{href:"#-array-string",children:"Numbers"})," can be used as arrays. But using a complex one, you can also leverage Boolean, Color and Datetime. The approach is the same as previously - just add ",(0,i.jsx)(t.code,{children:"[]"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{4,16} title="Array of complex properties"',children:'timeframedColor: TimeframedColorPicker[];\n// Input: A plus icon that adds new sets of basic properties with delete buttons\n// Output: {\n//    timeframedColor: [{\n//        timeframe: "dateTime": [\n//            "2023-10-01T16:00:00.000Z",\n//            "2023-10-03T16:00:00.000Z"\n//        ],\n//        color: {\n//            "hex": "#da4e55",\n//            "r": 218,\n//            "g": 78,\n//            "b": 85,\n//            "a": 1\n//        }\n//    }]\n//}\n'})}),"\n",(0,i.jsx)(t.p,{children:"It allows you to capture multiple complex configurations (for example, multiple recommendations or - as in the example above - various colors that can change in the campaign based on the current date)."}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["There is a ",(0,i.jsx)(t.a,{href:"https://issues.salesforce.com/issue/a028c00000p5gvMAAQ/personalization-incorrect-behaviour-of-array-of-complex-objects-in-templates",children:"bug with the removal UI"})," for arrays of complex properties."]}),(0,i.jsx)(t.p,{children:"Let's say you have multiple properties configured in an array and want to remove one. If you click the removal button, regardless of which element you did it, the UI will remove the bottom one. However, the correct one was removed in the backend, which you can check in the Payload Preview. Save, reenter the configuration screen or refresh, and you will see the correct configuration."})]}),"\n",(0,i.jsx)(t.h3,{id:"complex-default-values",children:"Complex default values"}),"\n",(0,i.jsx)(t.p,{children:"With complex properties, you can provide default values in two ways:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"You can provide default values within the defining class directly on basic properties."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Define complex property with default values"',children:"export class RecommendationsConfig {\n    recommendationsHeader: string = 'Chosen for You';\n    recommendationsDisplayed: number = 6;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"This approach will work for complex property arrays but not single complex properties."}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsx)(t.li,{children:"You can provide a default value in the main class implementing the CampaignTemplateComponent."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Use complex property with default value"',children:'recsConfig: RecommendationsConfig = {\n  "recommendationsHeader": "Chosen for You",\n  "recommendationsDisplayed": 6\n};\n'})}),"\n",(0,i.jsx)(t.p,{children:"This approach will work for single complex property and - if you provide the default value(s) in the array - also for arrays for complex properties."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Use an array of complex properties with default values"',children:'recsConfig: RecommendationsConfig = [{\n  "recommendationsHeader": "Chosen for You",\n  "recommendationsDisplayed": 6\n}, {\n  "recommendationsHeader": "Bestsellers",\n  "recommendationsDisplayed": 3\n}];\n'})}),"\n",(0,i.jsx)(t.p,{children:"As you can see, both approaches work for arrays of complex properties but result in a different outcome. The first approach provides default values to all elements of a complex property array you will create. The second approach prefills the array with the provided default elements. You can use both simultaneously to have a few array elements prefilled and provide default values for all new elements created on top of it."}),"\n",(0,i.jsx)(t.h3,{id:"complex-picklist",children:"Complex picklist"}),"\n",(0,i.jsxs)(t.p,{children:["Similar to how you can create a selection for ",(0,i.jsx)(t.a,{href:"#-select-string",children:"strings"})," and ",(0,i.jsx)(t.a,{href:"#-select-number",children:"numbers"}),", you can also build picklists for complex properties. And I don't mean using the selects within the complex property (which is also possible), but simplifying your complex property to a single straightforward picklist."]}),"\n",(0,i.jsx)(t.p,{children:"Using the previous complex property example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{4-5} title="Complex property with a hidden label property"',children:"export class RecommendationsConfig {\n    recommendationsHeader: string;\n    recommendationsDisplayed: number;\n    @hidden(true)\n    label: string;\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Instead of requiring the user to fill in those values and giving them a free hand at that, you can instead provide preconfigured options with user-friendly labels using the ",(0,i.jsx)(t.code,{children:"@options"})," decorator:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{1-6} title="Change complex property to a single picklist with @options decorator"',children:'@options([\n    { recommendationsHeader: "Bestsellers", recommendationsDisplayed: 12, label: "Bestsellers Home Page" },\n    { recommendationsHeader: "Bestsellers", recommendationsDisplayed: 8, label: "Bestsellers Category Page" },\n    { recommendationsHeader: "Bestsellers", recommendationsDisplayed: 4, label: "Bestsellers Search Page" },\n    { recommendationsHeader: "Chosen For You", recommendationsDisplayed: 6, label: "Chosen for You Global" },\n])\nrecsConfig: RecommendationsConfig;\n// Input: Single picklist showing only the label values\n// Output: {\n//    "recommendationsHeader": "Bestsellers",\n//    "recommendationsDisplayed": 12\n//    "label": "Bestsellers Home Page"\n//}\n'})}),"\n",(0,i.jsx)(t.p,{children:"The campaign UI will display only a single picklist using the label values. At the same time, you can provide dozens of appropriately configured properties to the campaign payload in the backend."}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["You can leverage complex picklist and ",(0,i.jsx)(t.a,{href:"#complex-default-values",children:"default values"})," at the same time. Just pass one of the ",(0,i.jsx)(t.code,{children:"@options"})," decorator objects."]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Complex property picklist with default value"',children:'@options([\n    { recommendationsHeader: "Bestsellers", recommendationsDisplayed: 12, label: "Bestsellers Home Page" },\n    { recommendationsHeader: "Bestsellers", recommendationsDisplayed: 8, label: "Bestsellers Category Page" },\n    { recommendationsHeader: "Bestsellers", recommendationsDisplayed: 4, label: "Bestsellers Search Page" },\n    { recommendationsHeader: "Chosen For You", recommendationsDisplayed: 6, label: "Chosen for You Global" },\n])\nrecsConfig: RecommendationsConfig = {\n    recommendationsHeader: "Chosen For You",\n    recommendationsDisplayed: 6,\n    label: "Chosen for You Global"\n};\n'})})]}),"\n",(0,i.jsx)(t.h3,{id:"complex-tabular-view",children:"Complex tabular view"}),"\n",(0,i.jsxs)(t.p,{children:["Complex properties can take up a lot of space in your campaign configuration screen. Sometimes, you can save some space using the ",(0,i.jsx)(t.code,{children:"@tabular"})," decorator."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Example complex property with two numeric inputs"',children:"export class PriceRange {\n    @title('Price starts at')\n    lowerPriceBoundary: number;\n    @title('Price ends at')\n    upperPriceBoundary: number;\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The complex property above will take 5 lines in the campaign configuration pane - complex property title and two input label + title sets. We can change it to 3 lines with the ",(0,i.jsx)(t.code,{children:"@tabular"})," decorator:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{1} title="Tabular decorator on a single complex property"',children:'@tabular()\npriceRange: PriceRange;\n// Input: Two inputs are provided side by side instead of one below the other\n// Output: {\n//    "lowerPriceBoundary": 10,\n//    "upperPriceBoundary": 20\n//}\n'})}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["You can also use that decorator for arrays of complex properties, but you will see that the input labels are now visible only on the first element of the array for an even more compact view. If it doesn't suit your needs, you can pass an argument to the decorator to change that behaviour: ",(0,i.jsx)(t.code,{children:"@tabular({headersPerRow: true})"}),"."]})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"decorators",children:"Decorators"}),"\n",(0,i.jsx)(t.p,{children:"Decorators are a TypeScript feature that can change or extend the behaviour of properties in the MC Personalization's Serverside Code. You have already seen some of them:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#-select-string",children:(0,i.jsx)(t.code,{children:"@options"})})," used to provide picklist values for ",(0,i.jsx)(t.a,{href:"#-select-string",children:"strings"}),", ",(0,i.jsx)(t.a,{href:"#-select-number",children:"numbers"})," and ",(0,i.jsx)(t.a,{href:"#complex-picklist",children:"complex properties"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#-rich-text-string",children:(0,i.jsx)(t.code,{children:"@richText"})})," that changes string input."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#number",children:(0,i.jsx)(t.code,{children:"@unit"})})," that gives context to a numeric input."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#-datetime-range",children:(0,i.jsx)(t.code,{children:"@range"})})," that modifies date selection into range selection."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"#complex-tabular-view",children:(0,i.jsx)(t.code,{children:"@tabular"})})," that changes how a complex object is displayed."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"But there is so much more available:"}),"\n",(0,i.jsx)(t.h3,{id:"title--subtitle",children:"@title & @subtitle"}),"\n",(0,i.jsx)(t.p,{children:"When you add a property, its name will be used as a label for the input - in a smart way, with space being added before each uppercase (but not a digit):"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Examples of default conversion from property name to label"',children:"header: string;             // Label: Header\nproductDescription: string; // Label: Product Description\nlistElement3: string;       // Label: List Element3\n"})}),"\n",(0,i.jsxs)(t.p,{children:["That's neat, but sometimes you might want to be more descriptive - without changing the actual property passed in the payload. This is where the ",(0,i.jsx)(t.code,{children:"@title"})," decorator comes in. Adding it above a property and passing a string can change the label to anything you want."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{1} title="Examples of default conversion from property name to label"',children:"@title('Recommendations Box Header')\nheader: string;             // Label: Recommendations Box Header\n"})}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["You can also pass a space into the ",(0,i.jsx)(t.code,{children:"@title"})," decorator to remove the input label altogether:"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{1} title="Using space to hide the label"',children:"@title(' ')\nheader: string;           // No label\n"})}),(0,i.jsxs)(t.p,{children:["It can be helpful in some cases, like complex objects with their own label and labels of all properties used to create them, or cases where you want to use ",(0,i.jsx)(t.a,{href:"#markdown",children:(0,i.jsx)(t.code,{children:"@markdown"})})," decorator instead."]})]}),"\n",(0,i.jsxs)(t.p,{children:["On the other hand, adding a ",(0,i.jsx)(t.code,{children:"@subtitle"})," decorator above a property will show the provided text in a smaller font right below the input. It's a great tool to give more context or example data to aid the person configuring the campaign."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{2} title="Example use of @subheader decorator for added context"',children:"@title('Recommendations Box Header')\n@subtitle('Use Title Case and stay below 40 characters')\nheader: string;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"markdown",children:"@markdown"}),"\n",(0,i.jsxs)(t.p,{children:["When ",(0,i.jsxs)(t.a,{href:"#title--subtitle",children:[(0,i.jsx)(t.code,{children:"@title"})," and ",(0,i.jsx)(t.code,{children:"@subtitle"})]})," are not enough for the context you want to provide, you can use the ",(0,i.jsx)(t.code,{children:"@markdown"})," decorator to go wild with text, styling and even links."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{1-6} title="Notice the backticks used to open and close markdown content in this decorator"',children:"@markdown(`\n---\n#### Conditional Configuration\n\n**Use only on campaigns targeted to small audiences**\n`)\n@title('Use Conditional Configuration?')\nisConditionalConfigurationUsed: boolean = false;\n"})}),"\n",(0,i.jsxs)(t.admonition,{title:"You Should Know",type:"note",children:[(0,i.jsxs)(t.p,{children:["For ",(0,i.jsx)(t.code,{children:"@markdown"})," to work, you need to add the content without any indentation:"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{2-5} title="@markdown decorator works only with unindented markdown"',children:"    @markdown(`\n---\n#### Conditional Configuration\n\n**Use only on campaigns targeted to small audiences**\n    `)\n    @title('Use Conditional Configuration?')\n    isConditionalConfigurationUsed: boolean = false;\n"})})]}),"\n",(0,i.jsx)(t.h3,{id:"header--headersubtitle",children:"@header & @headerSubtitle"}),"\n",(0,i.jsxs)(t.p,{children:["There is also a pair of ",(0,i.jsx)(t.code,{children:"@header"})," and ",(0,i.jsx)(t.code,{children:"@subheader"})," decorators that are very similar to ",(0,i.jsxs)(t.a,{href:"#title--subtitle",children:[(0,i.jsx)(t.code,{children:"@title"})," and ",(0,i.jsx)(t.code,{children:"@subtitle"})]})," with one key difference - they are not attaching to a property. That's right, you can use them anywhere to add context to whole sections of your campaign configuration form."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Example use of @subheader decorator for added context"',children:"@header('Recommendations Box Header')\n@headerSubtitle('Use Title Case and stay below 40 characters')\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"@header"})," will be in the same font size as the input labels, and ",(0,i.jsx)(t.code,{children:"@headerSubtitle"})," will match ",(0,i.jsx)(t.a,{href:"#title--subtitle",children:(0,i.jsx)(t.code,{children:"@subtitle"})})," style. Oh, and passing a space - ",(0,i.jsx)(t.code,{children:"@header(' ')"})," - will add a bit of whitespace. Perfect for those of us with OCD who can't stand that uneven spacing between inputs."]}),"\n",(0,i.jsx)(t.h3,{id:"hidden--shownif",children:"@hidden & @shownIf"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"@hidden"})," & ",(0,i.jsx)(t.code,{children:"@shownIf"})," are some of the most important decorators, as they allow you to control the visibility of the inputs. Big if you want to provide a nice and clean campaign configuration UI that won't overwhelm the marketer."]}),"\n",(0,i.jsx)(t.p,{children:"There are two ways to use them."}),"\n",(0,i.jsxs)(t.p,{children:["First, with a basic ",(0,i.jsx)(t.code,{children:"true"})," boolean argument, it makes sense only for ",(0,i.jsx)(t.code,{children:"@hidden"}),". It is perfect for data you will calculate in the ",(0,i.jsx)(t.a,{href:"/docs/interaction-studio/mcp-serverside-code-basics#2-run-block",children:"run() block"})," or don't want to show to the marketer."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Example use of simple boolean @hidden decorator"',children:'@hidden(true)\ntemplateVersion: string = "Version 1.1";\n'})}),"\n",(0,i.jsx)(t.p,{children:"It gets much more interesting with the second way to use those decorators - with a function that returns a boolean as an argument. With this, you can build conditional logic based on other inputs:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'{3}title="Example use of function-based @shownIf decorator"',children:"bannerType: 'Manual' | 'Promotion' | 'Einstein';\n\n@shownIf(this, (self) => self.bannerType === 'Manual')\nimageURL: string;\n"})}),"\n",(0,i.jsx)(t.admonition,{title:"You Should Know",type:"note",children:(0,i.jsxs)(t.p,{children:["Technically, in both scenarios, you can use ",(0,i.jsx)(t.code,{children:"@hidden"})," and ",(0,i.jsx)(t.code,{children:"@shownIf"})," interchangeably after appropriately flipping the boolean. However, I find using ",(0,i.jsx)(t.code,{children:"@hidden"})," only with a ",(0,i.jsx)(t.code,{children:"true"})," boolean argument and ",(0,i.jsx)(t.code,{children:"@shownIf"})," with a function argument easier to grasp when reading the code."]})}),"\n",(0,i.jsx)(t.h3,{id:"buttongroup",children:"@buttonGroup"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"@buttonGroup"})," is a simple decorator that can change a ",(0,i.jsx)(t.a,{href:"#-select-string",children:(0,i.jsx)(t.code,{children:"single-select picklist"})})," into a set of buttons with one line:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",metastring:'title="Example use of @buttonGroup decorator"',children:"@buttonGroup(true)\nbannerType: 'Manual' | 'Promotion' | 'Einstein';\n"})}),"\n",(0,i.jsx)(t.p,{children:"It's nice if you have a small pool of options with short names."}),"\n",(0,i.jsx)(t.h3,{id:"optional",children:"@optional"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"@optional"})," decorator was an excellent tool for setting required and non-required inputs. Was. It no longer works. Whether you add it to the code or not, nothing will change in the UI or on saving. And I doubt it will start working, as bringing the functionality back would break all templates created with it not working in mind. To sum up, there is no way to enforce filling an input."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},6748:(e,t,n)=>{n.d(t,{U:()=>a});const i="leadText_qzwo";var r=n(4848);const a=e=>{let{content:t}=e;return(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("p",{id:i,children:t})})}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(6540);const r={},a=i.createContext(r);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);