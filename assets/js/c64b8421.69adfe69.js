"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[1833],{7068:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var s=t(4848),i=t(8453),a=t(6748);const o={id:"sfmc-sql-case",title:"SFMC SQL Case",sidebar_label:"Case",description:"Empower your Marketing Cloud queries with conditional SQL CASE logic.",image:"img/og/og-image-sql-case.png",tags:["Marketing Cloud","SQL"]},r=void 0,l={id:"sql/sfmc-sql-case",title:"SFMC SQL Case",description:"Empower your Marketing Cloud queries with conditional SQL CASE logic.",source:"@site/docs/sql/sfmc-sql-case.mdx",sourceDirName:"sql",slug:"/sql/sfmc-sql-case",permalink:"/docs/sql/sfmc-sql-case",draft:!1,unlisted:!1,editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/sql/sfmc-sql-case.mdx",tags:[{inline:!0,label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{inline:!0,label:"SQL",permalink:"/docs/tags/sql"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1672581436e3,frontMatter:{id:"sfmc-sql-case",title:"SFMC SQL Case",sidebar_label:"Case",description:"Empower your Marketing Cloud queries with conditional SQL CASE logic.",image:"img/og/og-image-sql-case.png",tags:["Marketing Cloud","SQL"]},sidebar:"docs",previous:{title:"Where",permalink:"/docs/sql/sfmc-sql-where"},next:{title:"Like",permalink:"/docs/sql/sfmc-sql-like"}},c={},d=[{value:"Conditional values with CASE",id:"conditional-values-with-case",level:2},{value:"Search version of CASE",id:"search-version-of-case",level:3},{value:"LIKE in CASE",id:"like-in-case",level:3},{value:"IIF Shorthand",id:"iif-shorthand",level:3},{value:"CASE in WHERE",id:"case-in-where",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.U,{content:"Empower your Marketing Cloud queries with conditional SQL CASE logic."}),"\n",(0,s.jsx)(n.h2,{id:"conditional-values-with-case",children:"Conditional values with CASE"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CASE"})," statement evaluates a list of conditions and returns one of the multiple possible result expressions. For Marketing Cloud purposes, it is especially useful when you want to select a column and modify the values within it. Perfect for translating numeric codes to descriptive ones for personalisation purposes. Excellent for standardising data (change those ",(0,s.jsx)(n.code,{children:"1"}),", ",(0,s.jsx)(n.code,{children:"true"})," and ",(0,s.jsx)(n.code,{children:"on"})," values of opt-in to a single format)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:"{8-14}",children:"SELECT\n      ContactKey\n    , EmailAddress\n    , [External Contact Id] AS ExternalContactId\n    , Gender__c             AS Gender\n    , 'Lead'                AS RecordType\n    , GETUTCDATE()          AS ImportDate\n    , CASE MemberType__c\n        WHEN 1 THEN 'Bronze'\n        WHEN 2 THEN 'Silver'\n        WHEN 3 THEN 'Gold'\n        WHEN 4 THEN 'Platinum'\n        ELSE 'Unregistered'\n      END                   AS MemberType\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can have as many ",(0,s.jsx)(n.code,{children:"WHEN"}),"/",(0,s.jsx)(n.code,{children:"THEN"})," conditions as you want. Also, the ",(0,s.jsx)(n.code,{children:"ELSE"})," statement is optional but a good idea to catch unexpected values."]}),"\n",(0,s.jsxs)(n.p,{children:["Feel free also to leverage ",(0,s.jsx)(n.a,{href:"/docs/sql/sfmc-sql-select#aliasing-with-as",children:"aliases"})," to manipulate the column name at the same time:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:"{14}",children:"SELECT\n      ContactKey\n    , EmailAddress\n    , [External Contact Id] AS ExternalContactId\n    , Gender__c             AS Gender\n    , 'Lead'                AS RecordType\n    , GETUTCDATE()          AS ImportDate\n    , CASE MemberType__c\n        WHEN 1 THEN 'Bronze'\n        WHEN 2 THEN 'Silver'\n        WHEN 3 THEN 'Gold'\n        WHEN 4 THEN 'Platinum'\n        ELSE 'Unregistered'\n      END                   AS MemberType\n"})}),"\n",(0,s.jsx)(n.h3,{id:"search-version-of-case",children:"Search version of CASE"}),"\n",(0,s.jsxs)(n.p,{children:["The above examples are already helpful in segmentation, but there is also one more way to write and use a ",(0,s.jsx)(n.code,{children:"CASE"})," statement that gives even more power. The search ",(0,s.jsx)(n.code,{children:"CASE"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The difference is that you are not passing the column name on which you will be building conditions. Instead, you create a boolean expression from scratch for each scenario."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'{8-14} title="The same query as the previous one, but written with Search Case"',children:"SELECT\n      ContactKey\n    , EmailAddress\n    , [External Contact Id] AS ExternalContactId\n    , Gender__c             AS Gender\n    , 'Lead'                AS RecordType\n    , GETUTCDATE()          AS ImportDate\n    , CASE\n        WHEN MemberType__c = 1 THEN 'Bronze'\n        WHEN MemberType__c = 2 THEN 'Silver'\n        WHEN MemberType__c = 3 THEN 'Gold'\n        WHEN MemberType__c = 4 THEN 'Platinum'\n        ELSE 'Unregistered'\n      END                   AS MemberType\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The example above doesn't show why it is worth using the search ",(0,s.jsx)(n.code,{children:"CASE"}),". It is a bit longer than the standard approach! But there is a reason to use this form of ",(0,s.jsx)(n.code,{children:"CASE"})," statement that is visible once you want to create more elaborate conditions that are possible only with this version:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'{3-7} title="Let\'s calculate what channel we should use in our campaign for a given user"',children:"SELECT\n      ContactKey\n    , CASE\n        WHEN IsAppInstalled = 1                             THEN 'Push'\n        WHEN EmailOptIn = 1 AND EmailAddress IS NOT NULL    THEN 'Email'\n        WHEN PhoneOptIn = 1 AND Mobile IS NOT NULL          THEN 'Phone'\n      END AS PreferredChannel\n"})}),"\n",(0,s.jsxs)(n.admonition,{title:"You Should Know",type:"note",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CASE"})," statement returns ",(0,s.jsx)(n.code,{children:"THEN"})," value of the first condition that evaluated to ",(0,s.jsx)(n.code,{children:"TRUE"}),". In the above example, if the ",(0,s.jsx)(n.code,{children:"IsAppInstalled = 1"})," is true, other conditions are not considered. Even if for selected contact all of them will be true, it will still have the value ",(0,s.jsx)(n.code,{children:"Push"})," in PreferredChannel. It is perfect, as it allows us to prioritise cheaper channels."]}),(0,s.jsxs)(n.p,{children:["Always consider the order of the conditions in your ",(0,s.jsx)(n.code,{children:"CASE"})," statement. It both might lead to errors if you don't expect the behaviour mentioned above and make your life much easier if you know it works that way."]})]}),"\n",(0,s.jsxs)(n.p,{children:["As you can see, thanks to search ",(0,s.jsx)(n.code,{children:"CASE"})," statements, we can check conditions on multiple different columns and connect them with ",(0,s.jsx)(n.code,{children:"AND"}),"/",(0,s.jsx)(n.code,{children:"OR"})," statements for better control. You can use this version of the ",(0,s.jsx)(n.code,{children:"CASE"})," statement for all your needs (even those covered by the basic one) to not worry about two ways of formatting."]}),"\n",(0,s.jsxs)(n.admonition,{title:"You Should Know",type:"note",children:[(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"CASE"})," statements inside a ",(0,s.jsx)(n.code,{children:"CASE"})," statement to have an even more dynamic query."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'{3-16} title="Let\'s add another dimension of membership level to differentiate available channels"',children:"SELECT\n      ContactKey\n    , CASE\n        WHEN MemberType = 'Platinum'                        THEN 'Key Account Manager'\n        WHEN MemberType = 'Gold' OR MemberType = 'Silver'   THEN\n            CASE\n                WHEN IsAppInstalled = 1                             THEN 'Push'\n                WHEN EmailOptIn = 1 AND EmailAddress IS NOT NULL    THEN 'Email'\n                WHEN PhoneOptIn = 1 AND Mobile IS NOT NULL          THEN 'Phone'\n            END\n        WHEN MemberType = 'Bronze'                          THEN\n            CASE\n                WHEN IsAppInstalled = 1                             THEN 'Push'\n                WHEN EmailOptIn = 1 AND EmailAddress IS NOT NULL    THEN 'Email'\n            END\n      END AS PreferredChannel\n"})})]}),"\n",(0,s.jsx)(n.h3,{id:"like-in-case",children:"LIKE in CASE"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/docs/sql/sfmc-sql-like",children:(0,s.jsx)(n.code,{children:"LIKE"})})," is not only valuable for the ",(0,s.jsxs)(n.a,{href:"/docs/sql/sfmc-sql-where#like-operator",children:[(0,s.jsx)(n.code,{children:"WHERE"})," Statement"]}),". It is also an incredible tool empowering the ",(0,s.jsx)(n.code,{children:"CASE"})," statement. It allows you to build flexible conditions on free text values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:'{4} title="Great way to split your database between Internal and External users for different communication"',children:"SELECT\n      ContactKey\n    , CASE\n        WHEN EmailAddress LIKE '%@mateuszdabrowski.%' THEN 'Internal'\n        ELSE 'External'\n      END AS ContactType\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"SELECT"})," statement, the ",(0,s.jsx)(n.code,{children:"LIKE"})," operator is handy for fixing data coming from the free text fields. To learn more about the possibilities, check out the ",(0,s.jsxs)(n.a,{href:"/docs/sql/sfmc-sql-like",children:[(0,s.jsx)(n.code,{children:"LIKE"})," guide"]}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"iif-shorthand",children:"IIF Shorthand"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CASE"})," statement is a fantastic tool but can be overkill for simple conditions. The ",(0,s.jsx)(n.code,{children:"IIF"})," comes to the rescue."]}),"\n",(0,s.jsx)(n.p,{children:"It takes three arguments:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Condition"}),"\n",(0,s.jsx)(n.li,{children:"The value returned if the condition evaluates to true"}),"\n",(0,s.jsx)(n.li,{children:"The value returned if the condition evaluates to false"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["With it, instead of multiline ",(0,s.jsx)(n.code,{children:"CASE"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:"{3-6}",children:"SELECT\n      _Subscriber.SubscriberKey\n    , CASE\n        WHEN _Subscriber.Status = 'active' THEN 'TRUE'\n        ELSE 'FALSE'\n      END AS Sendable\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can have the same outcome in a single, more readable ",(0,s.jsx)(n.code,{children:"IIF"})," line:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:"{3}",children:"SELECT\n      _Subscriber,SubscriberKey,\n    , IIF(_Subscriber.Status = 'active', 'TRUE', 'FALSE') AS Sendable\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Whenever you have a single condition - go with ",(0,s.jsx)(n.code,{children:"IIF"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{title:"You Should Know",type:"note",children:[(0,s.jsxs)(n.p,{children:["You can take both ",(0,s.jsx)(n.code,{children:"CASE"})," and ",(0,s.jsx)(n.code,{children:"IIF"})," to the next level with dynamic values. Don't limit yourself to a string, integer or boolean - pass a column name."]}),(0,s.jsxs)(n.p,{children:["Use case? Think of a Master Data Extension that stores a massive amount of contact information, including preferred channel (Email or Mobile). With dynamic values and ",(0,s.jsx)(n.code,{children:"IIF"})," in just a few lines, we can create an optimised Data Extension with crucial information:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",metastring:"{4}",children:"SELECT\n      SubscriberKey\n    , PreferredChannel\n    , IIF(PreferredChannel = 'Email', EmailAddress, MobileNumber) AS PointOfContact\n"})}),(0,s.jsx)(n.p,{children:"Now, even with just three columns in your Entry Point, you can create a Journey that adapts the channel to customer preferences."})]}),"\n",(0,s.jsx)(n.h2,{id:"case-in-where",children:"CASE in WHERE"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CASE"})," statement is not only useful in a ",(0,s.jsx)(n.a,{href:"/docs/sql/sfmc-sql-select",children:(0,s.jsx)(n.code,{children:"SELECT"})})," part of the query. You can use it also within the ",(0,s.jsxs)(n.a,{href:"/docs/sql/sfmc-sql-where#case-operator",children:[(0,s.jsx)(n.code,{children:"WHERE"})," to apply conditional filtering"]}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},6748:(e,n,t)=>{t.d(n,{U:()=>a});t(6540);const s="leadText_qzwo";var i=t(4848);const a=e=>{let{content:n}=e;return(0,i.jsx)(i.Fragment,{children:(0,i.jsx)("p",{id:s,children:n})})}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6540);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);