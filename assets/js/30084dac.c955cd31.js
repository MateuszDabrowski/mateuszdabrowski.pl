"use strict";(self.webpackChunkmd=self.webpackChunkmd||[]).push([[3687],{4137:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),m=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=m(a),c=r,k=p["".concat(u,".").concat(c)]||p[c]||d[c]||l;return a?n.createElement(k,i(i({ref:t},s),{},{components:a})):n.createElement(k,i({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=p;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8448:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(7294);function r(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},5529:function(e,t,a){a.d(t,{Z:function(){return s}});var n=a(7462),r=a(7294),l=a(1048),i=a(1874),o=a(6010),u="tabItem_LplD";function m(e){var t,a,l,m=e.lazy,s=e.block,d=e.defaultValue,p=e.values,c=e.groupId,k=e.className,N=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=p?p:N.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),h=(0,i.lx)(g,(function(e,t){return e.value===t.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===d?d:null!=(t=null!=d?d:null==(a=N.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=N[0])?void 0:l.props.value;if(null!==b&&!g.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,i.UB)(),f=y.tabGroupChoices,v=y.setTabGroupChoices,C=(0,r.useState)(b),T=C[0],E=C[1],w=[],O=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=c){var A=f[c];null!=A&&A!==T&&g.some((function(e){return e.value===A}))&&E(A)}var S=function(e){var t=e.currentTarget,a=w.indexOf(t),n=g[a].value;n!==T&&(O(t),E(n),null!=c&&v(c,n))},q=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=w.indexOf(e.currentTarget)+1;a=w[n]||w[0];break;case"ArrowLeft":var r=w.indexOf(e.currentTarget)-1;a=w[r]||w[w.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},k)},g.map((function(e){var t=e.value,a=e.label,l=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return w.push(e)},onKeyDown:q,onFocus:S,onClick:S},l,{className:(0,o.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=a?a:t)}))),m?(0,r.cloneElement)(N.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},N.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function s(e){var t=(0,l.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},1872:function(e,t,a){a.d(t,{m:function(){return l}});var n=a(7294),r="leadText_qzwo",l=function(e){var t=e.content;return n.createElement(n.Fragment,null,n.createElement("p",{id:r},t))}},1299:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return p},assets:function(){return c},toc:function(){return k},default:function(){return g}});var n=a(7462),r=a(3366),l=(a(7294),a(4137)),i=a(5529),o=a(8448),u=a(1872),m=["components"],s={id:"sfmc-sql-aggregate-functions",title:"SFMC SQL Aggregate Functions",sidebar_label:"Aggregate Functions",description:"Group rows and apply aggregate functions to see the big picture in your data extensions.",image:"img/og/og-image-sql-aggregate-functions.png",tags:["Marketing Cloud","SQL"]},d=void 0,p={unversionedId:"sql/sfmc-sql-aggregate-functions",id:"sql/sfmc-sql-aggregate-functions",title:"SFMC SQL Aggregate Functions",description:"Group rows and apply aggregate functions to see the big picture in your data extensions.",source:"@site/docs/sql/sfmc-sql-aggregate-functions.mdx",sourceDirName:"sql",slug:"/sql/sfmc-sql-aggregate-functions",permalink:"/docs/sql/sfmc-sql-aggregate-functions",editUrl:"https://github.com/MateuszDabrowski/mateuszdabrowski.pl/edit/master/docs/sql/sfmc-sql-aggregate-functions.mdx",tags:[{label:"Marketing Cloud",permalink:"/docs/tags/marketing-cloud"},{label:"SQL",permalink:"/docs/tags/sql"}],version:"current",lastUpdatedBy:"Mateusz D\u0105browski",lastUpdatedAt:1632606565,formattedLastUpdatedAt:"9/25/2021",frontMatter:{id:"sfmc-sql-aggregate-functions",title:"SFMC SQL Aggregate Functions",sidebar_label:"Aggregate Functions",description:"Group rows and apply aggregate functions to see the big picture in your data extensions.",image:"img/og/og-image-sql-aggregate-functions.png",tags:["Marketing Cloud","SQL"]},sidebar:"snippets",previous:{title:"Conversion Functions",permalink:"/docs/sql/sfmc-sql-conversion-functions"},next:{title:"Style Guide",permalink:"/docs/sql/sfmc-sql-style-guide"}},c={},k=[{value:"GROUP BY",id:"group-by",level:2},{value:"GROUP BY ROLLUP",id:"group-by-rollup",level:3},{value:"GROUP BY CUBE",id:"group-by-cube",level:3},{value:"COUNT",id:"count",level:2},{value:"COUNT *, ALL and DISTINCT",id:"count--all-and-distinct",level:3},{value:"HAVING",id:"having",level:2},{value:"HAVING vs WHERE",id:"having-vs-where",level:3},{value:"MIN and MAX",id:"min-and-max",level:2},{value:"AVG",id:"avg",level:2},{value:"SUM",id:"sum",level:2}],N={toc:k};function g(e){var t=e.components,a=(0,r.Z)(e,m);return(0,l.kt)("wrapper",(0,n.Z)({},N,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(u.m,{content:"Group rows and apply aggregate functions to see the big picture in your data.",mdxType:"LeadText"}),(0,l.kt)("h2",{id:"group-by"},"GROUP BY"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," allows you to create aggregation by grouping the input data on selected column(s)."),(0,l.kt)("p",null,"It limits the data you can ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select"},(0,l.kt)("inlineCode",{parentName:"a"},"SELECT"))," to either ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," column(s) or aggregate functions."),(0,l.kt)("p",null,"Let's say you want to check which email domains are most popular in your database."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{5}","{5}":!0},"SELECT\n      Domain\n    , COUNT(*) AS SubscriberCount\nFROM _Subscribers\nGROUP BY Domain\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Domain"),(0,l.kt)("th",{parentName:"tr",align:null},"SubscriberCount"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mateuszdabrowski.pl"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"1234")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"987")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"1111")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"...")))))),(0,l.kt)("p",null,"With this simple query, you have all subscribers grouped by their domain with the number of matching rows thanks to the ",(0,l.kt)("a",{parentName:"p",href:"#count"},(0,l.kt)("inlineCode",{parentName:"a"},"COUNT"))," function."),(0,l.kt)("p",null,"You can quickly improve this query by limiting the records with ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select#top"},(0,l.kt)("inlineCode",{parentName:"a"},"TOP"))," and sorting ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select#top-with-order-by"},(0,l.kt)("inlineCode",{parentName:"a"},"ORDER BY"))," to leverage Pareto's principle and pick 20% of the records responsible for 80% of the results. In this case - 20% domains covering approximately 80% subscribers."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{5}","{5}":!0},"SELECT TOP 20 PERCENT\n      Domain\n    , COUNT(*) AS SubscriberCount\nFROM _Subscribers\nGROUP BY Domain\nORDER BY COUNT(*) DESC\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Domain"),(0,l.kt)("th",{parentName:"tr",align:null},"SubscriberCount"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"1234")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"1111")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"987")))))),(0,l.kt)("p",null,"With such data, you can assess your mailing list and decide, for example, whether using AMP for Email will be worth the effort for your business."),(0,l.kt)("p",null,"It is, however, just the beginning of what you can do with ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY"),". The real magic happens with multiple columns used for the grouping."),(0,l.kt)("p",null,"Let's check how the domain numbers are changing in years with the help of the ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-date-functions#datepart"},(0,l.kt)("inlineCode",{parentName:"a"},"DATEPART")," function")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/config/sfmc-config-system-data-views#_subscribers"},(0,l.kt)("inlineCode",{parentName:"a"},"DateJoined")," field"),"."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{6-8}","{6-8}":!0},"SELECT TOP 20 PERCENT\n      Domain\n    , DATEPART(YEAR, DateJoined) AS YearJoined\n    , COUNT(*) AS SubscriberCount\nFROM _Subscribers\nGROUP BY\n      Domain\n    , DATEPART(YEAR, DateJoined)\nORDER BY COUNT(*) DESC\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Domain"),(0,l.kt)("th",{parentName:"tr",align:null},"YearJoined"),(0,l.kt)("th",{parentName:"tr",align:null},"SubscriberCount"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"642")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"578")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"567")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"456")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"432")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"345")))))),(0,l.kt)("p",null,"As you can see, by just adding more columns after a comma (order is irrelevant), we can make even more exciting groupings. In this case, we will have a separate row for each domain and year. Easy to see how many Subscribers using Gmail joined your database in 2021 vs 2020."),(0,l.kt)("h3",{id:"group-by-rollup"},"GROUP BY ROLLUP"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ROLLUP")," takes the multi-column grouping to the next level by showing totals and subtotals in the outcomes. Not useful for campaign segmentation, but excellent for quick analysis and reporting."),(0,l.kt)("p",null,"To use it - add the ",(0,l.kt)("inlineCode",{parentName:"p"},"ROLLUP")," keyword and wrap grouping columns in parentheses."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{6-9}","{6-9}":!0},"SELECT TOP 20 PERCENT\n      Domain\n    , DATEPART(YEAR, DateJoined) AS YearJoined\n    , COUNT(*) AS SubscriberCount\nFROM _Subscribers\nGROUP BY ROLLUP (\n          Domain\n        , DATEPART(YEAR, DateJoined)\n    )\nORDER BY COUNT(*) DESC\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Domain"),(0,l.kt)("th",{parentName:"tr",align:null},"YearJoined"),(0,l.kt)("th",{parentName:"tr",align:null},"SubscriberCount"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"12304")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"1234")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"1111")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"987")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"642")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"578")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"567")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"456")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"432")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"345")))))),(0,l.kt)("p",null,"In the outcomes, you will see some rows with ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," as columns - those are rows for total and subtotals."),(0,l.kt)("p",null,"Notice that the ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),"s are either in all columns (total) or the ",(0,l.kt)("inlineCode",{parentName:"p"},"YearJoined")," column (subtotals). There are no rows with ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," only in ",(0,l.kt)("inlineCode",{parentName:"p"},"Domain"),". It is because the ",(0,l.kt)("inlineCode",{parentName:"p"},"ROLLUP")," rolls columns provided in parentheses from right to left when calculating subtotals."),(0,l.kt)("p",null,"Order of columns will have a massive impact on outcomes!"),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"You Should Know")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can also perform partial rollup by keeping some columns outside of the ",(0,l.kt)("inlineCode",{parentName:"p"},"ROLLUP")," operator. In the example below, I excluded ",(0,l.kt)("inlineCode",{parentName:"p"},"Domain")," from the ",(0,l.kt)("inlineCode",{parentName:"p"},"ROLLUP")," resulting in the lack of total in the outcomes."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{6-8}","{6-8}":!0},"SELECT TOP 20 PERCENT\n      Domain\n    , DATEPART(YEAR, DateJoined) AS YearJoined\n    , COUNT(*) AS SubscriberCount\nFROM _Subscribers\nGROUP BY\n      Domain\n    , ROLLUP(DATEPART(YEAR, DateJoined))\nORDER BY COUNT(*) DESC\nORDER BY COUNT(*) DESC\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",{parentName:"div"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Domain"),(0,l.kt)("th",{parentName:"tr",align:null},"YearJoined"),(0,l.kt)("th",{parentName:"tr",align:null},"SubscriberCount"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"1234")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"1111")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"987")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"642")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"578")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"567")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"456")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"432")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"345")))))))),(0,l.kt)("h3",{id:"group-by-cube"},"GROUP BY CUBE"),(0,l.kt)("p",null,"If you thought that right-to-left execution of the ",(0,l.kt)("inlineCode",{parentName:"p"},"ROLLUP")," is not helping your use case and instead you would rather have all possible groupings - ",(0,l.kt)("inlineCode",{parentName:"p"},"CUBE")," is here to help."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:"{6-9}","{6-9}":!0},"SELECT TOP 20 PERCENT\n      Domain\n    , DATEPART(YEAR, DateJoined) AS YearJoined\n    , COUNT(*) AS SubscriberCount\nFROM _Subscribers\nGROUP BY CUBE (\n          Domain\n        , DATEPART(YEAR, DateJoined)\n    )\nORDER BY COUNT(*) DESC\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Domain"),(0,l.kt)("th",{parentName:"tr",align:null},"YearJoined"),(0,l.kt)("th",{parentName:"tr",align:null},"SubscriberCount"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"12304")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"6201")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"4321")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"1234")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"1111")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"987")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"642")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"578")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"567")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"456")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2021"),(0,l.kt)("td",{parentName:"tr",align:null},"432")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2020"),(0,l.kt)("td",{parentName:"tr",align:null},"345")))))),(0,l.kt)("p",null,"It rolls data like ",(0,l.kt)("a",{parentName:"p",href:"#group-by-rollup"},(0,l.kt)("inlineCode",{parentName:"a"},"ROLLUP")),", but for all combinations of columns. Notice in the outcomes the second and third rows with ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),"s in first column and count for the whole year."),(0,l.kt)("h2",{id:"count"},"COUNT"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"COUNT")," function allows you to count the number of rows that matches a query. It is excellent for both ",(0,l.kt)("em",{parentName:"p"},"ad hoc")," data exploration and creating administrative queries that help maintain your instance. It's also a must-have for ",(0,l.kt)("a",{parentName:"p",href:"#group-by"},(0,l.kt)("inlineCode",{parentName:"a"},"GROUP BY")),"."),(0,l.kt)("p",null,"Let's get the count of our Subscribers."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{1} title="Count all rows in the _Subscribers Data View"',"{1}":!0,title:'"Count',all:!0,rows:!0,in:!0,the:!0,_Subscribers:!0,Data:!0,'View"':!0},"SELECT COUNT(*)\nFROM _Subscribers\n")),(0,l.kt)("p",null,"Nice, but it does not give us any information that we couldn't find more comfortable in the User Interface. So, where is the added value?"),(0,l.kt)("p",null,"For example, in seeing whether you have potential duplicate contacts. Instead of looking for all rows with ",(0,l.kt)("inlineCode",{parentName:"p"},"COUNT(*)"),", we will change the function parameter to the specific column to count only its values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{3,6} title="This query will show you which Email Addresses exists on more than one subscriber"',"{3,6}":!0,title:'"This',query:!0,will:!0,show:!0,you:!0,which:!0,Email:!0,Addresses:!0,exists:!0,on:!0,more:!0,than:!0,one:!0,'subscriber"':!0},"SELECT\n      EmailAddress\n    , COUNT(EmailAddress) AS EmailCount\nFROM _Subscribers\nGROUP BY EmailAddress\nHAVING COUNT(EmailAddress) > 1\n")),(0,l.kt)("p",null,"With ",(0,l.kt)("a",{parentName:"p",href:"#group-by"},(0,l.kt)("inlineCode",{parentName:"a"},"GROUP BY"))," and ",(0,l.kt)("a",{parentName:"p",href:"#having"},(0,l.kt)("inlineCode",{parentName:"a"},"HAVING"))," above, we can simplify the output by showing only the duplicate values with corresponding counts."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"You Should Know")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can take it to the next level with the subquery approach:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{11-12} title="Returns Subscriber Key, Email Address and Duplicate Count of your database"',"{11-12}":!0,title:'"Returns',Subscriber:!0,"Key,":!0,Email:!0,Address:!0,and:!0,Duplicate:!0,Count:!0,of:!0,your:!0,'database"':!0},"SELECT\n      subscribers.SubscriberKey\n    , subscribers.EmailAddress\n    , counted.EmailCount\nFROM _Subscribers AS subscribers\n    INNER JOIN (\n        SELECT\n              subscribers.EmailAddress        AS EmailAddress\n            , COUNT(subscribers.EmailAddress) AS EmailCount\n        FROM _Subscribers AS subscribers\n        GROUP BY subscribers.EmailAddress\n        HAVING COUNT(subscribers.EmailAddress) > 1\n    ) AS counted\n        ON counted.EmailAddress = subscribers.EmailAddress\n")),(0,l.kt)("p",{parentName:"div"},"This extended query will not only tell you that there are potential duplicates. It will also give you Subscriber Keys of duplicate contacts so that you can investigate the reason and clean up records after fixing the underlying issue."),(0,l.kt)("p",{parentName:"div"},"Pack it into Automation with Verification Activity on top and keep your database clean with ease."))),(0,l.kt)("h3",{id:"count--all-and-distinct"},"COUNT *, ALL and DISTINCT"),(0,l.kt)("p",null,"There are three approaches to using ",(0,l.kt)("inlineCode",{parentName:"p"},"COUNT")," that differ slightly from each other."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"COUNT(*)")," will return the number of items, including ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," values and duplicates."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"COUNT(FieldName)")," / ",(0,l.kt)("inlineCode",{parentName:"li"},"COUNT(ALL FieldName)")," will return the number on non-",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," values including duplicates."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"COUNT(DISTINCT FieldName)")," will return the number of non-",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," and non-duplicate values.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{2-4} title="Let\'s find out whether we have multiple Subscribers with the same Email Address"',"{2-4}":!0,title:"\"Let's",find:!0,out:!0,whether:!0,we:!0,have:!0,multiple:!0,Subscribers:!0,with:!0,the:!0,same:!0,Email:!0,'Address"':!0},"SELECT\n      COUNT(EmailAddress) AS EmailCount\n    , COUNT(DISTINCT EmailAddress) AS UniqueEmailCount\nFROM _Subscribers\n")),(0,l.kt)("h2",{id:"having"},"HAVING"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"HAVING")," works nearly the same as ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,l.kt)("inlineCode",{parentName:"a"},"WHERE"))," and allows you to filter outcomes of your ",(0,l.kt)("a",{parentName:"p",href:"#group-by"},(0,l.kt)("inlineCode",{parentName:"a"},"GROUP BY")),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{6} title="This query will show you which Email Addresses exists on more than one subscriber"',"{6}":!0,title:'"This',query:!0,will:!0,show:!0,you:!0,which:!0,Email:!0,Addresses:!0,exists:!0,on:!0,more:!0,than:!0,one:!0,'subscriber"':!0},"SELECT\n      EmailAddress\n    , COUNT(EmailAddress) AS EmailCount\nFROM _Subscribers\nGROUP BY EmailAddress\nHAVING COUNT(EmailAddress) > 1\n")),(0,l.kt)("p",null,"You can leverage all filtering tricks from ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,l.kt)("inlineCode",{parentName:"a"},"WHERE")),". In practice, I mostly use it along with aggregate functions like ",(0,l.kt)("a",{parentName:"p",href:"#count"},(0,l.kt)("inlineCode",{parentName:"a"},"COUNT")),"."),(0,l.kt)("h3",{id:"having-vs-where"},"HAVING vs WHERE"),(0,l.kt)("p",null,"I just wrote that ",(0,l.kt)("inlineCode",{parentName:"p"},"HAVING")," and ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,l.kt)("inlineCode",{parentName:"a"},"WHERE"))," work similarly, and both filter the outcomes. What is the difference?"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"WHERE")," filters individual data (rows before ",(0,l.kt)("a",{parentName:"li",href:"#group-by"},(0,l.kt)("inlineCode",{parentName:"a"},"GROUP BY"))," is applied)"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"HAVING")," filters aggregated data (rows after ",(0,l.kt)("a",{parentName:"li",href:"#group-by"},(0,l.kt)("inlineCode",{parentName:"a"},"GROUP BY"))," is applied)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{5,7} title="This query will show you which Email Addresses exists on more than one active subscriber"',"{5,7}":!0,title:'"This',query:!0,will:!0,show:!0,you:!0,which:!0,Email:!0,Addresses:!0,exists:!0,on:!0,more:!0,than:!0,one:!0,active:!0,'subscriber"':!0},"SELECT\n      EmailAddress\n    , COUNT(EmailAddress) AS EmailCount\nFROM _Subscribers\nWHERE Status = 'active'\nGROUP BY EmailAddress\nHAVING COUNT(EmailAddress) > 1\n")),(0,l.kt)("p",null,"Thanks to using both ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"HAVING")," in this query, we will look only for duplicate active Subscribers. If we have two subscribers with the same email, but one is inactive, this query won't output it."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"You Should Know")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"You can use both in the same query and even mix it with ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select#distinct"},(0,l.kt)("inlineCode",{parentName:"a"},"DISTINCT")),"."),(0,l.kt)("p",{parentName:"div"},"However, when building such layered filters, keep in mind the SQL's order of execution for clauses:"),(0,l.kt)("p",{parentName:"div"},(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-from"},(0,l.kt)("inlineCode",{parentName:"a"},"FROM"))," > ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,l.kt)("inlineCode",{parentName:"a"},"WHERE"))," > ",(0,l.kt)("a",{parentName:"p",href:"#group-by"},(0,l.kt)("inlineCode",{parentName:"a"},"GROUP BY"))," > ",(0,l.kt)("a",{parentName:"p",href:"#having"},(0,l.kt)("inlineCode",{parentName:"a"},"HAVING"))," > ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select#distinct"},(0,l.kt)("inlineCode",{parentName:"a"},"DISTINCT"))," > ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select#top-with-order-by"},(0,l.kt)("inlineCode",{parentName:"a"},"ORDER BY"))),(0,l.kt)("p",{parentName:"div"},"It means that rows filtered with ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," will not be taken into consideration for ",(0,l.kt)("inlineCode",{parentName:"p"},"GROUP BY")," and that ",(0,l.kt)("inlineCode",{parentName:"p"},"DISTINCT")," deduplication will be applied to results grouped and filtered by ",(0,l.kt)("inlineCode",{parentName:"p"},"HAVING")," - not the source data."))),(0,l.kt)("h2",{id:"min-and-max"},"MIN and MAX"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MIN")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"MAX")," functions can help you find the minimum and maximum values within a group."),(0,l.kt)("p",null,"As they are aggregate functions, we can use them in both the ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select"},(0,l.kt)("inlineCode",{parentName:"a"},"SELECT"))," part of the query and for filtering with ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,l.kt)("inlineCode",{parentName:"a"},"WHERE"))," or ",(0,l.kt)("a",{parentName:"p",href:"#having"},(0,l.kt)("inlineCode",{parentName:"a"},"HAVING")),"."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{3-4,7} title="Let\'s find domains that are no longer getting new subscribers"',"{3-4,7}":!0,title:"\"Let's",find:!0,domains:!0,that:!0,are:!0,no:!0,longer:!0,getting:!0,new:!0,'subscribers"':!0},"SELECT TOP 10\n      Domain\n    , MIN(DATEDIFF(DAY, DateJoined, GETDATE())) AS YoungestSubscriberDaysOfService\n    , MAX(DATEDIFF(DAY, DateJoined, GETDATE())) AS OldestSubscriberDaysOfService\nFROM _Subscribers\nGROUP BY Domain\nORDER BY MIN(DATEDIFF(DAY, DateJoined, GETDATE())) DESC\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Domain"),(0,l.kt)("th",{parentName:"tr",align:null},"YoungestSubscriberDaysOfService"),(0,l.kt)("th",{parentName:"tr",align:null},"OldestSubscriberDaysOfService"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mateuszdabrowski.pl"),(0,l.kt)("td",{parentName:"tr",align:null},"784"),(0,l.kt)("td",{parentName:"tr",align:null},"784")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"test.com"),(0,l.kt)("td",{parentName:"tr",align:null},"530"),(0,l.kt)("td",{parentName:"tr",align:null},"743")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"253"),(0,l.kt)("td",{parentName:"tr",align:null},"723")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"...")))))),(0,l.kt)("p",null,"Learn more about ",(0,l.kt)("inlineCode",{parentName:"p"},"MIN")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"MAX")," in ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-numeric-functions#min-and-max"},"Numeric Functions documentation"),"."),(0,l.kt)("h2",{id:"avg"},"AVG"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AVG")," function allows you to find the average of values within the group."),(0,l.kt)("p",null,"It ignores ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," values for the calculation and we can use it in ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select"},(0,l.kt)("inlineCode",{parentName:"a"},"SELECT")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,l.kt)("inlineCode",{parentName:"a"},"WHERE"))," or ",(0,l.kt)("a",{parentName:"p",href:"#having"},(0,l.kt)("inlineCode",{parentName:"a"},"HAVING"))," part of the query."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{3,6,7} title="Let\'s find domain that are bouncing for most users"',"{3,6,7}":!0,title:"\"Let's",find:!0,domain:!0,that:!0,are:!0,bouncing:!0,for:!0,most:!0,'users"':!0},"SELECT TOP 10\n      Domain\n    , AVG(BounceCount) AS AverageBounceCount\nFROM _Subscribers\nGROUP BY Domain\nHAVING AVG(BounceCount) > 0\nORDER BY AVG(BounceCount) DESC\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Domain"),(0,l.kt)("th",{parentName:"tr",align:null},"AverageBounceCount"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"test.com"),(0,l.kt)("td",{parentName:"tr",align:null},"164")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"yahoo.com"),(0,l.kt)("td",{parentName:"tr",align:null},"2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outlook.com"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmail.com"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"..."),(0,l.kt)("td",{parentName:"tr",align:null},"...")))))),(0,l.kt)("p",null,"Learn more about ",(0,l.kt)("inlineCode",{parentName:"p"},"AVG")," in ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-numeric-functions#avg"},"Numeric Functions documentation"),"."),(0,l.kt)("h2",{id:"sum"},"SUM"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SUM")," function allows you to find the sum of values within the group."),(0,l.kt)("p",null,"It ignores ",(0,l.kt)("inlineCode",{parentName:"p"},"NULL")," values for the calculation and we can use it in ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-select"},(0,l.kt)("inlineCode",{parentName:"a"},"SELECT")),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/sql/sfmc-sql-where"},(0,l.kt)("inlineCode",{parentName:"a"},"WHERE"))," or ",(0,l.kt)("a",{parentName:"p",href:"#having"},(0,l.kt)("inlineCode",{parentName:"a"},"HAVING"))," part of the query."),(0,l.kt)(i.Z,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Outcome",value:"outcome"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql",metastring:'{4,8-9} title="Let\'s find product categories responsible for the highest income"',"{4,8-9}":!0,title:"\"Let's",find:!0,product:!0,categories:!0,responsible:!0,for:!0,the:!0,highest:!0,'income"':!0},"SELECT TOP 3\n      ProductCategory\n    , COUNT(Orders) AS TotalOrders\n    , SUM(Price) AS TotalIncome\nFROM Purchases\nWHERE Status = 'Complete'\nGROUP BY ProductCategory\nHAVING SUM(Price) > 1000\nORDER BY SUM(Price) DESC\n"))),(0,l.kt)(o.Z,{value:"outcome",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"ProductCategory"),(0,l.kt)("th",{parentName:"tr",align:null},"TotalOrders"),(0,l.kt)("th",{parentName:"tr",align:null},"TotalIncome"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Course"),(0,l.kt)("td",{parentName:"tr",align:null},"12"),(0,l.kt)("td",{parentName:"tr",align:null},"5500")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Webinar"),(0,l.kt)("td",{parentName:"tr",align:null},"76"),(0,l.kt)("td",{parentName:"tr",align:null},"5120")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Ebook"),(0,l.kt)("td",{parentName:"tr",align:null},"136"),(0,l.kt)("td",{parentName:"tr",align:null},"3450")))))))}g.isMDXComponent=!0}}]);